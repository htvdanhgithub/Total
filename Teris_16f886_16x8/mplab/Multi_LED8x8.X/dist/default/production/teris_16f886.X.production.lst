

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Aug 30 22:39:40 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	psect	text49,local,class=CODE,merge=1,delta=2
    68                           	psect	text50,local,class=CODE,merge=1,delta=2
    69                           	psect	text51,local,class=CODE,merge=1,delta=2
    70                           	dabs	1,0x7E,2
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  000C                     	;# 
    83  000D                     	;# 
    84  000E                     	;# 
    85  000E                     	;# 
    86  000F                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0014                     	;# 
    92  0015                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001B                     	;# 
   101  001C                     	;# 
   102  001D                     	;# 
   103  001E                     	;# 
   104  001F                     	;# 
   105  0081                     	;# 
   106  0085                     	;# 
   107  0086                     	;# 
   108  0087                     	;# 
   109  0089                     	;# 
   110  008C                     	;# 
   111  008D                     	;# 
   112  008E                     	;# 
   113  008F                     	;# 
   114  0090                     	;# 
   115  0091                     	;# 
   116  0092                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0093                     	;# 
   120  0094                     	;# 
   121  0095                     	;# 
   122  0096                     	;# 
   123  0097                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009A                     	;# 
   127  009B                     	;# 
   128  009C                     	;# 
   129  009D                     	;# 
   130  009E                     	;# 
   131  009F                     	;# 
   132  0105                     	;# 
   133  0107                     	;# 
   134  0108                     	;# 
   135  0109                     	;# 
   136  010C                     	;# 
   137  010C                     	;# 
   138  010D                     	;# 
   139  010E                     	;# 
   140  010F                     	;# 
   141  0185                     	;# 
   142  0187                     	;# 
   143  0188                     	;# 
   144  0189                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0089                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  008F                     	;# 
   190  0090                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0098                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  009F                     	;# 
   208  0105                     	;# 
   209  0107                     	;# 
   210  0108                     	;# 
   211  0109                     	;# 
   212  010C                     	;# 
   213  010C                     	;# 
   214  010D                     	;# 
   215  010E                     	;# 
   216  010F                     	;# 
   217  0185                     	;# 
   218  0187                     	;# 
   219  0188                     	;# 
   220  0189                     	;# 
   221  018C                     	;# 
   222  018D                     	;# 
   223                           
   224                           	psect	idataBANK0
   225  097B                     __pidataBANK0:	
   226                           
   227                           ;initializer for _randx
   228  097B  3401               	retlw	1
   229  097C  3400               	retlw	0
   230  097D  3400               	retlw	0
   231  097E  3400               	retlw	0
   232                           
   233                           ;initializer for _cur_x
   234  097F  3402               	retlw	2
   235                           
   236                           	psect	idataBANK1
   237  17AB                     __pidataBANK1:	
   238                           
   239                           ;initializer for _g_matrix16x8
   240  17AB  3400               	retlw	0
   241  17AC  3400               	retlw	0
   242  17AD  3400               	retlw	0
   243  17AE  3440               	retlw	64
   244  17AF  3454               	retlw	84
   245  17B0  3456               	retlw	86
   246  17B1  3456               	retlw	86
   247  17B2  347E               	retlw	126
   248  17B3  347E               	retlw	126
   249  17B4  347E               	retlw	126
   250  17B5  347E               	retlw	126
   251  17B6  347E               	retlw	126
   252  17B7  347E               	retlw	126
   253  17B8  347E               	retlw	126
   254  17B9  347E               	retlw	126
   255  17BA  347E               	retlw	126
   256                           
   257                           	psect	stringtext
   258  0800                     __pstringtext:	
   259  0800                     stringtab:	
   260  0800                     __stringtab:	
   261                           
   262                           ;	String table - string pointers are 2 bytes each
   263  0800  1BFF               	btfsc	btemp+1,7
   264  0801  280A               	ljmp	stringcode
   265  0802  1383               	bcf	3,7
   266  0803  187F               	btfsc	btemp+1,0
   267  0804  1783               	bsf	3,7
   268  0805  0800               	movf	0,w
   269  0806  0A84               	incf	4,f
   270  0807  1903               	skipnz
   271  0808  0AFF               	incf	btemp+1,f
   272  0809  0008               	return
   273  080A                     stringcode:	
   274  080A  087F               	movf	btemp+1,w
   275  080B  397F               	andlw	127
   276  080C  008A               	movwf	10
   277  080D  0804               	movf	4,w
   278  080E  0A84               	incf	4,f
   279  080F  1903               	skipnz
   280  0810  0AFF               	incf	btemp+1,f
   281  0811  0082               	movwf	2
   282  0812                     __stringbase:	
   283  0812                     __end_of__stringtab:	
   284  0812                     _g_char_info:	
   285  0812  3400               	retlw	0
   286  0813  3402               	retlw	2
   287  0814  3402               	retlw	2
   288  0815  3402               	retlw	2
   289  0816  3404               	retlw	4
   290  0817  3402               	retlw	2
   291  0818  3406               	retlw	6
   292  0819  3404               	retlw	4
   293  081A  340A               	retlw	10
   294  081B  3404               	retlw	4
   295  081C  340E               	retlw	14
   296  081D  3401               	retlw	1
   297  081E  340F               	retlw	15
   298  081F  3404               	retlw	4
   299  0820  3413               	retlw	19
   300  0821  3401               	retlw	1
   301  0822  3414               	retlw	20
   302  0823  3404               	retlw	4
   303  0824                     __end_of_g_char_info:	
   304  0824                     _octpowers:	
   305  0824  3401               	retlw	1
   306  0825  3400               	retlw	0
   307  0826  3408               	retlw	8
   308  0827  3400               	retlw	0
   309  0828  3440               	retlw	64
   310  0829  3400               	retlw	0
   311  082A  3400               	retlw	0
   312  082B  3402               	retlw	2
   313  082C  3400               	retlw	0
   314  082D  3410               	retlw	16
   315  082E  3400               	retlw	0
   316  082F  3480               	retlw	128
   317  0830                     __end_of_octpowers:	
   318  0830                     _dpowers:	
   319  0830  3401               	retlw	1
   320  0831  3400               	retlw	0
   321  0832  340A               	retlw	10
   322  0833  3400               	retlw	0
   323  0834  3464               	retlw	100
   324  0835  3400               	retlw	0
   325  0836  34E8               	retlw	232
   326  0837  3403               	retlw	3
   327  0838  3410               	retlw	16
   328  0839  3427               	retlw	39
   329  083A                     __end_of_dpowers:	
   330  083A                     _hexpowers:	
   331  083A  3401               	retlw	1
   332  083B  3400               	retlw	0
   333  083C  3410               	retlw	16
   334  083D  3400               	retlw	0
   335  083E  3400               	retlw	0
   336  083F  3401               	retlw	1
   337  0840  3400               	retlw	0
   338  0841  3410               	retlw	16
   339  0842                     __end_of_hexpowers:	
   340  0842                     _g_matrix4x4:	
   341  0842  3402               	retlw	2
   342  0843  3402               	retlw	2
   343  0844  3402               	retlw	2
   344  0845  3402               	retlw	2
   345  0846  3400               	retlw	0
   346  0847  340F               	retlw	15
   347  0848  3400               	retlw	0
   348  0849  3400               	retlw	0
   349  084A  3406               	retlw	6
   350  084B  3403               	retlw	3
   351  084C  3400               	retlw	0
   352  084D  3400               	retlw	0
   353  084E  3402               	retlw	2
   354  084F  3406               	retlw	6
   355  0850  3404               	retlw	4
   356  0851  3400               	retlw	0
   357  0852  3403               	retlw	3
   358  0853  3406               	retlw	6
   359  0854  3400               	retlw	0
   360  0855  3400               	retlw	0
   361  0856  3402               	retlw	2
   362  0857  3403               	retlw	3
   363  0858  3401               	retlw	1
   364  0859  3400               	retlw	0
   365  085A  3400               	retlw	0
   366  085B  3407               	retlw	7
   367  085C  3404               	retlw	4
   368  085D  3400               	retlw	0
   369  085E  3406               	retlw	6
   370  085F  3402               	retlw	2
   371  0860  3402               	retlw	2
   372  0861  3400               	retlw	0
   373  0862  3401               	retlw	1
   374  0863  3407               	retlw	7
   375  0864  3400               	retlw	0
   376  0865  3400               	retlw	0
   377  0866  3402               	retlw	2
   378  0867  3402               	retlw	2
   379  0868  3403               	retlw	3
   380  0869  3400               	retlw	0
   381  086A  3400               	retlw	0
   382  086B  3407               	retlw	7
   383  086C  3401               	retlw	1
   384  086D  3400               	retlw	0
   385  086E  3403               	retlw	3
   386  086F  3402               	retlw	2
   387  0870  3402               	retlw	2
   388  0871  3400               	retlw	0
   389  0872  3404               	retlw	4
   390  0873  3407               	retlw	7
   391  0874  3400               	retlw	0
   392  0875  3400               	retlw	0
   393  0876  3402               	retlw	2
   394  0877  3402               	retlw	2
   395  0878  3406               	retlw	6
   396  0879  3400               	retlw	0
   397  087A  3403               	retlw	3
   398  087B  3403               	retlw	3
   399  087C  3400               	retlw	0
   400  087D  3400               	retlw	0
   401  087E  3400               	retlw	0
   402  087F  3406               	retlw	6
   403  0880  3402               	retlw	2
   404  0881  3400               	retlw	0
   405  0882  3400               	retlw	0
   406  0883  3403               	retlw	3
   407  0884  3402               	retlw	2
   408  0885  3400               	retlw	0
   409  0886  3402               	retlw	2
   410  0887  3403               	retlw	3
   411  0888  3400               	retlw	0
   412  0889  3400               	retlw	0
   413  088A  3402               	retlw	2
   414  088B  3406               	retlw	6
   415  088C  3400               	retlw	0
   416  088D  3400               	retlw	0
   417  088E  3402               	retlw	2
   418  088F  3407               	retlw	7
   419  0890  3402               	retlw	2
   420  0891  3400               	retlw	0
   421  0892  3407               	retlw	7
   422  0893  3402               	retlw	2
   423  0894  3402               	retlw	2
   424  0895  3400               	retlw	0
   425  0896  3404               	retlw	4
   426  0897  3407               	retlw	7
   427  0898  3404               	retlw	4
   428  0899  3400               	retlw	0
   429  089A  3402               	retlw	2
   430  089B  3402               	retlw	2
   431  089C  3407               	retlw	7
   432  089D  3400               	retlw	0
   433  089E  3401               	retlw	1
   434  089F  3407               	retlw	7
   435  08A0  3401               	retlw	1
   436  08A1  3400               	retlw	0
   437  08A2                     __end_of_g_matrix4x4:	
   438  08A2                     STR_16:	
   439  08A2  343C               	retlw	60	;'<'
   440  08A3  343C               	retlw	60	;'<'
   441  08A4  343C               	retlw	60	;'<'
   442  08A5  343C               	retlw	60	;'<'
   443  08A6  343C               	retlw	60	;'<'
   444  08A7  343C               	retlw	60	;'<'
   445  08A8  343C               	retlw	60	;'<'
   446  08A9  343C               	retlw	60	;'<'
   447  08AA  343C               	retlw	60	;'<'
   448  08AB  343C               	retlw	60	;'<'
   449  08AC  343C               	retlw	60	;'<'
   450  08AD  343C               	retlw	60	;'<'
   451  08AE  343C               	retlw	60	;'<'
   452  08AF  343C               	retlw	60	;'<'
   453  08B0  343C               	retlw	60	;'<'
   454  08B1  343C               	retlw	60	;'<'
   455  08B2  343C               	retlw	60	;'<'
   456  08B3  343C               	retlw	60	;'<'
   457  08B4  343C               	retlw	60	;'<'
   458  08B5  343C               	retlw	60	;'<'
   459  08B6  344D               	retlw	77	;'M'
   460  08B7  3441               	retlw	65	;'A'
   461  08B8  3454               	retlw	84	;'T'
   462  08B9  3452               	retlw	82	;'R'
   463  08BA  3449               	retlw	73	;'I'
   464  08BB  3458               	retlw	88	;'X'
   465  08BC  3431               	retlw	49	;'1'
   466  08BD  3436               	retlw	54	;'6'
   467  08BE  3478               	retlw	120	;'x'
   468  08BF  3438               	retlw	56	;'8'
   469  08C0  3400               	retlw	0
   470  08C1                     STR_6:	
   471  08C1  343C               	retlw	60	;'<'
   472  08C2  343C               	retlw	60	;'<'
   473  08C3  343C               	retlw	60	;'<'
   474  08C4  343C               	retlw	60	;'<'
   475  08C5  343C               	retlw	60	;'<'
   476  08C6  343C               	retlw	60	;'<'
   477  08C7  343C               	retlw	60	;'<'
   478  08C8  343C               	retlw	60	;'<'
   479  08C9  343C               	retlw	60	;'<'
   480  08CA  343C               	retlw	60	;'<'
   481  08CB  343C               	retlw	60	;'<'
   482  08CC  343C               	retlw	60	;'<'
   483  08CD  343C               	retlw	60	;'<'
   484  08CE  343C               	retlw	60	;'<'
   485  08CF  343C               	retlw	60	;'<'
   486  08D0  343C               	retlw	60	;'<'
   487  08D1  343C               	retlw	60	;'<'
   488  08D2  343C               	retlw	60	;'<'
   489  08D3  343C               	retlw	60	;'<'
   490  08D4  343C               	retlw	60	;'<'
   491  08D5  344D               	retlw	77	;'M'
   492  08D6  3441               	retlw	65	;'A'
   493  08D7  3454               	retlw	84	;'T'
   494  08D8  3452               	retlw	82	;'R'
   495  08D9  3449               	retlw	73	;'I'
   496  08DA  3458               	retlw	88	;'X'
   497  08DB  3434               	retlw	52	;'4'
   498  08DC  3478               	retlw	120	;'x'
   499  08DD  3434               	retlw	52	;'4'
   500  08DE  3400               	retlw	0
   501  08DF                     STR_14:	
   502  08DF  3469               	retlw	105	;'i'
   503  08E0  346E               	retlw	110	;'n'
   504  08E1  3464               	retlw	100	;'d'
   505  08E2  3465               	retlw	101	;'e'
   506  08E3  3478               	retlw	120	;'x'
   507  08E4  3420               	retlw	32	;' '
   508  08E5  343D               	retlw	61	;'='
   509  08E6  3420               	retlw	32	;' '
   510  08E7  3425               	retlw	37	;'%'
   511  08E8  3464               	retlw	100	;'d'
   512  08E9  342C               	retlw	44	;','
   513  08EA  3420               	retlw	32	;' '
   514  08EB  3473               	retlw	115	;'s'
   515  08EC  3475               	retlw	117	;'u'
   516  08ED  3462               	retlw	98	;'b'
   517  08EE  345F               	retlw	95	;'_'
   518  08EF  3469               	retlw	105	;'i'
   519  08F0  346E               	retlw	110	;'n'
   520  08F1  3464               	retlw	100	;'d'
   521  08F2  3465               	retlw	101	;'e'
   522  08F3  3478               	retlw	120	;'x'
   523  08F4  3420               	retlw	32	;' '
   524  08F5  343D               	retlw	61	;'='
   525  08F6  3420               	retlw	32	;' '
   526  08F7  3425               	retlw	37	;'%'
   527  08F8  3464               	retlw	100	;'d'
   528  08F9  3400               	retlw	0
   529  08FA                     STR_12:	
   530  08FA  3470               	retlw	112	;'p'
   531  08FB  3472               	retlw	114	;'r'
   532  08FC  3469               	retlw	105	;'i'
   533  08FD  346E               	retlw	110	;'n'
   534  08FE  3474               	retlw	116	;'t'
   535  08FF  3466               	retlw	102	;'f'
   536  0900  345F               	retlw	95	;'_'
   537  0901  3461               	retlw	97	;'a'
   538  0902  346C               	retlw	108	;'l'
   539  0903  346C               	retlw	108	;'l'
   540  0904  345F               	retlw	95	;'_'
   541  0905  344D               	retlw	77	;'M'
   542  0906  3441               	retlw	65	;'A'
   543  0907  3454               	retlw	84	;'T'
   544  0908  3452               	retlw	82	;'R'
   545  0909  3449               	retlw	73	;'I'
   546  090A  3458               	retlw	88	;'X'
   547  090B  3434               	retlw	52	;'4'
   548  090C  3478               	retlw	120	;'x'
   549  090D  3434               	retlw	52	;'4'
   550  090E  3400               	retlw	0
   551  090F                     STR_22:	
   552  090F  343C               	retlw	60	;'<'
   553  0910  343C               	retlw	60	;'<'
   554  0911  343C               	retlw	60	;'<'
   555  0912  343C               	retlw	60	;'<'
   556  0913  343C               	retlw	60	;'<'
   557  0914  343C               	retlw	60	;'<'
   558  0915  343C               	retlw	60	;'<'
   559  0916  343C               	retlw	60	;'<'
   560  0917  343C               	retlw	60	;'<'
   561  0918  343C               	retlw	60	;'<'
   562  0919  343C               	retlw	60	;'<'
   563  091A  343C               	retlw	60	;'<'
   564  091B  343C               	retlw	60	;'<'
   565  091C  343C               	retlw	60	;'<'
   566  091D  343C               	retlw	60	;'<'
   567  091E  343C               	retlw	60	;'<'
   568  091F  343C               	retlw	60	;'<'
   569  0920  343C               	retlw	60	;'<'
   570  0921  343C               	retlw	60	;'<'
   571  0922  343C               	retlw	60	;'<'
   572  0923  3400               	retlw	0
   573  0924                     STR_10:	
   574  0924  343E               	retlw	62	;'>'
   575  0925  343E               	retlw	62	;'>'
   576  0926  343E               	retlw	62	;'>'
   577  0927  343E               	retlw	62	;'>'
   578  0928  343E               	retlw	62	;'>'
   579  0929  343E               	retlw	62	;'>'
   580  092A  343E               	retlw	62	;'>'
   581  092B  343E               	retlw	62	;'>'
   582  092C  343E               	retlw	62	;'>'
   583  092D  343E               	retlw	62	;'>'
   584  092E  343E               	retlw	62	;'>'
   585  092F  343E               	retlw	62	;'>'
   586  0930  343E               	retlw	62	;'>'
   587  0931  343E               	retlw	62	;'>'
   588  0932  343E               	retlw	62	;'>'
   589  0933  343E               	retlw	62	;'>'
   590  0934  343E               	retlw	62	;'>'
   591  0935  343E               	retlw	62	;'>'
   592  0936  343E               	retlw	62	;'>'
   593  0937  343E               	retlw	62	;'>'
   594  0938  3400               	retlw	0
   595  0939                     STR_32:	
   596  0939  3430               	retlw	48	;'0'
   597  093A  3431               	retlw	49	;'1'
   598  093B  3432               	retlw	50	;'2'
   599  093C  3433               	retlw	51	;'3'
   600  093D  3434               	retlw	52	;'4'
   601  093E  3435               	retlw	53	;'5'
   602  093F  3436               	retlw	54	;'6'
   603  0940  3437               	retlw	55	;'7'
   604  0941  3438               	retlw	56	;'8'
   605  0942  3439               	retlw	57	;'9'
   606  0943  3441               	retlw	65	;'A'
   607  0944  3442               	retlw	66	;'B'
   608  0945  3443               	retlw	67	;'C'
   609  0946  3444               	retlw	68	;'D'
   610  0947  3445               	retlw	69	;'E'
   611  0948  3446               	retlw	70	;'F'
   612  0949  3400               	retlw	0
   613  094A                     STR_33:	
   614  094A  3430               	retlw	48	;'0'
   615  094B  3431               	retlw	49	;'1'
   616  094C  3432               	retlw	50	;'2'
   617  094D  3433               	retlw	51	;'3'
   618  094E  3434               	retlw	52	;'4'
   619  094F  3435               	retlw	53	;'5'
   620  0950  3436               	retlw	54	;'6'
   621  0951  3437               	retlw	55	;'7'
   622  0952  3438               	retlw	56	;'8'
   623  0953  3439               	retlw	57	;'9'
   624  0954  3461               	retlw	97	;'a'
   625  0955  3462               	retlw	98	;'b'
   626  0956  3463               	retlw	99	;'c'
   627  0957  3464               	retlw	100	;'d'
   628  0958  3465               	retlw	101	;'e'
   629  0959  3466               	retlw	102	;'f'
   630  095A  3400               	retlw	0
   631  095B                     STR_31:	
   632  095B  344D               	retlw	77	;'M'
   633  095C  3461               	retlw	97	;'a'
   634  095D  3469               	retlw	105	;'i'
   635  095E  346E               	retlw	110	;'n'
   636  095F  3420               	retlw	32	;' '
   637  0960  3473               	retlw	115	;'s'
   638  0961  3463               	retlw	99	;'c'
   639  0962  3472               	retlw	114	;'r'
   640  0963  3465               	retlw	101	;'e'
   641  0964  3465               	retlw	101	;'e'
   642  0965  346E               	retlw	110	;'n'
   643  0966  3400               	retlw	0
   644  0967                     STR_13:	
   645  0967  3473               	retlw	115	;'s'
   646  0968  3469               	retlw	105	;'i'
   647  0969  347A               	retlw	122	;'z'
   648  096A  3465               	retlw	101	;'e'
   649  096B  3420               	retlw	32	;' '
   650  096C  343D               	retlw	61	;'='
   651  096D  3420               	retlw	32	;' '
   652  096E  3425               	retlw	37	;'%'
   653  096F  3464               	retlw	100	;'d'
   654  0970  3400               	retlw	0
   655  0971                     STR_1:	
   656  0971  340D               	retlw	13
   657  0972  340A               	retlw	10
   658  0973  3400               	retlw	0
   659  0974                     STR_7:	
   660  0974  342A               	retlw	42	;'*'
   661  0975  3400               	retlw	0
   662  0976                     STR_5:	
   663  0976  343A               	retlw	58	;':'
   664  0977  3400               	retlw	0
   665  0978                     STR_8:	
   666  0978  345F               	retlw	95	;'_'
   667  0979  3400               	retlw	0
   668  0973                     
   669                           ; #config settings
   670  0000                     
   671                           	psect	nvBANK0
   672  006D                     __pnvBANK0:	
   673  006D                     _UQEnd:	
   674  006D                     	ds	1
   675  006E                     _UQFront:	
   676  006E                     	ds	1
   677  000C                     _PIR1bits	set	12
   678  001A                     _RCREG	set	26
   679  0018                     _RCSTAbits	set	24
   680  0019                     _TXREG	set	25
   681  0018                     _CARRY	set	24
   682  005F                     _GIE	set	95
   683  005E                     _PEIE	set	94
   684  0029                     _RA1	set	41
   685  002A                     _RA2	set	42
   686  002B                     _RA3	set	43
   687  0099                     _SPBRG	set	153
   688  0085                     _TRISAbits	set	133
   689  0098                     _TXSTAbits	set	152
   690  0465                     _RCIE	set	1125
   691  010D                     _EEADR	set	269
   692  010C                     _EEDATA	set	268
   693  0188                     _ANSELbits	set	392
   694  018C                     _EECON1	set	396
   695  018D                     _EECON2	set	397
   696  0C60                     _RD	set	3168
   697  0C61                     _WR	set	3169
   698  0C62                     _WREN	set	3170
   699                           
   700                           	psect	cinit
   701  07C9                     start_initialization:	
   702  07C9                     __initialization:	
   703                           
   704                           ; Clear objects allocated to BANK0
   705  07C9  1383               	bcf	3,7	;select IRP bank0
   706  07CA  3059               	movlw	low __pbssBANK0
   707  07CB  0084               	movwf	4
   708  07CC  3068               	movlw	low (__pbssBANK0+15)
   709  07CD  160A  118A  276E  120A  118A  	fcall	clear_ram0
   710                           
   711                           ; Clear objects allocated to BANK1
   712  07D2  30A0               	movlw	low __pbssBANK1
   713  07D3  0084               	movwf	4
   714  07D4  30D0               	movlw	low (__pbssBANK1+48)
   715  07D5  160A  118A  276E  120A  118A  	fcall	clear_ram0
   716                           
   717                           ; Clear objects allocated to BANK3
   718  07DA  1783               	bsf	3,7	;select IRP bank2
   719  07DB  3090               	movlw	low __pbssBANK3
   720  07DC  0084               	movwf	4
   721  07DD  30D0               	movlw	low (__pbssBANK3+64)
   722  07DE  160A  118A  276E  120A  118A  	fcall	clear_ram0
   723                           
   724                           ; Initialize objects allocated to BANK1
   725  07E3  1383               	bcf	3,7	;select IRP bank0
   726  07E4  30E0               	movlw	low (__pdataBANK1+16)
   727  07E5  00FD               	movwf	btemp+-1
   728  07E6  3017               	movlw	high __pidataBANK1
   729  07E7  00FE               	movwf	btemp
   730  07E8  30AB               	movlw	low __pidataBANK1
   731  07E9  00FF               	movwf	btemp+1
   732  07EA  30D0               	movlw	low __pdataBANK1
   733  07EB  0084               	movwf	4
   734  07EC  160A  118A  27E1  120A  118A  	fcall	init_ram0
   735                           
   736                           ; Initialize objects allocated to BANK0
   737  07F1  306D               	movlw	low (__pdataBANK0+5)
   738  07F2  00FD               	movwf	btemp+-1
   739  07F3  3009               	movlw	high __pidataBANK0
   740  07F4  00FE               	movwf	btemp
   741  07F5  307B               	movlw	low __pidataBANK0
   742  07F6  00FF               	movwf	btemp+1
   743  07F7  3068               	movlw	low __pdataBANK0
   744  07F8  0084               	movwf	4
   745  07F9  160A  118A  27E1   	fcall	init_ram0
   746  07FC                     end_of_initialization:	
   747                           ;End of C runtime variable initialization code
   748                           
   749  07FC                     __end_of__initialization:	
   750  07FC  0183               	clrf	3
   751  07FD  120A  118A  2C95   	ljmp	_main	;jump to C main() function
   752                           
   753                           	psect	bssBANK0
   754  0059                     __pbssBANK0:	
   755  0059                     USARTWriteInt@F1617:	
   756  0059                     	ds	5
   757  005E                     _Seed:	
   758  005E                     	ds	2
   759  0060                     _g_cur_matrix4x4:	
   760  0060                     	ds	2
   761  0062                     _temp_cur_matrix4x4:	
   762  0062                     	ds	2
   763  0064                     _cur_y:	
   764  0064                     	ds	1
   765  0065                     _g_char_info_index:	
   766  0065                     	ds	1
   767  0066                     _g_char_info_sub_index:	
   768  0066                     	ds	1
   769  0067                     _timer1_count:	
   770  0067                     	ds	1
   771                           
   772                           	psect	dataBANK0
   773  0068                     __pdataBANK0:	
   774  0068                     _randx:	
   775  0068                     	ds	4
   776  006C                     _cur_x:	
   777  006C                     	ds	1
   778                           
   779                           	psect	bssBANK1
   780  00A0                     __pbssBANK1:	
   781  00A0                     _URBuff:	
   782  00A0                     	ds	32
   783  00C0                     _temp_matrix16x8:	
   784  00C0                     	ds	16
   785                           
   786                           	psect	dataBANK1
   787  00D0                     __pdataBANK1:	
   788  00D0                     _g_matrix16x8:	
   789  00D0                     	ds	16
   790                           
   791                           	psect	bssBANK3
   792  0190                     __pbssBANK3:	
   793  0190                     _g_debug:	
   794  0190                     	ds	64
   795                           
   796                           	psect	clrtext
   797  176E                     clear_ram0:	
   798                           ;	Called with FSR containing the base address, and
   799                           ;	W with the last address+1
   800                           
   801  176E  0064               	clrwdt	;clear the watchdog before getting into this loop
   802  176F                     clrloop0:	
   803  176F  0180               	clrf	0	;clear RAM location pointed to by FSR
   804  1770  0A84               	incf	4,f	;increment pointer
   805  1771  0604               	xorwf	4,w	;XOR with final address
   806  1772  1903               	btfsc	3,2	;have we reached the end yet?
   807  1773  3400               	retlw	0	;all done for this memory range, return
   808  1774  0604               	xorwf	4,w	;XOR again to restore value
   809  1775  2F6F               	goto	clrloop0	;do the next byte
   810                           
   811                           	psect	inittext
   812  17DD                     init_fetch0:	
   813                           ;	Called with low address in FSR and high address in W
   814                           
   815  17DD  087E               	movf	126,w
   816  17DE  008A               	movwf	10
   817  17DF  087F               	movf	127,w
   818  17E0  0082               	movwf	2
   819  17E1                     init_ram0:	
   820                           ;Called with:
   821                           ;	high address of idata address in btemp 
   822                           ;	low address of idata address in btemp+1 
   823                           ;	low address of data in FSR
   824                           ;	high address + 1 of data in btemp-1
   825                           
   826  17E1  27DD  160A  118A   	fcall	init_fetch0
   827  17E4  0080               	movwf	0
   828  17E5  0A84               	incf	4,f
   829  17E6  0804               	movf	4,w
   830  17E7  067D               	xorwf	125,w
   831  17E8  1903               	btfsc	3,2
   832  17E9  3400               	retlw	0
   833  17EA  0AFF               	incf	127,f
   834  17EB  1903               	btfsc	3,2
   835  17EC  0AFE               	incf	126,f
   836  17ED  2FE1               	goto	init_ram0
   837                           
   838                           	psect	cstackCOMMON
   839  0070                     __pcstackCOMMON:	
   840  0070                     ?_memset:	
   841  0070                     ?_memcpy:	
   842                           ; 1 bytes @ 0x0
   843                           
   844  0070                     ?_eeprom_write:	
   845                           ; 1 bytes @ 0x0
   846                           
   847  0070                     ?_eeprom_read:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0070                     ??_eeprom_read:	
   851                           ; 1 bytes @ 0x0
   852                           
   853  0070                     ?_srand:	
   854                           ; 1 bytes @ 0x0
   855                           
   856  0070                     ?_USARTInit:	
   857                           ; 1 bytes @ 0x0
   858                           
   859  0070                     ?_USARTWriteChar:	
   860                           ; 1 bytes @ 0x0
   861                           
   862  0070                     ??_USARTWriteChar:	
   863                           ; 1 bytes @ 0x0
   864                           
   865  0070                     ?_setbit:	
   866                           ; 1 bytes @ 0x0
   867                           
   868  0070                     ?_getbit:	
   869                           ; 1 bytes @ 0x0
   870                           
   871  0070                     ?_SPI1_write:	
   872                           ; 1 bytes @ 0x0
   873                           
   874  0070                     ??_SPI1_write:	
   875                           ; 1 bytes @ 0x0
   876                           
   877  0070                     ?_max7219_init1:	
   878                           ; 1 bytes @ 0x0
   879                           
   880  0070                     ?_printf_MATRIX7219:	
   881                           ; 1 bytes @ 0x0
   882                           
   883  0070                     ?_printf_MATRIX16x8:	
   884                           ; 1 bytes @ 0x0
   885                           
   886  0070                     ?_printf_Screen:	
   887                           ; 1 bytes @ 0x0
   888                           
   889  0070                     ?_Clear_Matrix:	
   890                           ; 1 bytes @ 0x0
   891                           
   892  0070                     ?_is_row_full:	
   893                           ; 1 bytes @ 0x0
   894                           
   895  0070                     ?_delete_row:	
   896                           ; 1 bytes @ 0x0
   897                           
   898  0070                     ?_delete_matrix:	
   899                           ; 1 bytes @ 0x0
   900                           
   901  0070                     ?_get_num_removed_rows:	
   902                           ; 1 bytes @ 0x0
   903                           
   904  0070                     ?_is_row_empty:	
   905                           ; 1 bytes @ 0x0
   906                           
   907  0070                     ?_char_info_index_rand:	
   908                           ; 1 bytes @ 0x0
   909                           
   910  0070                     ?_get_high:	
   911                           ; 1 bytes @ 0x0
   912                           
   913  0070                     ?_get_holes_after_merge:	
   914                           ; 1 bytes @ 0x0
   915                           
   916  0070                     ?_find_best_solution:	
   917                           ; 1 bytes @ 0x0
   918                           
   919  0070                     ?___lmul:	
   920                           ; 1 bytes @ 0x0
   921                           
   922  0070                     USARTWriteChar@ch:	
   923                           ; 4 bytes @ 0x0
   924                           
   925  0070                     setbit@at:	
   926                           ; 1 bytes @ 0x0
   927                           
   928  0070                     is_row_full@row:	
   929                           ; 1 bytes @ 0x0
   930                           
   931  0070                     delete_row@row:	
   932                           ; 1 bytes @ 0x0
   933                           
   934  0070                     is_row_empty@row:	
   935                           ; 1 bytes @ 0x0
   936                           
   937  0070                     eeprom_write@value:	
   938                           ; 1 bytes @ 0x0
   939                           
   940  0070                     memcpy@s1:	
   941                           ; 1 bytes @ 0x0
   942                           
   943  0070                     USARTInit@baud_rate:	
   944                           ; 1 bytes @ 0x0
   945                           
   946  0070                     getbit@byte:	
   947                           ; 2 bytes @ 0x0
   948                           
   949  0070                     memset@c:	
   950                           ; 2 bytes @ 0x0
   951                           
   952  0070                     srand@x:	
   953                           ; 2 bytes @ 0x0
   954                           
   955  0070                     ___lmul@multiplier:	
   956                           ; 2 bytes @ 0x0
   957                           
   958                           
   959                           ; 4 bytes @ 0x0
   960  0070                     	ds	1
   961  0071                     ??_eeprom_write:	
   962  0071                     ?_USARTWriteString:	
   963                           ; 1 bytes @ 0x1
   964                           
   965  0071                     ??_is_row_full:	
   966                           ; 1 bytes @ 0x1
   967                           
   968  0071                     ??_delete_row:	
   969                           ; 1 bytes @ 0x1
   970                           
   971  0071                     ??_is_row_empty:	
   972                           ; 1 bytes @ 0x1
   973                           
   974  0071                     setbit@value:	
   975                           ; 1 bytes @ 0x1
   976                           
   977  0071                     SPI1_write@data:	
   978                           ; 1 bytes @ 0x1
   979                           
   980  0071                     is_row_empty@matrix:	
   981                           ; 1 bytes @ 0x1
   982                           
   983  0071                     eeprom_read@addr:	
   984                           ; 1 bytes @ 0x1
   985                           
   986  0071                     USARTWriteString@str:	
   987                           ; 1 bytes @ 0x1
   988                           
   989  0071                     memcpy@n:	
   990                           ; 2 bytes @ 0x1
   991                           
   992                           
   993                           ; 2 bytes @ 0x1
   994  0071                     	ds	1
   995  0072                     ??_srand:	
   996  0072                     ??_USARTInit:	
   997                           ; 1 bytes @ 0x2
   998                           
   999  0072                     ??_setbit:	
  1000                           ; 1 bytes @ 0x2
  1001                           
  1002  0072                     ??_get_high:	
  1003                           ; 1 bytes @ 0x2
  1004                           
  1005  0072                     ?_eeprom_read_int:	
  1006                           ; 1 bytes @ 0x2
  1007                           
  1008  0072                     getbit@at:	
  1009                           ; 2 bytes @ 0x2
  1010                           
  1011  0072                     SPI1_write@mask:	
  1012                           ; 1 bytes @ 0x2
  1013                           
  1014  0072                     is_row_full@matrix:	
  1015                           ; 1 bytes @ 0x2
  1016                           
  1017  0072                     eeprom_write@addr:	
  1018                           ; 1 bytes @ 0x2
  1019                           
  1020  0072                     memset@n:	
  1021                           ; 1 bytes @ 0x2
  1022                           
  1023                           
  1024                           ; 2 bytes @ 0x2
  1025  0072                     	ds	1
  1026  0073                     ??_memcpy:	
  1027  0073                     ??_USARTWriteString:	
  1028                           ; 1 bytes @ 0x3
  1029                           
  1030  0073                     ?_debug_str:	
  1031                           ; 1 bytes @ 0x3
  1032                           
  1033  0073                     ?_debug_line:	
  1034                           ; 1 bytes @ 0x3
  1035                           
  1036  0073                     ??_getbit:	
  1037                           ; 1 bytes @ 0x3
  1038                           
  1039  0073                     ??_get_num_removed_rows:	
  1040                           ; 1 bytes @ 0x3
  1041                           
  1042  0073                     ?_eeprom_write_int:	
  1043                           ; 1 bytes @ 0x3
  1044                           
  1045  0073                     setbit@byte:	
  1046                           ; 1 bytes @ 0x3
  1047                           
  1048  0073                     SPI1_write@i:	
  1049                           ; 1 bytes @ 0x3
  1050                           
  1051  0073                     get_high@matrix:	
  1052                           ; 1 bytes @ 0x3
  1053                           
  1054  0073                     debug_str@str:	
  1055                           ; 1 bytes @ 0x3
  1056                           
  1057  0073                     debug_line@str:	
  1058                           ; 2 bytes @ 0x3
  1059                           
  1060  0073                     eeprom_write_int@value:	
  1061                           ; 2 bytes @ 0x3
  1062                           
  1063                           
  1064                           ; 2 bytes @ 0x3
  1065  0073                     	ds	1
  1066  0074                     ??_memset:	
  1067  0074                     ?_Write_Word:	
  1068                           ; 1 bytes @ 0x4
  1069                           
  1070  0074                     ??_eeprom_read_int:	
  1071                           ; 1 bytes @ 0x4
  1072                           
  1073  0074                     setbit@temp:	
  1074                           ; 1 bytes @ 0x4
  1075                           
  1076  0074                     Write_Word@myValue1:	
  1077                           ; 1 bytes @ 0x4
  1078                           
  1079  0074                     delete_row@matrix:	
  1080                           ; 1 bytes @ 0x4
  1081                           
  1082  0074                     get_num_removed_rows@count:	
  1083                           ; 1 bytes @ 0x4
  1084                           
  1085  0074                     get_high@row:	
  1086                           ; 1 bytes @ 0x4
  1087                           
  1088  0074                     memcpy@d1:	
  1089                           ; 1 bytes @ 0x4
  1090                           
  1091  0074                     ___lmul@multiplicand:	
  1092                           ; 1 bytes @ 0x4
  1093                           
  1094                           
  1095                           ; 4 bytes @ 0x4
  1096  0074                     	ds	1
  1097  0075                     ??_debug_str:	
  1098  0075                     ??_debug_line:	
  1099                           ; 1 bytes @ 0x5
  1100                           
  1101  0075                     ?_set_matrix_bit:	
  1102                           ; 1 bytes @ 0x5
  1103                           
  1104  0075                     ??_eeprom_write_int:	
  1105                           ; 1 bytes @ 0x5
  1106                           
  1107  0075                     set_matrix_bit@row:	
  1108                           ; 1 bytes @ 0x5
  1109                           
  1110  0075                     Write_Word@myColumn2:	
  1111                           ; 1 bytes @ 0x5
  1112                           
  1113  0075                     delete_row@i:	
  1114                           ; 1 bytes @ 0x5
  1115                           
  1116  0075                     get_num_removed_rows@matrix:	
  1117                           ; 1 bytes @ 0x5
  1118                           
  1119  0075                     memcpy@d:	
  1120                           ; 1 bytes @ 0x5
  1121                           
  1122  0075                     memset@p1:	
  1123                           ; 1 bytes @ 0x5
  1124                           
  1125  0075                     getbit@temp:	
  1126                           ; 1 bytes @ 0x5
  1127                           
  1128                           
  1129                           ; 2 bytes @ 0x5
  1130  0075                     	ds	1
  1131  0076                     ??_delete_matrix:	
  1132  0076                     set_matrix_bit@col:	
  1133                           ; 1 bytes @ 0x6
  1134                           
  1135  0076                     Write_Word@myValue2:	
  1136                           ; 1 bytes @ 0x6
  1137                           
  1138  0076                     get_num_removed_rows@row:	
  1139                           ; 1 bytes @ 0x6
  1140                           
  1141  0076                     eeprom_write_int@at:	
  1142                           ; 1 bytes @ 0x6
  1143                           
  1144  0076                     memcpy@s:	
  1145                           ; 1 bytes @ 0x6
  1146                           
  1147  0076                     memset@p:	
  1148                           ; 1 bytes @ 0x6
  1149                           
  1150  0076                     eeprom_read_int@value:	
  1151                           ; 1 bytes @ 0x6
  1152                           
  1153                           
  1154                           ; 2 bytes @ 0x6
  1155  0076                     	ds	1
  1156  0077                     ?_get_matrix_bit:	
  1157  0077                     ??_Write_Word:	
  1158                           ; 1 bytes @ 0x7
  1159                           
  1160  0077                     set_matrix_bit@value:	
  1161                           ; 1 bytes @ 0x7
  1162                           
  1163  0077                     Write_Word@myColumn1:	
  1164                           ; 1 bytes @ 0x7
  1165                           
  1166  0077                     delete_matrix@count:	
  1167                           ; 1 bytes @ 0x7
  1168                           
  1169  0077                     eeprom_write_int@temp:	
  1170                           ; 1 bytes @ 0x7
  1171                           
  1172  0077                     get_matrix_bit@byte:	
  1173                           ; 1 bytes @ 0x7
  1174                           
  1175                           
  1176                           ; 2 bytes @ 0x7
  1177  0077                     	ds	1
  1178  0078                     ??_set_matrix_bit:	
  1179  0078                     ??_max7219_init1:	
  1180                           ; 1 bytes @ 0x8
  1181                           
  1182  0078                     ??_printf_MATRIX7219:	
  1183                           ; 1 bytes @ 0x8
  1184                           
  1185  0078                     ??___lmul:	
  1186                           ; 1 bytes @ 0x8
  1187                           
  1188  0078                     delete_matrix@matrix:	
  1189                           ; 1 bytes @ 0x8
  1190                           
  1191  0078                     eeprom_read_int@at:	
  1192                           ; 1 bytes @ 0x8
  1193                           
  1194                           
  1195                           ; 1 bytes @ 0x8
  1196  0078                     	ds	1
  1197  0079                     get_matrix_bit@row:	
  1198  0079                     delete_matrix@row:	
  1199                           ; 1 bytes @ 0x9
  1200                           
  1201  0079                     ___lmul@product:	
  1202                           ; 1 bytes @ 0x9
  1203                           
  1204                           
  1205                           ; 4 bytes @ 0x9
  1206  0079                     	ds	1
  1207  007A                     set_matrix_bit@byte:	
  1208  007A                     get_matrix_bit@col:	
  1209                           ; 1 bytes @ 0xA
  1210                           
  1211                           
  1212                           ; 1 bytes @ 0xA
  1213  007A                     	ds	1
  1214  007B                     ??_get_matrix_bit:	
  1215                           
  1216                           ; 1 bytes @ 0xB
  1217  007B                     	ds	1
  1218  007C                     ?_MATRIX16x8_to_MATRIX7219:	
  1219  007C                     ??_printf_debug_MATRIX16x8:	
  1220                           ; 1 bytes @ 0xC
  1221                           
  1222  007C                     ??_hit_land:	
  1223                           ; 1 bytes @ 0xC
  1224                           
  1225  007C                     ??_is_valid:	
  1226                           ; 1 bytes @ 0xC
  1227                           
  1228  007C                     ??_is_right_boundary:	
  1229                           ; 1 bytes @ 0xC
  1230                           
  1231  007C                     ??_fall_off:	
  1232                           ; 1 bytes @ 0xC
  1233                           
  1234  007C                     ??_clear:	
  1235                           ; 1 bytes @ 0xC
  1236                           
  1237  007C                     ??_merge:	
  1238                           ; 1 bytes @ 0xC
  1239                           
  1240  007C                     ??_merge1:	
  1241                           ; 1 bytes @ 0xC
  1242                           
  1243  007C                     ??_left_most:	
  1244                           ; 1 bytes @ 0xC
  1245                           
  1246  007C                     ?_get_high_after_merge:	
  1247                           ; 1 bytes @ 0xC
  1248                           
  1249  007C                     ??___wmul:	
  1250                           ; 1 bytes @ 0xC
  1251                           
  1252  007C                     ?_get_num_of_orphan:	
  1253                           ; 1 bytes @ 0xC
  1254                           
  1255  007C                     ?_get_heavy:	
  1256                           ; 2 bytes @ 0xC
  1257                           
  1258  007C                     MATRIX16x8_to_MATRIX7219@matrix7219:	
  1259                           ; 2 bytes @ 0xC
  1260                           
  1261  007C                     get_high_after_merge@matrix:	
  1262                           ; 1 bytes @ 0xC
  1263                           
  1264  007C                     ___wmul@product:	
  1265                           ; 2 bytes @ 0xC
  1266                           
  1267                           
  1268                           ; 2 bytes @ 0xC
  1269  007C                     	ds	1
  1270  007D                     ??_printf_MATRIX16x8:	
  1271  007D                     ??___awmod:	
  1272                           ; 1 bytes @ 0xD
  1273                           
  1274  007D                     left_most@x:	
  1275                           ; 1 bytes @ 0xD
  1276                           
  1277                           
  1278                           ; 1 bytes @ 0xD
  1279  007D                     	ds	1
  1280  007E                     ??_printf_Screen:	
  1281  007E                     ??_Clear_Matrix:	
  1282                           ; 1 bytes @ 0xE
  1283                           
  1284  007E                     ??_char_info_index_rand:	
  1285                           ; 1 bytes @ 0xE
  1286                           
  1287                           
  1288                           	psect	cstackBANK0
  1289  0020                     __pcstackBANK0:	
  1290                           ; 1 bytes @ 0xE
  1291                           
  1292  0020                     ??_MATRIX16x8_to_MATRIX7219:	
  1293  0020                     ?_printf_debug_MATRIX16x8:	
  1294                           ; 1 bytes @ 0x0
  1295                           
  1296  0020                     ?_hit_land:	
  1297                           ; 1 bytes @ 0x0
  1298                           
  1299  0020                     ?_is_valid:	
  1300                           ; 1 bytes @ 0x0
  1301                           
  1302  0020                     ?_is_left_boundary:	
  1303                           ; 1 bytes @ 0x0
  1304                           
  1305  0020                     ?_is_right_boundary:	
  1306                           ; 1 bytes @ 0x0
  1307                           
  1308  0020                     ?_fall_off:	
  1309                           ; 1 bytes @ 0x0
  1310                           
  1311  0020                     ?_clear:	
  1312                           ; 1 bytes @ 0x0
  1313                           
  1314  0020                     ?_merge:	
  1315                           ; 1 bytes @ 0x0
  1316                           
  1317  0020                     ?_merge1:	
  1318                           ; 1 bytes @ 0x0
  1319                           
  1320  0020                     ??_get_num_of_orphan:	
  1321                           ; 1 bytes @ 0x0
  1322                           
  1323  0020                     ??_get_heavy:	
  1324                           ; 1 bytes @ 0x0
  1325                           
  1326  0020                     ??_get_high_after_merge:	
  1327                           ; 1 bytes @ 0x0
  1328                           
  1329  0020                     ??_get_holes_after_merge:	
  1330                           ; 1 bytes @ 0x0
  1331                           
  1332  0020                     ?_rand:	
  1333                           ; 1 bytes @ 0x0
  1334                           
  1335  0020                     printf_MATRIX7219@matrix:	
  1336                           ; 2 bytes @ 0x0
  1337                           
  1338  0020                     hit_land@y:	
  1339                           ; 1 bytes @ 0x0
  1340                           
  1341  0020                     is_valid@y:	
  1342                           ; 1 bytes @ 0x0
  1343                           
  1344  0020                     fall_off@y:	
  1345                           ; 1 bytes @ 0x0
  1346                           
  1347  0020                     clear@y:	
  1348                           ; 1 bytes @ 0x0
  1349                           
  1350  0020                     merge@y:	
  1351                           ; 1 bytes @ 0x0
  1352                           
  1353  0020                     merge1@y:	
  1354                           ; 1 bytes @ 0x0
  1355                           
  1356  0020                     printf_debug_MATRIX16x8@lable:	
  1357                           ; 1 bytes @ 0x0
  1358                           
  1359  0020                     is_left_boundary@matrix4x4:	
  1360                           ; 2 bytes @ 0x0
  1361                           
  1362  0020                     is_right_boundary@matrix4x4:	
  1363                           ; 2 bytes @ 0x0
  1364                           
  1365                           
  1366                           ; 2 bytes @ 0x0
  1367  0020                     	ds	1
  1368  0021                     printf_MATRIX7219@col:	
  1369  0021                     hit_land@matrix4x4:	
  1370                           ; 1 bytes @ 0x1
  1371                           
  1372  0021                     is_valid@matrix4x4:	
  1373                           ; 2 bytes @ 0x1
  1374                           
  1375  0021                     fall_off@matrix4x4:	
  1376                           ; 2 bytes @ 0x1
  1377                           
  1378  0021                     clear@matrix4x4:	
  1379                           ; 2 bytes @ 0x1
  1380                           
  1381  0021                     merge@matrix4x4:	
  1382                           ; 2 bytes @ 0x1
  1383                           
  1384  0021                     merge1@matrix4x4:	
  1385                           ; 2 bytes @ 0x1
  1386                           
  1387                           
  1388                           ; 2 bytes @ 0x1
  1389  0021                     	ds	1
  1390  0022                     ??_rand:	
  1391  0022                     MATRIX16x8_to_MATRIX7219@matrix16x8:	
  1392                           ; 1 bytes @ 0x2
  1393                           
  1394  0022                     printf_debug_MATRIX16x8@matrix:	
  1395                           ; 1 bytes @ 0x2
  1396                           
  1397  0022                     is_left_boundary@matrix16x8:	
  1398                           ; 1 bytes @ 0x2
  1399                           
  1400  0022                     is_right_boundary@matrix16x8:	
  1401                           ; 1 bytes @ 0x2
  1402                           
  1403  0022                     get_high_after_merge@y:	
  1404                           ; 1 bytes @ 0x2
  1405                           
  1406                           
  1407                           ; 1 bytes @ 0x2
  1408  0022                     	ds	1
  1409  0023                     ??_is_left_boundary:	
  1410  0023                     MATRIX16x8_to_MATRIX7219@mask:	
  1411                           ; 1 bytes @ 0x3
  1412                           
  1413  0023                     printf_debug_MATRIX16x8@row:	
  1414                           ; 1 bytes @ 0x3
  1415                           
  1416  0023                     hit_land@matrix16x8:	
  1417                           ; 1 bytes @ 0x3
  1418                           
  1419  0023                     is_valid@matrix16x8:	
  1420                           ; 1 bytes @ 0x3
  1421                           
  1422  0023                     is_right_boundary@x:	
  1423                           ; 1 bytes @ 0x3
  1424                           
  1425  0023                     fall_off@matrix16x8:	
  1426                           ; 1 bytes @ 0x3
  1427                           
  1428  0023                     clear@matrix16x8:	
  1429                           ; 1 bytes @ 0x3
  1430                           
  1431  0023                     merge@matrix16x8:	
  1432                           ; 1 bytes @ 0x3
  1433                           
  1434  0023                     merge1@matrix16x8_in:	
  1435                           ; 1 bytes @ 0x3
  1436                           
  1437  0023                     get_high_after_merge@col:	
  1438                           ; 1 bytes @ 0x3
  1439                           
  1440  0023                     get_num_of_orphan@risk:	
  1441                           ; 1 bytes @ 0x3
  1442                           
  1443  0023                     get_heavy@risk:	
  1444                           ; 2 bytes @ 0x3
  1445                           
  1446                           
  1447                           ; 2 bytes @ 0x3
  1448  0023                     	ds	1
  1449  0024                     MATRIX16x8_to_MATRIX7219@row:	
  1450  0024                     printf_debug_MATRIX16x8@col:	
  1451                           ; 1 bytes @ 0x4
  1452                           
  1453  0024                     hit_land@x:	
  1454                           ; 1 bytes @ 0x4
  1455                           
  1456  0024                     is_valid@x:	
  1457                           ; 1 bytes @ 0x4
  1458                           
  1459  0024                     is_right_boundary@row:	
  1460                           ; 1 bytes @ 0x4
  1461                           
  1462  0024                     fall_off@x:	
  1463                           ; 1 bytes @ 0x4
  1464                           
  1465  0024                     clear@x:	
  1466                           ; 1 bytes @ 0x4
  1467                           
  1468  0024                     merge@x:	
  1469                           ; 1 bytes @ 0x4
  1470                           
  1471  0024                     merge1@matrix16x8_out:	
  1472                           ; 1 bytes @ 0x4
  1473                           
  1474  0024                     get_high_after_merge@row:	
  1475                           ; 1 bytes @ 0x4
  1476                           
  1477                           
  1478                           ; 1 bytes @ 0x4
  1479  0024                     	ds	1
  1480  0025                     MATRIX16x8_to_MATRIX7219@col:	
  1481  0025                     hit_land@col:	
  1482                           ; 1 bytes @ 0x5
  1483                           
  1484  0025                     is_valid@row:	
  1485                           ; 1 bytes @ 0x5
  1486                           
  1487  0025                     is_right_boundary@col:	
  1488                           ; 1 bytes @ 0x5
  1489                           
  1490  0025                     fall_off@col:	
  1491                           ; 1 bytes @ 0x5
  1492                           
  1493  0025                     clear@row:	
  1494                           ; 1 bytes @ 0x5
  1495                           
  1496  0025                     merge@row:	
  1497                           ; 1 bytes @ 0x5
  1498                           
  1499  0025                     get_num_of_orphan@full:	
  1500                           ; 1 bytes @ 0x5
  1501                           
  1502  0025                     get_heavy@start:	
  1503                           ; 1 bytes @ 0x5
  1504                           
  1505  0025                     merge1@len:	
  1506                           ; 1 bytes @ 0x5
  1507                           
  1508                           
  1509                           ; 2 bytes @ 0x5
  1510  0025                     	ds	1
  1511  0026                     ?_right_most:	
  1512  0026                     printf_MATRIX16x8@matrix16x8:	
  1513                           ; 1 bytes @ 0x6
  1514                           
  1515  0026                     hit_land@row:	
  1516                           ; 1 bytes @ 0x6
  1517                           
  1518  0026                     is_valid@col:	
  1519                           ; 1 bytes @ 0x6
  1520                           
  1521  0026                     fall_off@row:	
  1522                           ; 1 bytes @ 0x6
  1523                           
  1524  0026                     clear@col:	
  1525                           ; 1 bytes @ 0x6
  1526                           
  1527  0026                     merge@col:	
  1528                           ; 1 bytes @ 0x6
  1529                           
  1530  0026                     get_num_of_orphan@matrix:	
  1531                           ; 1 bytes @ 0x6
  1532                           
  1533  0026                     get_heavy@matrix:	
  1534                           ; 1 bytes @ 0x6
  1535                           
  1536  0026                     get_holes_after_merge@num_hole:	
  1537                           ; 1 bytes @ 0x6
  1538                           
  1539  0026                     right_most@matrix4x4:	
  1540                           ; 1 bytes @ 0x6
  1541                           
  1542                           
  1543                           ; 2 bytes @ 0x6
  1544  0026                     	ds	1
  1545  0027                     ?___awmod:	
  1546  0027                     merge1@x:	
  1547                           ; 2 bytes @ 0x7
  1548                           
  1549  0027                     get_num_of_orphan@col:	
  1550                           ; 1 bytes @ 0x7
  1551                           
  1552  0027                     get_heavy@pre:	
  1553                           ; 1 bytes @ 0x7
  1554                           
  1555  0027                     get_holes_after_merge@stop:	
  1556                           ; 1 bytes @ 0x7
  1557                           
  1558  0027                     ___awmod@divisor:	
  1559                           ; 1 bytes @ 0x7
  1560                           
  1561  0027                     printf_MATRIX16x8@matrix7219:	
  1562                           ; 2 bytes @ 0x7
  1563                           
  1564                           
  1565                           ; 16 bytes @ 0x7
  1566  0027                     	ds	1
  1567  0028                     is_left_boundary@x:	
  1568  0028                     merge1@row:	
  1569                           ; 1 bytes @ 0x8
  1570                           
  1571  0028                     get_num_of_orphan@row:	
  1572                           ; 1 bytes @ 0x8
  1573                           
  1574  0028                     get_heavy@col:	
  1575                           ; 1 bytes @ 0x8
  1576                           
  1577  0028                     right_most@matrix16x8:	
  1578                           ; 1 bytes @ 0x8
  1579                           
  1580  0028                     get_holes_after_merge@start:	
  1581                           ; 1 bytes @ 0x8
  1582                           
  1583                           
  1584                           ; 1 bytes @ 0x8
  1585  0028                     	ds	1
  1586  0029                     ??_right_most:	
  1587  0029                     is_left_boundary@row:	
  1588                           ; 1 bytes @ 0x9
  1589                           
  1590  0029                     merge1@col:	
  1591                           ; 1 bytes @ 0x9
  1592                           
  1593  0029                     get_heavy@row:	
  1594                           ; 1 bytes @ 0x9
  1595                           
  1596  0029                     get_holes_after_merge@matrix:	
  1597                           ; 1 bytes @ 0x9
  1598                           
  1599  0029                     ___awmod@dividend:	
  1600                           ; 1 bytes @ 0x9
  1601                           
  1602                           
  1603                           ; 2 bytes @ 0x9
  1604  0029                     	ds	1
  1605  002A                     is_left_boundary@col:	
  1606  002A                     right_most@x:	
  1607                           ; 1 bytes @ 0xA
  1608                           
  1609  002A                     get_holes_after_merge@col:	
  1610                           ; 1 bytes @ 0xA
  1611                           
  1612                           
  1613                           ; 1 bytes @ 0xA
  1614  002A                     	ds	1
  1615  002B                     ?_left_most:	
  1616  002B                     get_holes_after_merge@row:	
  1617                           ; 1 bytes @ 0xB
  1618                           
  1619  002B                     ___awmod@counter:	
  1620                           ; 1 bytes @ 0xB
  1621                           
  1622  002B                     left_most@matrix4x4:	
  1623                           ; 1 bytes @ 0xB
  1624                           
  1625                           
  1626                           ; 2 bytes @ 0xB
  1627  002B                     	ds	1
  1628  002C                     ?___wmul:	
  1629  002C                     ___awmod@sign:	
  1630                           ; 2 bytes @ 0xC
  1631                           
  1632  002C                     ___wmul@multiplier:	
  1633                           ; 1 bytes @ 0xC
  1634                           
  1635                           
  1636                           ; 2 bytes @ 0xC
  1637  002C                     	ds	1
  1638  002D                     left_most@matrix16x8:	
  1639                           
  1640                           ; 1 bytes @ 0xD
  1641  002D                     	ds	1
  1642  002E                     ___wmul@multiplicand:	
  1643                           
  1644                           ; 2 bytes @ 0xE
  1645  002E                     	ds	2
  1646  0030                     ??_find_best_solution:	
  1647                           
  1648                           ; 1 bytes @ 0x10
  1649  0030                     	ds	18
  1650  0042                     find_best_solution@temp_pre_risk:	
  1651                           
  1652                           ; 2 bytes @ 0x22
  1653  0042                     	ds	2
  1654  0044                     find_best_solution@left_most_index:	
  1655                           
  1656                           ; 1 bytes @ 0x24
  1657  0044                     	ds	1
  1658  0045                     find_best_solution@right_most_index:	
  1659                           
  1660                           ; 1 bytes @ 0x25
  1661  0045                     	ds	1
  1662  0046                     find_best_solution@temp_pre_x:	
  1663                           
  1664                           ; 1 bytes @ 0x26
  1665  0046                     	ds	1
  1666  0047                     find_best_solution@tem_pre_sub_index:	
  1667                           
  1668                           ; 1 bytes @ 0x27
  1669  0047                     	ds	1
  1670  0048                     find_best_solution@temp_risk:	
  1671                           
  1672                           ; 2 bytes @ 0x28
  1673  0048                     	ds	2
  1674  004A                     find_best_solution@res:	
  1675                           
  1676                           ; 1 bytes @ 0x2A
  1677  004A                     	ds	1
  1678  004B                     find_best_solution@temp_high:	
  1679                           
  1680                           ; 2 bytes @ 0x2B
  1681  004B                     	ds	2
  1682  004D                     find_best_solution@temp_y:	
  1683                           
  1684                           ; 1 bytes @ 0x2D
  1685  004D                     	ds	1
  1686  004E                     find_best_solution@tem_sub_index:	
  1687                           
  1688                           ; 1 bytes @ 0x2E
  1689  004E                     	ds	1
  1690  004F                     find_best_solution@temp_x:	
  1691                           
  1692                           ; 1 bytes @ 0x2F
  1693  004F                     	ds	1
  1694  0050                     ?_main:	
  1695  0050                     main@argc:	
  1696                           ; 2 bytes @ 0x30
  1697                           
  1698                           
  1699                           ; 2 bytes @ 0x30
  1700  0050                     	ds	2
  1701  0052                     main@argv:	
  1702                           
  1703                           ; 2 bytes @ 0x32
  1704  0052                     	ds	2
  1705  0054                     ??_main:	
  1706                           
  1707                           ; 1 bytes @ 0x34
  1708  0054                     	ds	4
  1709  0058                     main@hit_res:	
  1710                           
  1711                           ; 1 bytes @ 0x38
  1712  0058                     	ds	1
  1713                           
  1714                           	psect	maintext
  1715  0495                     __pmaintext:	
  1716 ;;
  1717 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1718 ;;
  1719 ;; *************** function _main *****************
  1720 ;; Defined at:
  1721 ;;		line 1515 in file "teris_16f886.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  argc            2   48[BANK0 ] int 
  1724 ;;  argv            2   50[BANK0 ] PTR PTR unsigned char 
  1725 ;; Auto vars:     Size  Location     Type
  1726 ;;  hit_res         1   56[BANK0 ] unsigned char 
  1727 ;; Return value:  Size  Location     Type
  1728 ;;                  2   48[BANK0 ] int 
  1729 ;; Registers used:
  1730 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1731 ;; Tracked objects:
  1732 ;;		On entry : B00/0
  1733 ;;		On exit  : 0/0
  1734 ;;		Unchanged: 0/0
  1735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1736 ;;      Params:         0       4       0       0       0
  1737 ;;      Locals:         0       1       0       0       0
  1738 ;;      Temps:          0       4       0       0       0
  1739 ;;      Totals:         0       9       0       0       0
  1740 ;;Total ram usage:        9 bytes
  1741 ;; Hardware stack levels required when called:    7
  1742 ;; This function calls:
  1743 ;;		_Clear_Matrix
  1744 ;;		_USARTInit
  1745 ;;		_char_info_index_rand
  1746 ;;		_clear
  1747 ;;		_delete_matrix
  1748 ;;		_eeprom_read_int
  1749 ;;		_eeprom_write_int
  1750 ;;		_find_best_solution
  1751 ;;		_hit_land
  1752 ;;		_max7219_init1
  1753 ;;		_merge
  1754 ;;		_printf_Screen
  1755 ;;		_printf_debug_MATRIX16x8
  1756 ;;		_srand
  1757 ;; This function is called by:
  1758 ;;		Startup code after reset
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           
  1763                           ;psect for function _main
  1764  0495                     _main:	
  1765                           
  1766                           ;teris_16f886.c: 1517: uint8_t hit_res;
  1767                           ;teris_16f886.c: 1529: (TRISAbits.TRISA3 = 0);
  1768                           
  1769                           ;incstack = 0
  1770                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1771  0495  1683               	bsf	3,5	;RP0=1, select bank1
  1772  0496  1303               	bcf	3,6	;RP1=0, select bank1
  1773  0497  1185               	bcf	5,3	;volatile
  1774                           
  1775                           ;teris_16f886.c: 1531: (TRISAbits.TRISA2 = 0);
  1776  0498  1105               	bcf	5,2	;volatile
  1777                           
  1778                           ;teris_16f886.c: 1533: (TRISAbits.TRISA1 = 0);
  1779  0499  1085               	bcf	5,1	;volatile
  1780                           
  1781                           ;teris_16f886.c: 1535: ANSELbits.ANS1 = 0;
  1782  049A  1683               	bsf	3,5	;RP0=1, select bank3
  1783  049B  1703               	bsf	3,6	;RP1=1, select bank3
  1784  049C  1088               	bcf	8,1	;volatile
  1785                           
  1786                           ;teris_16f886.c: 1536: ANSELbits.ANS2 = 0;
  1787  049D  1108               	bcf	8,2	;volatile
  1788                           
  1789                           ;teris_16f886.c: 1537: ANSELbits.ANS3 = 0;
  1790  049E  1188               	bcf	8,3	;volatile
  1791                           
  1792                           ;teris_16f886.c: 1538: RA2 = 1;
  1793  049F  1283               	bcf	3,5	;RP0=0, select bank0
  1794  04A0  1303               	bcf	3,6	;RP1=0, select bank0
  1795  04A1  1505               	bsf	5,2	;volatile
  1796                           
  1797                           ;teris_16f886.c: 1539: RA1 = 0;
  1798  04A2  1085               	bcf	5,1	;volatile
  1799                           
  1800                           ;teris_16f886.c: 1543: USARTInit(9600);
  1801  04A3  3080               	movlw	128
  1802  04A4  00F0               	movwf	USARTInit@baud_rate
  1803  04A5  3025               	movlw	37
  1804  04A6  00F1               	movwf	USARTInit@baud_rate+1
  1805  04A7  120A  158A  2512  120A  118A  	fcall	_USARTInit
  1806                           
  1807                           ;teris_16f886.c: 1546: max7219_init1();
  1808  04AC  120A  158A  25A0  120A  118A  	fcall	_max7219_init1
  1809                           
  1810                           ;teris_16f886.c: 1548: Seed = eeprom_read_int(0);
  1811  04B1  3000               	movlw	0
  1812  04B2  120A  158A  2271  120A  118A  	fcall	_eeprom_read_int
  1813  04B7  0873               	movf	?_eeprom_read_int+1,w
  1814  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  1815  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  1816  04BA  00DF               	movwf	_Seed+1
  1817  04BB  0872               	movf	?_eeprom_read_int,w
  1818  04BC  00DE               	movwf	_Seed
  1819                           
  1820                           ;teris_16f886.c: 1549: srand(Seed);
  1821  04BD  085F               	movf	_Seed+1,w
  1822  04BE  00F1               	movwf	srand@x+1
  1823  04BF  085E               	movf	_Seed,w
  1824  04C0  00F0               	movwf	srand@x
  1825  04C1  160A  118A  2776  120A  118A  	fcall	_srand
  1826  04C6                     l4321:	
  1827                           ;teris_16f886.c: 1551: __start:
  1828                           
  1829                           ;teris_16f886.c: 1572: {
  1830                           ;teris_16f886.c: 1576: goto __start;
  1831                           
  1832                           
  1833                           ;teris_16f886.c: 1552: Clear_Matrix();
  1834  04C6  160A  118A  27BB  120A  118A  	fcall	_Clear_Matrix
  1835  04CB                     l4323:	
  1836                           ;teris_16f886.c: 1556: while(1)
  1837                           
  1838                           
  1839                           ;teris_16f886.c: 1557: {
  1840                           ;teris_16f886.c: 1559: Seed++;
  1841  04CB  3001               	movlw	1
  1842  04CC  1283               	bcf	3,5	;RP0=0, select bank0
  1843  04CD  1303               	bcf	3,6	;RP1=0, select bank0
  1844  04CE  07DE               	addwf	_Seed,f
  1845  04CF  1803               	skipnc
  1846  04D0  0ADF               	incf	_Seed+1,f
  1847  04D1  3000               	movlw	0
  1848  04D2  07DF               	addwf	_Seed+1,f
  1849                           
  1850                           ;teris_16f886.c: 1560: eeprom_write_int(0, Seed);
  1851  04D3  085F               	movf	_Seed+1,w
  1852  04D4  00F4               	movwf	eeprom_write_int@value+1
  1853  04D5  085E               	movf	_Seed,w
  1854  04D6  00F3               	movwf	eeprom_write_int@value
  1855  04D7  3000               	movlw	0
  1856  04D8  120A  158A  21CF  120A  118A  	fcall	_eeprom_write_int
  1857                           
  1858                           ;teris_16f886.c: 1563: cur_y = 0;
  1859  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  1860  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  1861  04DF  01E4               	clrf	_cur_y
  1862                           
  1863                           ;teris_16f886.c: 1564: cur_x = 2, cur_y = 0;
  1864  04E0  3002               	movlw	2
  1865  04E1  00D4               	movwf	??_main
  1866  04E2  0854               	movf	??_main,w
  1867  04E3  00EC               	movwf	_cur_x
  1868  04E4  01E4               	clrf	_cur_y
  1869                           
  1870                           ;teris_16f886.c: 1565: g_char_info_index = char_info_index_rand();
  1871  04E5  120A  158A  2180  120A  118A  	fcall	_char_info_index_rand
  1872  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  1873  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  1874  04EC  00D4               	movwf	??_main
  1875  04ED  0854               	movf	??_main,w
  1876  04EE  00E5               	movwf	_g_char_info_index
  1877                           
  1878                           ;teris_16f886.c: 1566: g_char_info_sub_index = 0;
  1879  04EF  01E6               	clrf	_g_char_info_sub_index
  1880                           
  1881                           ;teris_16f886.c: 1571: if(find_best_solution() == 0)
  1882  04F0  120A  118A  25AB  120A  118A  	fcall	_find_best_solution
  1883  04F5  3A00               	xorlw	0
  1884  04F6  1903               	btfsc	3,2
  1885  04F7  2CC6               	goto	l4321
  1886                           
  1887                           ;teris_16f886.c: 1577: }
  1888                           ;teris_16f886.c: 1578: g_cur_matrix4x4 = &g_matrix4x4[g_char_info[g_char_info_index].sta
      +                          rt_index + g_char_info_sub_index];
  1889  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  1890  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  1891  04FA  0865               	movf	_g_char_info_index,w
  1892  04FB  00D4               	movwf	??_main
  1893  04FC  0754               	addwf	??_main,w
  1894  04FD  3E12               	addlw	low (_g_char_info| (0+32768))
  1895  04FE  0084               	movwf	4
  1896  04FF  3088               	movlw	high (_g_char_info| (0+32768))
  1897  0500  1803               	skipnc
  1898  0501  3E01               	addlw	1
  1899  0502  00FF               	movwf	127
  1900  0503  120A  158A  2000  120A  118A  	fcall	stringtab
  1901  0508  0766               	addwf	_g_char_info_sub_index,w
  1902  0509  00D5               	movwf	??_main+1
  1903  050A  3001               	movlw	1
  1904  050B                     u5135:	
  1905  050B  1003               	clrc
  1906  050C  0DD5               	rlf	??_main+1,f
  1907  050D  3EFF               	addlw	-1
  1908  050E  1D03               	skipz
  1909  050F  2D0B               	goto	u5135
  1910  0510  1003               	clrc
  1911  0511  0D55               	rlf	??_main+1,w
  1912  0512  3E42               	addlw	low (_g_matrix4x4| (0+32768))
  1913  0513  00D6               	movwf	??_main+2
  1914  0514  3088               	movlw	high (_g_matrix4x4| (0+32768))
  1915  0515  1803               	skipnc
  1916  0516  3E01               	addlw	1
  1917  0517  00D7               	movwf	??_main+3
  1918  0518  0856               	movf	??_main+2,w
  1919  0519  00E0               	movwf	_g_cur_matrix4x4
  1920  051A  0857               	movf	??_main+3,w
  1921  051B  00E1               	movwf	_g_cur_matrix4x4+1
  1922  051C                     l4341:	
  1923                           ;teris_16f886.c: 1583: while(1)
  1924                           
  1925                           
  1926                           ;teris_16f886.c: 1584: {
  1927                           ;teris_16f886.c: 1586: Seed++;
  1928  051C  3001               	movlw	1
  1929  051D  07DE               	addwf	_Seed,f
  1930  051E  1803               	skipnc
  1931  051F  0ADF               	incf	_Seed+1,f
  1932  0520  3000               	movlw	0
  1933  0521  07DF               	addwf	_Seed+1,f
  1934                           
  1935                           ;teris_16f886.c: 1589: hit_res = hit_land(cur_x, cur_y, g_cur_matrix4x4, &g_matrix16x8);
  1936  0522  0864               	movf	_cur_y,w
  1937  0523  00D4               	movwf	??_main
  1938  0524  0854               	movf	??_main,w
  1939  0525  00A0               	movwf	hit_land@y
  1940  0526  0860               	movf	_g_cur_matrix4x4,w
  1941  0527  00A1               	movwf	hit_land@matrix4x4
  1942  0528  0861               	movf	_g_cur_matrix4x4+1,w
  1943  0529  00A2               	movwf	hit_land@matrix4x4+1
  1944  052A  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  1945  052B  00D5               	movwf	??_main+1
  1946  052C  0855               	movf	??_main+1,w
  1947  052D  00A3               	movwf	hit_land@matrix16x8
  1948  052E  086C               	movf	_cur_x,w
  1949  052F  120A  158A  2796  120A  118A  	fcall	_hit_land
  1950  0534  1283               	bcf	3,5	;RP0=0, select bank0
  1951  0535  1303               	bcf	3,6	;RP1=0, select bank0
  1952  0536  00D6               	movwf	??_main+2
  1953  0537  0856               	movf	??_main+2,w
  1954  0538  00D8               	movwf	main@hit_res
  1955                           
  1956                           ;teris_16f886.c: 1593: merge(cur_x, cur_y, g_cur_matrix4x4, &g_matrix16x8);
  1957  0539  0864               	movf	_cur_y,w
  1958  053A  00D4               	movwf	??_main
  1959  053B  0854               	movf	??_main,w
  1960  053C  00A0               	movwf	merge@y
  1961  053D  0860               	movf	_g_cur_matrix4x4,w
  1962  053E  00A1               	movwf	merge@matrix4x4
  1963  053F  0861               	movf	_g_cur_matrix4x4+1,w
  1964  0540  00A2               	movwf	merge@matrix4x4+1
  1965  0541  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  1966  0542  00D5               	movwf	??_main+1
  1967  0543  0855               	movf	??_main+1,w
  1968  0544  00A3               	movwf	merge@matrix16x8
  1969  0545  086C               	movf	_cur_x,w
  1970  0546  120A  158A  24CE  120A  118A  	fcall	_merge
  1971                           
  1972                           ;teris_16f886.c: 1594: if(hit_res == 1)
  1973  054B  1283               	bcf	3,5	;RP0=0, select bank0
  1974  054C  1303               	bcf	3,6	;RP1=0, select bank0
  1975  054D  0358               	decf	main@hit_res,w
  1976  054E  1D03               	btfss	3,2
  1977  054F  2D6A               	goto	l4355
  1978                           
  1979                           ;teris_16f886.c: 1595: {
  1980                           ;teris_16f886.c: 1596: printf_Screen();
  1981  0550  160A  118A  2751  120A  118A  	fcall	_printf_Screen
  1982                           
  1983                           ;teris_16f886.c: 1600: _delay((unsigned long)((100)*(20000000/4000.0)));
  1984  0555  3003               	movlw	3
  1985  0556  1283               	bcf	3,5	;RP0=0, select bank0
  1986  0557  1303               	bcf	3,6	;RP1=0, select bank0
  1987  0558  00D6               	movwf	??_main+2
  1988  0559  308A               	movlw	138
  1989  055A  00D5               	movwf	??_main+1
  1990  055B  3056               	movlw	86
  1991  055C  00D4               	movwf	??_main
  1992  055D                     u6077:	
  1993  055D  0BD4               	decfsz	??_main,f
  1994  055E  2D5D               	goto	u6077
  1995  055F  0BD5               	decfsz	??_main+1,f
  1996  0560  2D5D               	goto	u6077
  1997  0561  0BD6               	decfsz	??_main+2,f
  1998  0562  2D5D               	goto	u6077
  1999  0563  2D64               	nop2
  2000                           
  2001                           ;teris_16f886.c: 1602: delete_matrix(&g_matrix16x8);
  2002  0564  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  2003  0565  120A  158A  23A9  120A  118A  	fcall	_delete_matrix
  2004  056A                     l4355:	
  2005                           
  2006                           ;teris_16f886.c: 1603: }
  2007                           ;teris_16f886.c: 1605: printf_debug_MATRIX16x8("Main screen", &g_matrix16x8);
  2008  056A  305B               	movlw	low (STR_31| (0+32768))
  2009  056B  1283               	bcf	3,5	;RP0=0, select bank0
  2010  056C  1303               	bcf	3,6	;RP1=0, select bank0
  2011  056D  00A0               	movwf	printf_debug_MATRIX16x8@lable
  2012  056E  3089               	movlw	high (STR_31| (0+32768))
  2013  056F  00A1               	movwf	printf_debug_MATRIX16x8@lable+1
  2014  0570  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  2015  0571  00D4               	movwf	??_main
  2016  0572  0854               	movf	??_main,w
  2017  0573  00A2               	movwf	printf_debug_MATRIX16x8@matrix
  2018  0574  120A  118A  206A  120A  118A  	fcall	_printf_debug_MATRIX16x8
  2019                           
  2020                           ;teris_16f886.c: 1607: printf_Screen();
  2021  0579  160A  118A  2751  120A  118A  	fcall	_printf_Screen
  2022                           
  2023                           ;teris_16f886.c: 1608: if(hit_res == 0)
  2024  057E  1283               	bcf	3,5	;RP0=0, select bank0
  2025  057F  1303               	bcf	3,6	;RP1=0, select bank0
  2026  0580  0858               	movf	main@hit_res,w
  2027  0581  1D03               	btfss	3,2
  2028  0582  2CCB               	goto	l4323
  2029                           
  2030                           ;teris_16f886.c: 1609: {
  2031                           ;teris_16f886.c: 1610: clear(cur_x, cur_y, g_cur_matrix4x4, &g_matrix16x8);
  2032  0583  0864               	movf	_cur_y,w
  2033  0584  00D4               	movwf	??_main
  2034  0585  0854               	movf	??_main,w
  2035  0586  00A0               	movwf	clear@y
  2036  0587  0860               	movf	_g_cur_matrix4x4,w
  2037  0588  00A1               	movwf	clear@matrix4x4
  2038  0589  0861               	movf	_g_cur_matrix4x4+1,w
  2039  058A  00A2               	movwf	clear@matrix4x4+1
  2040  058B  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  2041  058C  00D5               	movwf	??_main+1
  2042  058D  0855               	movf	??_main+1,w
  2043  058E  00A3               	movwf	clear@matrix16x8
  2044  058F  086C               	movf	_cur_x,w
  2045  0590  120A  158A  248B  120A  118A  	fcall	_clear
  2046                           
  2047                           ;teris_16f886.c: 1615: }
  2048                           ;teris_16f886.c: 1619: _delay((unsigned long)((200)*(20000000/4000.0)));
  2049                           
  2050                           ;teris_16f886.c: 1612: else
  2051                           ;teris_16f886.c: 1613: {
  2052                           ;teris_16f886.c: 1614: break;
  2053                           
  2054                           ;teris_16f886.c: 1611: }
  2055  0595  3006               	movlw	6
  2056  0596  1283               	bcf	3,5	;RP0=0, select bank0
  2057  0597  1303               	bcf	3,6	;RP1=0, select bank0
  2058  0598  00D6               	movwf	??_main+2
  2059  0599  3013               	movlw	19
  2060  059A  00D5               	movwf	??_main+1
  2061  059B  30B1               	movlw	177
  2062  059C  00D4               	movwf	??_main
  2063  059D                     u6087:	
  2064  059D  0BD4               	decfsz	??_main,f
  2065  059E  2D9D               	goto	u6087
  2066  059F  0BD5               	decfsz	??_main+1,f
  2067  05A0  2D9D               	goto	u6087
  2068  05A1  0BD6               	decfsz	??_main+2,f
  2069  05A2  2D9D               	goto	u6087
  2070  05A3  2DA4               	nop2
  2071                           
  2072                           ;teris_16f886.c: 1621: cur_y++;
  2073  05A4  3001               	movlw	1
  2074  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  2075  05A6  1303               	bcf	3,6	;RP1=0, select bank0
  2076  05A7  00D4               	movwf	??_main
  2077  05A8  0854               	movf	??_main,w
  2078  05A9  07E4               	addwf	_cur_y,f
  2079  05AA  2D1C               	goto	l4341
  2080  05AB                     __end_of_main:	
  2081                           ;teris_16f886.c: 1631: return 0;
  2082                           ;	Return value of _main is never used
  2083                           
  2084                           ;teris_16f886.c: 1622: }
  2085                           ;teris_16f886.c: 1623: }
  2086                           ;teris_16f886.c: 1624: __exit:
  2087                           
  2088                           
  2089                           	psect	text1
  2090  1776                     __ptext1:	
  2091 ;; *************** function _srand *****************
  2092 ;; Defined at:
  2093 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;  x               2    0[COMMON] unsigned int 
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;		None
  2098 ;; Return value:  Size  Location     Type
  2099 ;;                  1    wreg      void 
  2100 ;; Registers used:
  2101 ;;		wreg
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2107 ;;      Params:         2       0       0       0       0
  2108 ;;      Locals:         0       0       0       0       0
  2109 ;;      Temps:          0       0       0       0       0
  2110 ;;      Totals:         2       0       0       0       0
  2111 ;;Total ram usage:        2 bytes
  2112 ;; Hardware stack levels used:    1
  2113 ;; This function calls:
  2114 ;;		Nothing
  2115 ;; This function is called by:
  2116 ;;		_main
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           
  2121                           ;psect for function _srand
  2122  1776                     _srand:	
  2123                           
  2124                           ;incstack = 0
  2125                           ; Regs used in _srand: [wreg]
  2126  1776  0870               	movf	srand@x,w
  2127  1777  1283               	bcf	3,5	;RP0=0, select bank0
  2128  1778  1303               	bcf	3,6	;RP1=0, select bank0
  2129  1779  00E8               	movwf	_randx
  2130  177A  0871               	movf	srand@x+1,w
  2131  177B  00E9               	movwf	_randx+1
  2132  177C  01EA               	clrf	_randx+2
  2133  177D  01EB               	clrf	_randx+3
  2134  177E  0008               	return
  2135  177F                     __end_of_srand:	
  2136                           
  2137                           	psect	text2
  2138  006A                     __ptext2:	
  2139 ;; *************** function _printf_debug_MATRIX16x8 *****************
  2140 ;; Defined at:
  2141 ;;		line 619 in file "teris_16f886.c"
  2142 ;; Parameters:    Size  Location     Type
  2143 ;;  lable           2    0[BANK0 ] PTR const unsigned char 
  2144 ;;		 -> STR_31(12), ROM(8192), 
  2145 ;;  matrix          1    2[BANK0 ] PTR const struct .
  2146 ;;		 -> g_matrix16x8(16), 
  2147 ;; Auto vars:     Size  Location     Type
  2148 ;;  col             1    4[BANK0 ] unsigned char 
  2149 ;;  row             1    3[BANK0 ] unsigned char 
  2150 ;; Return value:  Size  Location     Type
  2151 ;;                  1    wreg      void 
  2152 ;; Registers used:
  2153 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2154 ;; Tracked objects:
  2155 ;;		On entry : 0/0
  2156 ;;		On exit  : 0/0
  2157 ;;		Unchanged: 0/0
  2158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2159 ;;      Params:         0       3       0       0       0
  2160 ;;      Locals:         0       2       0       0       0
  2161 ;;      Temps:          2       0       0       0       0
  2162 ;;      Totals:         2       5       0       0       0
  2163 ;;Total ram usage:        7 bytes
  2164 ;; Hardware stack levels used:    1
  2165 ;; Hardware stack levels required when called:    3
  2166 ;; This function calls:
  2167 ;;		_debug_line
  2168 ;;		_debug_str
  2169 ;;		_get_matrix_bit
  2170 ;; This function is called by:
  2171 ;;		_main
  2172 ;;		_printf_debug_Screen
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           
  2177                           ;psect for function _printf_debug_MATRIX16x8
  2178  006A                     _printf_debug_MATRIX16x8:	
  2179                           
  2180                           ;teris_16f886.c: 621: if(lable != (0))
  2181                           
  2182                           ;incstack = 0
  2183                           ; Regs used in _printf_debug_MATRIX16x8: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  2184  006A  1283               	bcf	3,5	;RP0=0, select bank0
  2185  006B  1303               	bcf	3,6	;RP1=0, select bank0
  2186  006C  0820               	movf	printf_debug_MATRIX16x8@lable,w
  2187  006D  0421               	iorwf	printf_debug_MATRIX16x8@lable+1,w
  2188  006E  1903               	btfsc	3,2
  2189  006F  2882               	goto	l265
  2190                           
  2191                           ;teris_16f886.c: 622: {
  2192                           ;teris_16f886.c: 623: debug_str(lable);
  2193  0070  0820               	movf	printf_debug_MATRIX16x8@lable,w
  2194  0071  00F3               	movwf	debug_str@str
  2195  0072  0821               	movf	printf_debug_MATRIX16x8@lable+1,w
  2196  0073  00F4               	movwf	debug_str@str+1
  2197  0074  160A  118A  2766  120A  118A  	fcall	_debug_str
  2198                           
  2199                           ;teris_16f886.c: 624: debug_line(":");
  2200  0079  3076               	movlw	low (STR_5| (0+32768))
  2201  007A  00F3               	movwf	debug_line@str
  2202  007B  3089               	movlw	high (STR_5| (0+32768))
  2203  007C  00F4               	movwf	debug_line@str+1
  2204  007D  160A  118A  27CC  120A  118A  	fcall	_debug_line
  2205  0082                     l265:	
  2206                           
  2207                           ;teris_16f886.c: 625: }
  2208                           ;teris_16f886.c: 626: debug_line("<<<<<<<<<<<<<<<<<<<<MATRIX16x8");
  2209  0082  30A2               	movlw	low (STR_16| (0+32768))
  2210  0083  00F3               	movwf	debug_line@str
  2211  0084  3088               	movlw	high (STR_16| (0+32768))
  2212  0085  00F4               	movwf	debug_line@str+1
  2213  0086  160A  118A  27CC  120A  118A  	fcall	_debug_line
  2214                           
  2215                           ;teris_16f886.c: 627: for(uint8_t row = 0; row < 16; row++)
  2216  008B  1283               	bcf	3,5	;RP0=0, select bank0
  2217  008C  1303               	bcf	3,6	;RP1=0, select bank0
  2218  008D  01A3               	clrf	printf_debug_MATRIX16x8@row
  2219  008E  3010               	movlw	16
  2220  008F  0223               	subwf	printf_debug_MATRIX16x8@row,w
  2221  0090  1803               	btfsc	3,0
  2222  0091  28D5               	goto	l3597
  2223  0092                     l3575:	
  2224                           
  2225                           ;teris_16f886.c: 628: {
  2226                           ;teris_16f886.c: 629: for(uint8_t col = 0; col < 8; col++)
  2227  0092  01A4               	clrf	printf_debug_MATRIX16x8@col
  2228  0093  3008               	movlw	8
  2229  0094  0224               	subwf	printf_debug_MATRIX16x8@col,w
  2230  0095  1803               	btfsc	3,0
  2231  0096  28C2               	goto	l3591
  2232  0097                     l3581:	
  2233                           
  2234                           ;teris_16f886.c: 630: {
  2235                           ;teris_16f886.c: 631: if(get_matrix_bit(matrix->row, row, col) == 1)
  2236  0097  0822               	movf	printf_debug_MATRIX16x8@matrix,w
  2237  0098  00F7               	movwf	get_matrix_bit@byte
  2238  0099  3000               	movlw	0
  2239  009A  00F8               	movwf	get_matrix_bit@byte+1
  2240  009B  0823               	movf	printf_debug_MATRIX16x8@row,w
  2241  009C  00FC               	movwf	??_printf_debug_MATRIX16x8
  2242  009D  087C               	movf	??_printf_debug_MATRIX16x8,w
  2243  009E  00F9               	movwf	get_matrix_bit@row
  2244  009F  0824               	movf	printf_debug_MATRIX16x8@col,w
  2245  00A0  00FD               	movwf	??_printf_debug_MATRIX16x8+1
  2246  00A1  087D               	movf	??_printf_debug_MATRIX16x8+1,w
  2247  00A2  00FA               	movwf	get_matrix_bit@col
  2248  00A3  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  2249  00A8  3A01               	xorlw	1
  2250  00A9  1D03               	skipz
  2251  00AA  28AF               	goto	l3585
  2252                           
  2253                           ;teris_16f886.c: 632: {
  2254                           ;teris_16f886.c: 633: debug_str("*");
  2255  00AB  3074               	movlw	low (STR_7| (0+32768))
  2256  00AC  00F3               	movwf	debug_str@str
  2257  00AD  3089               	movlw	high (STR_7| (0+32768))
  2258  00AE  28B2               	goto	L1
  2259  00AF                     l3585:	
  2260                           ;teris_16f886.c: 634: }
  2261                           
  2262                           
  2263                           ;teris_16f886.c: 635: else
  2264                           ;teris_16f886.c: 636: {
  2265                           ;teris_16f886.c: 637: debug_str("_");
  2266  00AF  3078               	movlw	low (STR_8| (0+32768))
  2267  00B0  00F3               	movwf	debug_str@str
  2268  00B1  3089               	movlw	high (STR_8| (0+32768))
  2269  00B2                     L1:	
  2270  00B2  00F4               	movwf	debug_str@str+1
  2271  00B3  160A  118A  2766  120A  118A  	fcall	_debug_str
  2272  00B8  3001               	movlw	1
  2273  00B9  00FC               	movwf	??_printf_debug_MATRIX16x8
  2274  00BA  087C               	movf	??_printf_debug_MATRIX16x8,w
  2275  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  2276  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  2277  00BD  07A4               	addwf	printf_debug_MATRIX16x8@col,f
  2278  00BE  3008               	movlw	8
  2279  00BF  0224               	subwf	printf_debug_MATRIX16x8@col,w
  2280  00C0  1C03               	skipc
  2281  00C1  2897               	goto	l3581
  2282  00C2                     l3591:	
  2283                           
  2284                           ;teris_16f886.c: 638: }
  2285                           ;teris_16f886.c: 639: }
  2286                           ;teris_16f886.c: 640: debug_line("");
  2287  00C2  3073               	movlw	low ((STR_1+2)| (0+32768))
  2288  00C3  00F3               	movwf	debug_line@str
  2289  00C4  3089               	movlw	high ((STR_1+2)| (0+32768))
  2290  00C5  00F4               	movwf	debug_line@str+1
  2291  00C6  160A  118A  27CC  120A  118A  	fcall	_debug_line
  2292  00CB  3001               	movlw	1
  2293  00CC  00FC               	movwf	??_printf_debug_MATRIX16x8
  2294  00CD  087C               	movf	??_printf_debug_MATRIX16x8,w
  2295  00CE  1283               	bcf	3,5	;RP0=0, select bank0
  2296  00CF  1303               	bcf	3,6	;RP1=0, select bank0
  2297  00D0  07A3               	addwf	printf_debug_MATRIX16x8@row,f
  2298  00D1  3010               	movlw	16
  2299  00D2  0223               	subwf	printf_debug_MATRIX16x8@row,w
  2300  00D3  1C03               	skipc
  2301  00D4  2892               	goto	l3575
  2302  00D5                     l3597:	
  2303                           
  2304                           ;teris_16f886.c: 641: }
  2305                           ;teris_16f886.c: 642: debug_line(">>>>>>>>>>>>>>>>>>>>");
  2306  00D5  3024               	movlw	low (STR_10| (0+32768))
  2307  00D6  00F3               	movwf	debug_line@str
  2308  00D7  3089               	movlw	high (STR_10| (0+32768))
  2309  00D8  00F4               	movwf	debug_line@str+1
  2310  00D9  160A  118A  27CC   	fcall	_debug_line
  2311  00DC  0008               	return
  2312  00DD                     __end_of_printf_debug_MATRIX16x8:	
  2313                           
  2314                           	psect	text3
  2315  1766                     __ptext3:	
  2316 ;; *************** function _debug_str *****************
  2317 ;; Defined at:
  2318 ;;		line 344 in file "teris_16f886.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;  str             2    3[COMMON] PTR const unsigned char 
  2321 ;;		 -> STR_31(12), STR_27(2), STR_26(2), STR_24(2), 
  2322 ;;		 -> STR_23(2), STR_18(2), STR_17(2), STR_8(2), 
  2323 ;;		 -> STR_7(2), ROM(8192), 
  2324 ;; Auto vars:     Size  Location     Type
  2325 ;;		None
  2326 ;; Return value:  Size  Location     Type
  2327 ;;                  1    wreg      void 
  2328 ;; Registers used:
  2329 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2330 ;; Tracked objects:
  2331 ;;		On entry : 0/0
  2332 ;;		On exit  : 0/0
  2333 ;;		Unchanged: 0/0
  2334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2335 ;;      Params:         2       0       0       0       0
  2336 ;;      Locals:         0       0       0       0       0
  2337 ;;      Temps:          0       0       0       0       0
  2338 ;;      Totals:         2       0       0       0       0
  2339 ;;Total ram usage:        2 bytes
  2340 ;; Hardware stack levels used:    1
  2341 ;; Hardware stack levels required when called:    2
  2342 ;; This function calls:
  2343 ;;		_USARTWriteString
  2344 ;; This function is called by:
  2345 ;;		_printf_debug_MATRIX16x8
  2346 ;;		_printf_debug_MATRIX4x4
  2347 ;;		_printf_debug_cur_MATRIX4x4
  2348 ;;		_printf_debug_MATRIX7219
  2349 ;;		_printf_debug_Screen
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           
  2354                           ;psect for function _debug_str
  2355  1766                     _debug_str:	
  2356                           
  2357                           ;teris_16f886.c: 350: USARTWriteString(str);
  2358                           
  2359                           ;incstack = 0
  2360                           ; Regs used in _debug_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2361  1766  0873               	movf	debug_str@str,w
  2362  1767  00F1               	movwf	USARTWriteString@str
  2363  1768  0874               	movf	debug_str@str+1,w
  2364  1769  00F2               	movwf	USARTWriteString@str+1
  2365  176A  120A  158A  22B9   	fcall	_USARTWriteString
  2366  176D  0008               	return
  2367  176E                     __end_of_debug_str:	
  2368                           
  2369                           	psect	text4
  2370  17CC                     __ptext4:	
  2371 ;; *************** function _debug_line *****************
  2372 ;; Defined at:
  2373 ;;		line 354 in file "teris_16f886.c"
  2374 ;; Parameters:    Size  Location     Type
  2375 ;;  str             2    3[COMMON] PTR const unsigned char 
  2376 ;;		 -> STR_30(2), STR_29(21), STR_28(1), STR_25(1), 
  2377 ;;		 -> STR_22(21), STR_21(2), STR_20(21), STR_19(1), 
  2378 ;;		 -> STR_16(31), STR_15(2), STR_12(21), STR_11(2), 
  2379 ;;		 -> STR_10(21), STR_9(1), STR_6(30), STR_5(2), 
  2380 ;; Auto vars:     Size  Location     Type
  2381 ;;		None
  2382 ;; Return value:  Size  Location     Type
  2383 ;;                  1    wreg      void 
  2384 ;; Registers used:
  2385 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2386 ;; Tracked objects:
  2387 ;;		On entry : 0/0
  2388 ;;		On exit  : 0/0
  2389 ;;		Unchanged: 0/0
  2390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2391 ;;      Params:         2       0       0       0       0
  2392 ;;      Locals:         0       0       0       0       0
  2393 ;;      Temps:          0       0       0       0       0
  2394 ;;      Totals:         2       0       0       0       0
  2395 ;;Total ram usage:        2 bytes
  2396 ;; Hardware stack levels used:    1
  2397 ;; Hardware stack levels required when called:    2
  2398 ;; This function calls:
  2399 ;;		_USARTWriteString
  2400 ;; This function is called by:
  2401 ;;		_printf_debug_MATRIX16x8
  2402 ;;		_printf_debug_MATRIX4x4
  2403 ;;		_printf_debug_cur_MATRIX4x4
  2404 ;;		_printf_debug_all_MATRIX4x4
  2405 ;;		_printf_debug_MATRIX7219
  2406 ;;		_printf_debug_Screen
  2407 ;; This function uses a non-reentrant model
  2408 ;;
  2409                           
  2410                           
  2411                           ;psect for function _debug_line
  2412  17CC                     _debug_line:	
  2413                           
  2414                           ;teris_16f886.c: 361: USARTWriteString(str);
  2415                           
  2416                           ;incstack = 0
  2417                           ; Regs used in _debug_line: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2418  17CC  0873               	movf	debug_line@str,w
  2419  17CD  00F1               	movwf	USARTWriteString@str
  2420  17CE  0874               	movf	debug_line@str+1,w
  2421  17CF  00F2               	movwf	USARTWriteString@str+1
  2422  17D0  120A  158A  22B9  160A  118A  	fcall	_USARTWriteString
  2423                           
  2424                           ;teris_16f886.c: 362: USARTWriteString("\r\n");
  2425  17D5  3071               	movlw	low (STR_1| (0+32768))
  2426  17D6  00F1               	movwf	USARTWriteString@str
  2427  17D7  3089               	movlw	high (STR_1| (0+32768))
  2428  17D8  00F2               	movwf	USARTWriteString@str+1
  2429  17D9  120A  158A  22B9   	fcall	_USARTWriteString
  2430  17DC  0008               	return
  2431  17DD                     __end_of_debug_line:	
  2432                           
  2433                           	psect	text5
  2434  0AB9                     __ptext5:	
  2435 ;; *************** function _USARTWriteString *****************
  2436 ;; Defined at:
  2437 ;;		line 76 in file "usart_pic16.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;  str             2    1[COMMON] PTR const unsigned char 
  2440 ;;		 -> STR_31(12), STR_30(2), STR_29(21), STR_28(1), 
  2441 ;;		 -> STR_27(2), STR_26(2), STR_25(1), STR_24(2), 
  2442 ;;		 -> STR_23(2), STR_22(21), STR_21(2), STR_20(21), 
  2443 ;;		 -> STR_19(1), STR_18(2), STR_17(2), STR_16(31), 
  2444 ;;		 -> STR_15(2), STR_12(21), STR_11(2), STR_10(21), 
  2445 ;;		 -> STR_9(1), STR_8(2), STR_7(2), STR_6(30), 
  2446 ;;		 -> STR_5(2), ROM(8192), STR_4(3), STR_3(3), 
  2447 ;;		 -> STR_2(3), g_debug(64), STR_1(3), 
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;		None
  2450 ;; Return value:  Size  Location     Type
  2451 ;;                  1    wreg      void 
  2452 ;; Registers used:
  2453 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2459 ;;      Params:         2       0       0       0       0
  2460 ;;      Locals:         0       0       0       0       0
  2461 ;;      Temps:          0       0       0       0       0
  2462 ;;      Totals:         2       0       0       0       0
  2463 ;;Total ram usage:        2 bytes
  2464 ;; Hardware stack levels used:    1
  2465 ;; Hardware stack levels required when called:    1
  2466 ;; This function calls:
  2467 ;;		_USARTWriteChar
  2468 ;; This function is called by:
  2469 ;;		_debug_str
  2470 ;;		_debug_line
  2471 ;;		_USARTWriteLine
  2472 ;;		_debug_int1
  2473 ;;		_debug_int2
  2474 ;;		_debug_int3
  2475 ;; This function uses a non-reentrant model
  2476 ;;
  2477                           
  2478                           
  2479                           ;psect for function _USARTWriteString
  2480  0AB9                     _USARTWriteString:	
  2481  0AB9                     l2847:	
  2482                           ;usart_pic16.c: 77: while (*str != '\0') {
  2483                           
  2484                           ;incstack = 0
  2485                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2486                           
  2487  0AB9  0872               	movf	USARTWriteString@str+1,w
  2488  0ABA  1283               	bcf	3,5	;RP0=0, select bank0
  2489  0ABB  1303               	bcf	3,6	;RP1=0, select bank0
  2490  0ABC  00FF               	movwf	127
  2491  0ABD  0871               	movf	USARTWriteString@str,w
  2492  0ABE  0084               	movwf	4
  2493  0ABF  120A  158A  2000  120A  158A  	fcall	stringtab
  2494  0AC4  3A00               	xorlw	0
  2495  0AC5  1903               	btfsc	3,2
  2496  0AC6  0008               	return
  2497                           
  2498                           ;usart_pic16.c: 78: USARTWriteChar(*str);
  2499  0AC7  0872               	movf	USARTWriteString@str+1,w
  2500  0AC8  1283               	bcf	3,5	;RP0=0, select bank0
  2501  0AC9  1303               	bcf	3,6	;RP1=0, select bank0
  2502  0ACA  00FF               	movwf	127
  2503  0ACB  0871               	movf	USARTWriteString@str,w
  2504  0ACC  0084               	movwf	4
  2505  0ACD  120A  158A  2000  120A  158A  	fcall	stringtab
  2506  0AD2  160A  118A  275E  120A  158A  	fcall	_USARTWriteChar
  2507                           
  2508                           ;usart_pic16.c: 79: str++;
  2509  0AD7  3001               	movlw	1
  2510  0AD8  07F1               	addwf	USARTWriteString@str,f
  2511  0AD9  1803               	skipnc
  2512  0ADA  0AF2               	incf	USARTWriteString@str+1,f
  2513  0ADB  3000               	movlw	0
  2514  0ADC  07F2               	addwf	USARTWriteString@str+1,f
  2515  0ADD  2AB9               	goto	l2847
  2516  0ADE                     __end_of_USARTWriteString:	
  2517                           
  2518                           	psect	text6
  2519  175E                     __ptext6:	
  2520 ;; *************** function _USARTWriteChar *****************
  2521 ;; Defined at:
  2522 ;;		line 70 in file "usart_pic16.c"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;  ch              1    wreg     unsigned char 
  2525 ;; Auto vars:     Size  Location     Type
  2526 ;;  ch              1    0[COMMON] unsigned char 
  2527 ;; Return value:  Size  Location     Type
  2528 ;;                  1    wreg      void 
  2529 ;; Registers used:
  2530 ;;		wreg
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : 0/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2536 ;;      Params:         0       0       0       0       0
  2537 ;;      Locals:         1       0       0       0       0
  2538 ;;      Temps:          0       0       0       0       0
  2539 ;;      Totals:         1       0       0       0       0
  2540 ;;Total ram usage:        1 bytes
  2541 ;; Hardware stack levels used:    1
  2542 ;; This function calls:
  2543 ;;		Nothing
  2544 ;; This function is called by:
  2545 ;;		_USARTWriteString
  2546 ;;		_USARTWriteLine
  2547 ;;		_USARTWriteInt
  2548 ;;		_USARTGotoNewLine
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           
  2553                           ;psect for function _USARTWriteChar
  2554  175E                     _USARTWriteChar:	
  2555                           
  2556                           ;incstack = 0
  2557                           ; Regs used in _USARTWriteChar: [wreg]
  2558                           ;USARTWriteChar@ch stored from wreg
  2559  175E  00F0               	movwf	USARTWriteChar@ch
  2560  175F                     l36:	
  2561                           ;usart_pic16.c: 71: while (!PIR1bits.TXIF);
  2562                           
  2563  175F  1283               	bcf	3,5	;RP0=0, select bank0
  2564  1760  1303               	bcf	3,6	;RP1=0, select bank0
  2565  1761  1E0C               	btfss	12,4	;volatile
  2566  1762  2F5F               	goto	l36
  2567                           
  2568                           ;usart_pic16.c: 73: TXREG = ch;
  2569  1763  0870               	movf	USARTWriteChar@ch,w
  2570  1764  0099               	movwf	25	;volatile
  2571  1765  0008               	return
  2572  1766                     __end_of_USARTWriteChar:	
  2573                           
  2574                           	psect	text7
  2575  0CCE                     __ptext7:	
  2576 ;; *************** function _merge *****************
  2577 ;; Defined at:
  2578 ;;		line 1009 in file "teris_16f886.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;  x               1    wreg     char 
  2581 ;;  y               1    0[BANK0 ] char 
  2582 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  2583 ;;		 -> NULL(0), g_matrix4x4(96), 
  2584 ;;  matrix16x8      1    3[BANK0 ] PTR struct .
  2585 ;;		 -> g_matrix16x8(16), 
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;  x               1    4[BANK0 ] char 
  2588 ;;  col             1    6[BANK0 ] unsigned char 
  2589 ;;  row             1    5[BANK0 ] unsigned char 
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  1    wreg      void 
  2592 ;; Registers used:
  2593 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2599 ;;      Params:         0       4       0       0       0
  2600 ;;      Locals:         0       3       0       0       0
  2601 ;;      Temps:          2       0       0       0       0
  2602 ;;      Totals:         2       7       0       0       0
  2603 ;;Total ram usage:        9 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    3
  2606 ;; This function calls:
  2607 ;;		_get_matrix_bit
  2608 ;;		_set_matrix_bit
  2609 ;; This function is called by:
  2610 ;;		_main
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           
  2615                           ;psect for function _merge
  2616  0CCE                     _merge:	
  2617                           
  2618                           ;incstack = 0
  2619                           ; Regs used in _merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2620                           ;merge@x stored from wreg
  2621  0CCE  1283               	bcf	3,5	;RP0=0, select bank0
  2622  0CCF  1303               	bcf	3,6	;RP1=0, select bank0
  2623  0CD0  00A4               	movwf	merge@x
  2624                           
  2625                           ;teris_16f886.c: 1016: for(uint8_t row = 0; row < 4; row++)
  2626  0CD1  01A5               	clrf	merge@row
  2627  0CD2                     L2:	
  2628  0CD2  3004               	movlw	4
  2629  0CD3  0225               	subwf	merge@row,w
  2630  0CD4  1803               	btfsc	3,0
  2631  0CD5  0008               	return
  2632                           
  2633                           ;teris_16f886.c: 1017: {
  2634                           ;teris_16f886.c: 1018: for(uint8_t col = 0; col < 4; col++)
  2635  0CD6  01A6               	clrf	merge@col
  2636  0CD7  3004               	movlw	4
  2637  0CD8  0226               	subwf	merge@col,w
  2638  0CD9  1803               	btfsc	3,0
  2639  0CDA  2D0D               	goto	l3701
  2640  0CDB                     l3693:	
  2641                           
  2642                           ;teris_16f886.c: 1019: {
  2643                           ;teris_16f886.c: 1020: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  2644  0CDB  0821               	movf	merge@matrix4x4,w
  2645  0CDC  00F7               	movwf	get_matrix_bit@byte
  2646  0CDD  0822               	movf	merge@matrix4x4+1,w
  2647  0CDE  00F8               	movwf	get_matrix_bit@byte+1
  2648  0CDF  0825               	movf	merge@row,w
  2649  0CE0  00FC               	movwf	??_merge
  2650  0CE1  087C               	movf	??_merge,w
  2651  0CE2  00F9               	movwf	get_matrix_bit@row
  2652  0CE3  0826               	movf	merge@col,w
  2653  0CE4  00FD               	movwf	??_merge+1
  2654  0CE5  087D               	movf	??_merge+1,w
  2655  0CE6  00FA               	movwf	get_matrix_bit@col
  2656  0CE7  160A  118A  278D  120A  158A  	fcall	_get_matrix_bit
  2657  0CEC  3A01               	xorlw	1
  2658  0CED  1D03               	skipz
  2659  0CEE  2D03               	goto	l3697
  2660                           
  2661                           ;teris_16f886.c: 1021: {
  2662                           ;teris_16f886.c: 1022: set_matrix_bit(matrix16x8->row, y + row, x + col, 1);
  2663  0CEF  1283               	bcf	3,5	;RP0=0, select bank0
  2664  0CF0  1303               	bcf	3,6	;RP1=0, select bank0
  2665  0CF1  0825               	movf	merge@row,w
  2666  0CF2  0720               	addwf	merge@y,w
  2667  0CF3  00FC               	movwf	??_merge
  2668  0CF4  087C               	movf	??_merge,w
  2669  0CF5  00F5               	movwf	set_matrix_bit@row
  2670  0CF6  0826               	movf	merge@col,w
  2671  0CF7  0724               	addwf	merge@x,w
  2672  0CF8  00FD               	movwf	??_merge+1
  2673  0CF9  087D               	movf	??_merge+1,w
  2674  0CFA  00F6               	movwf	set_matrix_bit@col
  2675  0CFB  01F7               	clrf	set_matrix_bit@value
  2676  0CFC  0AF7               	incf	set_matrix_bit@value,f
  2677  0CFD  0823               	movf	merge@matrix16x8,w
  2678  0CFE  160A  118A  279C  120A  158A  	fcall	_set_matrix_bit
  2679  0D03                     l3697:	
  2680  0D03  3001               	movlw	1
  2681  0D04  00FC               	movwf	??_merge
  2682  0D05  087C               	movf	??_merge,w
  2683  0D06  1283               	bcf	3,5	;RP0=0, select bank0
  2684  0D07  1303               	bcf	3,6	;RP1=0, select bank0
  2685  0D08  07A6               	addwf	merge@col,f
  2686  0D09  3004               	movlw	4
  2687  0D0A  0226               	subwf	merge@col,w
  2688  0D0B  1C03               	skipc
  2689  0D0C  2CDB               	goto	l3693
  2690  0D0D                     l3701:	
  2691  0D0D  3001               	movlw	1
  2692  0D0E  00FC               	movwf	??_merge
  2693  0D0F  087C               	movf	??_merge,w
  2694  0D10  07A5               	addwf	merge@row,f
  2695  0D11  2CD2               	goto	L2
  2696  0D12                     __end_of_merge:	
  2697                           
  2698                           	psect	text8
  2699  0DA0                     __ptext8:	
  2700 ;; *************** function _max7219_init1 *****************
  2701 ;; Defined at:
  2702 ;;		line 579 in file "teris_16f886.c"
  2703 ;; Parameters:    Size  Location     Type
  2704 ;;		None
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;		None
  2707 ;; Return value:  Size  Location     Type
  2708 ;;                  1    wreg      void 
  2709 ;; Registers used:
  2710 ;;		wreg, status,2, status,0, pclath, cstack
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2716 ;;      Params:         0       0       0       0       0
  2717 ;;      Locals:         0       0       0       0       0
  2718 ;;      Temps:          3       0       0       0       0
  2719 ;;      Totals:         3       0       0       0       0
  2720 ;;Total ram usage:        3 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    2
  2723 ;; This function calls:
  2724 ;;		_Write_Word
  2725 ;; This function is called by:
  2726 ;;		_main
  2727 ;; This function uses a non-reentrant model
  2728 ;;
  2729                           
  2730                           
  2731                           ;psect for function _max7219_init1
  2732  0DA0                     _max7219_init1:	
  2733                           
  2734                           ;teris_16f886.c: 581: Write_Word(0x09, 0x00, 0x09, 0x00);
  2735                           
  2736                           ;incstack = 0
  2737                           ; Regs used in _max7219_init1: [wreg+status,2+status,0+pclath+cstack]
  2738  0DA0  01F4               	clrf	Write_Word@myValue1
  2739  0DA1  3009               	movlw	9
  2740  0DA2  00F8               	movwf	??_max7219_init1
  2741  0DA3  0878               	movf	??_max7219_init1,w
  2742  0DA4  00F5               	movwf	Write_Word@myColumn2
  2743  0DA5  01F6               	clrf	Write_Word@myValue2
  2744  0DA6  3009               	movlw	9
  2745  0DA7  120A  158A  21EC  120A  158A  	fcall	_Write_Word
  2746                           
  2747                           ;teris_16f886.c: 582: Write_Word(0x0A, 0x0F, 0x0A, 0x0F);
  2748  0DAC  300F               	movlw	15
  2749  0DAD  00F8               	movwf	??_max7219_init1
  2750  0DAE  0878               	movf	??_max7219_init1,w
  2751  0DAF  00F4               	movwf	Write_Word@myValue1
  2752  0DB0  300A               	movlw	10
  2753  0DB1  00F9               	movwf	??_max7219_init1+1
  2754  0DB2  0879               	movf	??_max7219_init1+1,w
  2755  0DB3  00F5               	movwf	Write_Word@myColumn2
  2756  0DB4  300F               	movlw	15
  2757  0DB5  00FA               	movwf	??_max7219_init1+2
  2758  0DB6  087A               	movf	??_max7219_init1+2,w
  2759  0DB7  00F6               	movwf	Write_Word@myValue2
  2760  0DB8  300A               	movlw	10
  2761  0DB9  120A  158A  21EC  120A  158A  	fcall	_Write_Word
  2762                           
  2763                           ;teris_16f886.c: 583: Write_Word(0x0B, 0x07, 0x0B, 0x07);
  2764  0DBE  3007               	movlw	7
  2765  0DBF  00F8               	movwf	??_max7219_init1
  2766  0DC0  0878               	movf	??_max7219_init1,w
  2767  0DC1  00F4               	movwf	Write_Word@myValue1
  2768  0DC2  300B               	movlw	11
  2769  0DC3  00F9               	movwf	??_max7219_init1+1
  2770  0DC4  0879               	movf	??_max7219_init1+1,w
  2771  0DC5  00F5               	movwf	Write_Word@myColumn2
  2772  0DC6  3007               	movlw	7
  2773  0DC7  00FA               	movwf	??_max7219_init1+2
  2774  0DC8  087A               	movf	??_max7219_init1+2,w
  2775  0DC9  00F6               	movwf	Write_Word@myValue2
  2776  0DCA  300B               	movlw	11
  2777  0DCB  120A  158A  21EC  120A  158A  	fcall	_Write_Word
  2778                           
  2779                           ;teris_16f886.c: 584: Write_Word(0x0C, 0x01, 0x0C, 0x01);
  2780  0DD0  01F4               	clrf	Write_Word@myValue1
  2781  0DD1  0AF4               	incf	Write_Word@myValue1,f
  2782  0DD2  300C               	movlw	12
  2783  0DD3  00F8               	movwf	??_max7219_init1
  2784  0DD4  0878               	movf	??_max7219_init1,w
  2785  0DD5  00F5               	movwf	Write_Word@myColumn2
  2786  0DD6  01F6               	clrf	Write_Word@myValue2
  2787  0DD7  0AF6               	incf	Write_Word@myValue2,f
  2788  0DD8  300C               	movlw	12
  2789  0DD9  120A  158A  21EC  120A  158A  	fcall	_Write_Word
  2790                           
  2791                           ;teris_16f886.c: 585: Write_Word(0x00, 0xFF, 0x00, 0xFF);
  2792  0DDE  30FF               	movlw	255
  2793  0DDF  00F8               	movwf	??_max7219_init1
  2794  0DE0  0878               	movf	??_max7219_init1,w
  2795  0DE1  00F4               	movwf	Write_Word@myValue1
  2796  0DE2  01F5               	clrf	Write_Word@myColumn2
  2797  0DE3  30FF               	movlw	255
  2798  0DE4  00F9               	movwf	??_max7219_init1+1
  2799  0DE5  0879               	movf	??_max7219_init1+1,w
  2800  0DE6  00F6               	movwf	Write_Word@myValue2
  2801  0DE7  3000               	movlw	0
  2802  0DE8  120A  158A  21EC   	fcall	_Write_Word
  2803  0DEB  0008               	return
  2804  0DEC                     __end_of_max7219_init1:	
  2805                           
  2806                           	psect	text9
  2807  0F96                     __ptext9:	
  2808 ;; *************** function _hit_land *****************
  2809 ;; Defined at:
  2810 ;;		line 841 in file "teris_16f886.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;  x               1    wreg     char 
  2813 ;;  y               1    0[BANK0 ] char 
  2814 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  2815 ;;		 -> NULL(0), g_matrix4x4(96), 
  2816 ;;  matrix16x8      1    3[BANK0 ] PTR const struct .
  2817 ;;		 -> g_matrix16x8(16), 
  2818 ;; Auto vars:     Size  Location     Type
  2819 ;;  x               1    4[BANK0 ] char 
  2820 ;;  col             1    5[BANK0 ] char 
  2821 ;;  row             1    6[BANK0 ] char 
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  1    wreg      unsigned char 
  2824 ;; Registers used:
  2825 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2831 ;;      Params:         0       4       0       0       0
  2832 ;;      Locals:         0       3       0       0       0
  2833 ;;      Temps:          2       0       0       0       0
  2834 ;;      Totals:         2       7       0       0       0
  2835 ;;Total ram usage:        9 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; Hardware stack levels required when called:    3
  2838 ;; This function calls:
  2839 ;;		_get_matrix_bit
  2840 ;; This function is called by:
  2841 ;;		_main
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           
  2846                           ;psect for function _hit_land
  2847  0F96                     _hit_land:	
  2848                           
  2849                           ;incstack = 0
  2850                           ; Regs used in _hit_land: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2851                           ;hit_land@x stored from wreg
  2852  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  2853  0F97  1303               	bcf	3,6	;RP1=0, select bank0
  2854  0F98  00A4               	movwf	hit_land@x
  2855                           
  2856                           ;teris_16f886.c: 847: for(int8_t row = 4 - 1; row >= 0; row--)
  2857  0F99  3003               	movlw	3
  2858  0F9A  00FC               	movwf	??_hit_land
  2859  0F9B  087C               	movf	??_hit_land,w
  2860  0F9C  00A6               	movwf	hit_land@row
  2861  0F9D  1BA6               	btfsc	hit_land@row,7
  2862  0F9E  2FFE               	goto	l3653
  2863  0F9F                     l3625:	
  2864                           
  2865                           ;teris_16f886.c: 848: {
  2866                           ;teris_16f886.c: 849: for(int8_t col = 0; col < 4; col++)
  2867  0F9F  01A5               	clrf	hit_land@col
  2868  0FA0  0825               	movf	hit_land@col,w
  2869  0FA1  3A80               	xorlw	128
  2870  0FA2  3E7C               	addlw	-132
  2871  0FA3  1803               	btfsc	3,0
  2872  0FA4  2FF8               	goto	l3649
  2873  0FA5                     l3631:	
  2874                           
  2875                           ;teris_16f886.c: 850: {
  2876                           ;teris_16f886.c: 851: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  2877  0FA5  0821               	movf	hit_land@matrix4x4,w
  2878  0FA6  00F7               	movwf	get_matrix_bit@byte
  2879  0FA7  0822               	movf	hit_land@matrix4x4+1,w
  2880  0FA8  00F8               	movwf	get_matrix_bit@byte+1
  2881  0FA9  0826               	movf	hit_land@row,w
  2882  0FAA  00FC               	movwf	??_hit_land
  2883  0FAB  087C               	movf	??_hit_land,w
  2884  0FAC  00F9               	movwf	get_matrix_bit@row
  2885  0FAD  0825               	movf	hit_land@col,w
  2886  0FAE  00FD               	movwf	??_hit_land+1
  2887  0FAF  087D               	movf	??_hit_land+1,w
  2888  0FB0  00FA               	movwf	get_matrix_bit@col
  2889  0FB1  160A  118A  278D  120A  158A  	fcall	_get_matrix_bit
  2890  0FB6  3A01               	xorlw	1
  2891  0FB7  1D03               	skipz
  2892  0FB8  2FED               	goto	l3645
  2893                           
  2894                           ;teris_16f886.c: 852: {
  2895                           ;teris_16f886.c: 853: if((y + row) >= (16 - 1))
  2896  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  2897  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  2898  0FBB  0820               	movf	hit_land@y,w
  2899  0FBC  0726               	addwf	hit_land@row,w
  2900  0FBD  00FC               	movwf	??_hit_land
  2901  0FBE  01FD               	clrf	??_hit_land+1
  2902  0FBF  1803               	skipnc
  2903  0FC0  0AFD               	incf	??_hit_land+1,f
  2904  0FC1  1BA0               	btfsc	hit_land@y,7
  2905  0FC2  03FD               	decf	??_hit_land+1,f
  2906  0FC3  1BA6               	btfsc	hit_land@row,7
  2907  0FC4  03FD               	decf	??_hit_land+1,f
  2908  0FC5  087D               	movf	??_hit_land+1,w
  2909  0FC6  3A80               	xorlw	128
  2910  0FC7  00FF               	movwf	127
  2911  0FC8  3080               	movlw	128
  2912  0FC9  027F               	subwf	127,w
  2913  0FCA  1D03               	skipz
  2914  0FCB  2FCE               	goto	u3935
  2915  0FCC  300F               	movlw	15
  2916  0FCD  027C               	subwf	??_hit_land,w
  2917  0FCE                     u3935:	
  2918  0FCE  1C03               	skipc
  2919  0FCF  2FD2               	goto	l3639
  2920                           
  2921                           ;teris_16f886.c: 854: {
  2922                           ;teris_16f886.c: 858: return 1;
  2923  0FD0  3001               	movlw	1
  2924  0FD1  0008               	return
  2925  0FD2                     l3639:	
  2926                           
  2927                           ;teris_16f886.c: 859: }
  2928                           ;teris_16f886.c: 861: if(get_matrix_bit(matrix16x8->row, y + row + 1, x + col) == 1)
  2929  0FD2  1283               	bcf	3,5	;RP0=0, select bank0
  2930  0FD3  1303               	bcf	3,6	;RP1=0, select bank0
  2931  0FD4  0823               	movf	hit_land@matrix16x8,w
  2932  0FD5  00F7               	movwf	get_matrix_bit@byte
  2933  0FD6  3000               	movlw	0
  2934  0FD7  00F8               	movwf	get_matrix_bit@byte+1
  2935  0FD8  0826               	movf	hit_land@row,w
  2936  0FD9  0720               	addwf	hit_land@y,w
  2937  0FDA  3E01               	addlw	1
  2938  0FDB  00FC               	movwf	??_hit_land
  2939  0FDC  087C               	movf	??_hit_land,w
  2940  0FDD  00F9               	movwf	get_matrix_bit@row
  2941  0FDE  0825               	movf	hit_land@col,w
  2942  0FDF  0724               	addwf	hit_land@x,w
  2943  0FE0  00FD               	movwf	??_hit_land+1
  2944  0FE1  087D               	movf	??_hit_land+1,w
  2945  0FE2  00FA               	movwf	get_matrix_bit@col
  2946  0FE3  160A  118A  278D  120A  158A  	fcall	_get_matrix_bit
  2947  0FE8  3A01               	xorlw	1
  2948  0FE9  1D03               	skipz
  2949  0FEA  2FED               	goto	l3645
  2950                           
  2951                           ;teris_16f886.c: 862: {
  2952                           ;teris_16f886.c: 866: return 1;
  2953  0FEB  3001               	movlw	1
  2954  0FEC  0008               	return
  2955  0FED                     l3645:	
  2956  0FED  3001               	movlw	1
  2957  0FEE  00FC               	movwf	??_hit_land
  2958  0FEF  087C               	movf	??_hit_land,w
  2959  0FF0  1283               	bcf	3,5	;RP0=0, select bank0
  2960  0FF1  1303               	bcf	3,6	;RP1=0, select bank0
  2961  0FF2  07A5               	addwf	hit_land@col,f
  2962  0FF3  0825               	movf	hit_land@col,w
  2963  0FF4  3A80               	xorlw	128
  2964  0FF5  3E7C               	addlw	-132
  2965  0FF6  1C03               	skipc
  2966  0FF7  2FA5               	goto	l3631
  2967  0FF8                     l3649:	
  2968  0FF8  30FF               	movlw	255
  2969  0FF9  00FC               	movwf	??_hit_land
  2970  0FFA  087C               	movf	??_hit_land,w
  2971  0FFB  07A6               	addwf	hit_land@row,f
  2972  0FFC  1FA6               	btfss	hit_land@row,7
  2973  0FFD  2F9F               	goto	l3625
  2974  0FFE                     l3653:	
  2975                           
  2976                           ;teris_16f886.c: 867: }
  2977                           ;teris_16f886.c: 868: }
  2978                           ;teris_16f886.c: 869: }
  2979                           ;teris_16f886.c: 870: }
  2980                           ;teris_16f886.c: 874: return 0;
  2981  0FFE  3000               	movlw	0
  2982  0FFF  0008               	return
  2983  1000                     __end_of_hit_land:	
  2984                           
  2985                           	psect	text10
  2986  05AB                     __ptext10:	
  2987 ;; *************** function _find_best_solution *****************
  2988 ;; Defined at:
  2989 ;;		line 1278 in file "teris_16f886.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;		None
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;  temp_x          1   47[BANK0 ] char 
  2994 ;;  tem_sub_inde    1   46[BANK0 ] unsigned char 
  2995 ;;  temp_high       2   43[BANK0 ] unsigned int 
  2996 ;;  temp_risk       2   40[BANK0 ] int 
  2997 ;;  temp_pre_ris    2   34[BANK0 ] int 
  2998 ;;  temp_y          1   45[BANK0 ] char 
  2999 ;;  res             1   42[BANK0 ] unsigned char 
  3000 ;;  tem_pre_sub_    1   39[BANK0 ] char 
  3001 ;;  temp_pre_x      1   38[BANK0 ] char 
  3002 ;;  right_most_i    1   37[BANK0 ] char 
  3003 ;;  left_most_in    1   36[BANK0 ] char 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      unsigned char 
  3006 ;; Registers used:
  3007 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3013 ;;      Params:         0       0       0       0       0
  3014 ;;      Locals:         0      14       0       0       0
  3015 ;;      Temps:          0      18       0       0       0
  3016 ;;      Totals:         0      32       0       0       0
  3017 ;;Total ram usage:       32 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    5
  3020 ;; This function calls:
  3021 ;;		___wmul
  3022 ;;		_fall_off
  3023 ;;		_get_heavy
  3024 ;;		_get_high
  3025 ;;		_get_high_after_merge
  3026 ;;		_get_holes_after_merge
  3027 ;;		_get_num_of_orphan
  3028 ;;		_get_num_removed_rows
  3029 ;;		_is_valid
  3030 ;;		_left_most
  3031 ;;		_merge1
  3032 ;;		_right_most
  3033 ;; This function is called by:
  3034 ;;		_main
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           
  3039                           ;psect for function _find_best_solution
  3040  05AB                     _find_best_solution:	
  3041                           
  3042                           ;teris_16f886.c: 1284: uint8_t res = 0;
  3043                           
  3044                           ;incstack = 0
  3045                           ; Regs used in _find_best_solution: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3046  05AB  1283               	bcf	3,5	;RP0=0, select bank0
  3047  05AC  1303               	bcf	3,6	;RP1=0, select bank0
  3048  05AD  01CA               	clrf	find_best_solution@res
  3049                           
  3050                           ;teris_16f886.c: 1285: int8_t left_most_index, right_most_index;
  3051                           ;teris_16f886.c: 1287: int8_t temp_pre_x = 0xF, tem_pre_sub_index = 0xF;
  3052  05AE  300F               	movlw	15
  3053  05AF  00B0               	movwf	??_find_best_solution
  3054  05B0  0830               	movf	??_find_best_solution,w
  3055  05B1  00C6               	movwf	find_best_solution@temp_pre_x
  3056  05B2  300F               	movlw	15
  3057  05B3  00B0               	movwf	??_find_best_solution
  3058  05B4  0830               	movf	??_find_best_solution,w
  3059  05B5  00C7               	movwf	find_best_solution@tem_pre_sub_index
  3060                           
  3061                           ;teris_16f886.c: 1288: int16_t temp_pre_risk = -30000;
  3062  05B6  30D0               	movlw	208
  3063  05B7  00C2               	movwf	find_best_solution@temp_pre_risk
  3064  05B8  308A               	movlw	138
  3065  05B9  00C3               	movwf	find_best_solution@temp_pre_risk+1
  3066                           
  3067                           ;teris_16f886.c: 1289: int8_t temp_y;
  3068                           ;teris_16f886.c: 1290: int16_t temp_risk;
  3069                           ;teris_16f886.c: 1291: uint16_t temp_high;
  3070                           ;teris_16f886.c: 1294: for(uint8_t tem_sub_index = 0; tem_sub_index < g_char_info[g_char
      +                          _info_index].num; tem_sub_index++)
  3071  05BA  01CE               	clrf	find_best_solution@tem_sub_index
  3072  05BB                     l3751:	
  3073  05BB  1403               	setc
  3074  05BC  0D65               	rlf	_g_char_info_index,w
  3075  05BD  3E12               	addlw	low (_g_char_info| (0+32768))
  3076  05BE  0084               	movwf	4
  3077  05BF  3088               	movlw	high (_g_char_info| (0+32768))
  3078  05C0  1803               	skipnc
  3079  05C1  3E01               	addlw	1
  3080  05C2  00FF               	movwf	127
  3081  05C3  120A  158A  2000  120A  118A  	fcall	stringtab
  3082  05C8  024E               	subwf	find_best_solution@tem_sub_index,w
  3083  05C9  1803               	btfsc	3,0
  3084  05CA  2FBC               	goto	l3753
  3085                           
  3086                           ;teris_16f886.c: 1295: {
  3087                           ;teris_16f886.c: 1296: temp_cur_matrix4x4 = &g_matrix4x4[g_char_info[g_char_info_index].
      +                          start_index + tem_sub_index];
  3088  05CB  0865               	movf	_g_char_info_index,w
  3089  05CC  00B0               	movwf	??_find_best_solution
  3090  05CD  0730               	addwf	??_find_best_solution,w
  3091  05CE  3E12               	addlw	low (_g_char_info| (0+32768))
  3092  05CF  0084               	movwf	4
  3093  05D0  3088               	movlw	high (_g_char_info| (0+32768))
  3094  05D1  1803               	skipnc
  3095  05D2  3E01               	addlw	1
  3096  05D3  00FF               	movwf	127
  3097  05D4  120A  158A  2000  120A  118A  	fcall	stringtab
  3098  05D9  074E               	addwf	find_best_solution@tem_sub_index,w
  3099  05DA  00B1               	movwf	??_find_best_solution+1
  3100  05DB  3001               	movlw	1
  3101  05DC                     u4075:	
  3102  05DC  1003               	clrc
  3103  05DD  0DB1               	rlf	??_find_best_solution+1,f
  3104  05DE  3EFF               	addlw	-1
  3105  05DF  1D03               	skipz
  3106  05E0  2DDC               	goto	u4075
  3107  05E1  1003               	clrc
  3108  05E2  0D31               	rlf	??_find_best_solution+1,w
  3109  05E3  3E42               	addlw	low (_g_matrix4x4| (0+32768))
  3110  05E4  00B2               	movwf	??_find_best_solution+2
  3111  05E5  3088               	movlw	high (_g_matrix4x4| (0+32768))
  3112  05E6  1803               	skipnc
  3113  05E7  3E01               	addlw	1
  3114  05E8  00B3               	movwf	??_find_best_solution+3
  3115  05E9  0832               	movf	??_find_best_solution+2,w
  3116  05EA  00E2               	movwf	_temp_cur_matrix4x4
  3117  05EB  0833               	movf	??_find_best_solution+3,w
  3118  05EC  00E3               	movwf	_temp_cur_matrix4x4+1
  3119                           
  3120                           ;teris_16f886.c: 1297: left_most_index = left_most(cur_x, temp_cur_matrix4x4, &g_matrix1
      +                          6x8);
  3121  05ED  0862               	movf	_temp_cur_matrix4x4,w
  3122  05EE  00AB               	movwf	left_most@matrix4x4
  3123  05EF  0863               	movf	_temp_cur_matrix4x4+1,w
  3124  05F0  00AC               	movwf	left_most@matrix4x4+1
  3125  05F1  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3126  05F2  00B0               	movwf	??_find_best_solution
  3127  05F3  0830               	movf	??_find_best_solution,w
  3128  05F4  00AD               	movwf	left_most@matrix16x8
  3129  05F5  086C               	movf	_cur_x,w
  3130  05F6  120A  158A  222C  120A  118A  	fcall	_left_most
  3131  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  3132  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  3133  05FD  00B1               	movwf	??_find_best_solution+1
  3134  05FE  0831               	movf	??_find_best_solution+1,w
  3135  05FF  00C4               	movwf	find_best_solution@left_most_index
  3136                           
  3137                           ;teris_16f886.c: 1298: right_most_index = right_most(cur_x, temp_cur_matrix4x4, &g_matri
      +                          x16x8);
  3138  0600  0862               	movf	_temp_cur_matrix4x4,w
  3139  0601  00A6               	movwf	right_most@matrix4x4
  3140  0602  0863               	movf	_temp_cur_matrix4x4+1,w
  3141  0603  00A7               	movwf	right_most@matrix4x4+1
  3142  0604  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3143  0605  00B0               	movwf	??_find_best_solution
  3144  0606  0830               	movf	??_find_best_solution,w
  3145  0607  00A8               	movwf	right_most@matrix16x8
  3146  0608  086C               	movf	_cur_x,w
  3147  0609  120A  158A  232A  120A  118A  	fcall	_right_most
  3148  060E  1283               	bcf	3,5	;RP0=0, select bank0
  3149  060F  1303               	bcf	3,6	;RP1=0, select bank0
  3150  0610  00B1               	movwf	??_find_best_solution+1
  3151  0611  0831               	movf	??_find_best_solution+1,w
  3152  0612  00C5               	movwf	find_best_solution@right_most_index
  3153                           
  3154                           ;teris_16f886.c: 1300: for(int8_t temp_x = left_most_index; temp_x <= right_most_index; 
      +                          temp_x++)
  3155  0613  0844               	movf	find_best_solution@left_most_index,w
  3156  0614  00B0               	movwf	??_find_best_solution
  3157  0615  0830               	movf	??_find_best_solution,w
  3158  0616  00CF               	movwf	find_best_solution@temp_x
  3159  0617                     l3747:	
  3160  0617  0845               	movf	find_best_solution@right_most_index,w
  3161  0618  3A80               	xorlw	128
  3162  0619  00B0               	movwf	??_find_best_solution
  3163  061A  084F               	movf	find_best_solution@temp_x,w
  3164  061B  3A80               	xorlw	128
  3165  061C  02B0               	subwf	??_find_best_solution,f
  3166  061D  1C03               	btfss	3,0
  3167  061E  2FB7               	goto	l3749
  3168                           
  3169                           ;teris_16f886.c: 1301: {
  3170                           ;teris_16f886.c: 1302: temp_y = fall_off(temp_x, cur_y, temp_cur_matrix4x4, &g_matrix16x
      +                          8);
  3171  061F  0864               	movf	_cur_y,w
  3172  0620  00B0               	movwf	??_find_best_solution
  3173  0621  0830               	movf	??_find_best_solution,w
  3174  0622  00A0               	movwf	fall_off@y
  3175  0623  0862               	movf	_temp_cur_matrix4x4,w
  3176  0624  00A1               	movwf	fall_off@matrix4x4
  3177  0625  0863               	movf	_temp_cur_matrix4x4+1,w
  3178  0626  00A2               	movwf	fall_off@matrix4x4+1
  3179  0627  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3180  0628  00B1               	movwf	??_find_best_solution+1
  3181  0629  0831               	movf	??_find_best_solution+1,w
  3182  062A  00A3               	movwf	fall_off@matrix16x8
  3183  062B  084F               	movf	find_best_solution@temp_x,w
  3184  062C  120A  118A  20DD  120A  118A  	fcall	_fall_off
  3185  0631  1283               	bcf	3,5	;RP0=0, select bank0
  3186  0632  1303               	bcf	3,6	;RP1=0, select bank0
  3187  0633  00B2               	movwf	??_find_best_solution+2
  3188  0634  0832               	movf	??_find_best_solution+2,w
  3189  0635  00CD               	movwf	find_best_solution@temp_y
  3190                           
  3191                           ;teris_16f886.c: 1309: if(is_valid(temp_x, temp_y, temp_cur_matrix4x4, &g_matrix16x8) ==
      +                           0)
  3192  0636  084D               	movf	find_best_solution@temp_y,w
  3193  0637  00B0               	movwf	??_find_best_solution
  3194  0638  0830               	movf	??_find_best_solution,w
  3195  0639  00A0               	movwf	is_valid@y
  3196  063A  0862               	movf	_temp_cur_matrix4x4,w
  3197  063B  00A1               	movwf	is_valid@matrix4x4
  3198  063C  0863               	movf	_temp_cur_matrix4x4+1,w
  3199  063D  00A2               	movwf	is_valid@matrix4x4+1
  3200  063E  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3201  063F  00B1               	movwf	??_find_best_solution+1
  3202  0640  0831               	movf	??_find_best_solution+1,w
  3203  0641  00A3               	movwf	is_valid@matrix16x8
  3204  0642  084F               	movf	find_best_solution@temp_x,w
  3205  0643  120A  118A  2264  120A  118A  	fcall	_is_valid
  3206  0648  3A00               	xorlw	0
  3207  0649  1903               	btfsc	3,2
  3208  064A  2FB0               	goto	l3745
  3209                           
  3210                           ;teris_16f886.c: 1312: }
  3211                           ;teris_16f886.c: 1313: res = 1;
  3212                           
  3213                           ;teris_16f886.c: 1310: {
  3214                           ;teris_16f886.c: 1311: continue;
  3215  064B  1283               	bcf	3,5	;RP0=0, select bank0
  3216  064C  1303               	bcf	3,6	;RP1=0, select bank0
  3217  064D  01CA               	clrf	find_best_solution@res
  3218  064E  0ACA               	incf	find_best_solution@res,f
  3219                           
  3220                           ;teris_16f886.c: 1314: merge1(temp_x, temp_y, temp_cur_matrix4x4, &g_matrix16x8, &temp_m
      +                          atrix16x8);
  3221  064F  084D               	movf	find_best_solution@temp_y,w
  3222  0650  00B0               	movwf	??_find_best_solution
  3223  0651  0830               	movf	??_find_best_solution,w
  3224  0652  00A0               	movwf	merge1@y
  3225  0653  0862               	movf	_temp_cur_matrix4x4,w
  3226  0654  00A1               	movwf	merge1@matrix4x4
  3227  0655  0863               	movf	_temp_cur_matrix4x4+1,w
  3228  0656  00A2               	movwf	merge1@matrix4x4+1
  3229  0657  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3230  0658  00B1               	movwf	??_find_best_solution+1
  3231  0659  0831               	movf	??_find_best_solution+1,w
  3232  065A  00A3               	movwf	merge1@matrix16x8_in
  3233  065B  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3234  065C  00B2               	movwf	??_find_best_solution+2
  3235  065D  0832               	movf	??_find_best_solution+2,w
  3236  065E  00A4               	movwf	merge1@matrix16x8_out
  3237  065F  084F               	movf	find_best_solution@temp_x,w
  3238  0660  120A  158A  26D5  120A  118A  	fcall	_merge1
  3239                           
  3240                           ;teris_16f886.c: 1315: temp_high = get_high_after_merge(temp_y, temp_cur_matrix4x4);
  3241  0665  1283               	bcf	3,5	;RP0=0, select bank0
  3242  0666  1303               	bcf	3,6	;RP1=0, select bank0
  3243  0667  0862               	movf	_temp_cur_matrix4x4,w
  3244  0668  00FC               	movwf	get_high_after_merge@matrix
  3245  0669  0863               	movf	_temp_cur_matrix4x4+1,w
  3246  066A  00FD               	movwf	get_high_after_merge@matrix+1
  3247  066B  084D               	movf	find_best_solution@temp_y,w
  3248  066C  120A  158A  2411  120A  118A  	fcall	_get_high_after_merge
  3249  0671  1283               	bcf	3,5	;RP0=0, select bank0
  3250  0672  1303               	bcf	3,6	;RP1=0, select bank0
  3251  0673  00B0               	movwf	??_find_best_solution
  3252  0674  01B1               	clrf	??_find_best_solution+1
  3253  0675  0830               	movf	??_find_best_solution,w
  3254  0676  00CB               	movwf	find_best_solution@temp_high
  3255  0677  0831               	movf	??_find_best_solution+1,w
  3256  0678  00CC               	movwf	find_best_solution@temp_high+1
  3257                           
  3258                           ;teris_16f886.c: 1316: if((get_high(&g_matrix16x8) <= 16/2 + 1)
  3259                           ;teris_16f886.c: 1317: && (temp_high <= 16/2 + 1))
  3260  0679  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  3261  067A  120A  158A  220A  120A  118A  	fcall	_get_high
  3262  067F  1283               	bcf	3,5	;RP0=0, select bank0
  3263  0680  1303               	bcf	3,6	;RP1=0, select bank0
  3264  0681  00B0               	movwf	??_find_best_solution
  3265  0682  300A               	movlw	10
  3266  0683  0230               	subwf	??_find_best_solution,w
  3267  0684  1803               	skipnc
  3268  0685  2F0C               	goto	l3739
  3269  0686  3000               	movlw	0
  3270  0687  024C               	subwf	find_best_solution@temp_high+1,w
  3271  0688  300A               	movlw	10
  3272  0689  1903               	skipnz
  3273  068A  024B               	subwf	find_best_solution@temp_high,w
  3274  068B  1803               	skipnc
  3275  068C  2F0C               	goto	l3739
  3276                           
  3277                           ;teris_16f886.c: 1318: {
  3278                           ;teris_16f886.c: 1319: temp_risk = (((int16_t)get_num_removed_rows(&temp_matrix16x8)) <<
      +                           10)
  3279                           ;teris_16f886.c: 1320: - get_num_of_orphan(&temp_matrix16x8)*4
  3280                           ;teris_16f886.c: 1321: - temp_high*3
  3281                           ;teris_16f886.c: 1322: - get_holes_after_merge(&temp_matrix16x8)*2
  3282                           ;teris_16f886.c: 1323: - get_heavy(&temp_matrix16x8);
  3283  068D  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3284  068E  120A  118A  2154  120A  118A  	fcall	_get_heavy
  3285  0693  097C               	comf	?_get_heavy,w
  3286  0694  1283               	bcf	3,5	;RP0=0, select bank0
  3287  0695  1303               	bcf	3,6	;RP1=0, select bank0
  3288  0696  00B0               	movwf	??_find_best_solution
  3289  0697  097D               	comf	?_get_heavy+1,w
  3290  0698  00B1               	movwf	??_find_best_solution+1
  3291  0699  0AB0               	incf	??_find_best_solution,f
  3292  069A  1903               	skipnz
  3293  069B  0AB1               	incf	??_find_best_solution+1,f
  3294  069C  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3295  069D  120A  118A  2387  120A  118A  	fcall	_get_holes_after_merge
  3296  06A2  1283               	bcf	3,5	;RP0=0, select bank0
  3297  06A3  1303               	bcf	3,6	;RP1=0, select bank0
  3298  06A4  00B2               	movwf	??_find_best_solution+2
  3299  06A5  01B3               	clrf	??_find_best_solution+3
  3300  06A6  1003               	clrc
  3301  06A7  0DB2               	rlf	??_find_best_solution+2,f
  3302  06A8  0DB3               	rlf	??_find_best_solution+3,f
  3303  06A9  09B2               	comf	??_find_best_solution+2,f
  3304  06AA  09B3               	comf	??_find_best_solution+3,f
  3305  06AB  0AB2               	incf	??_find_best_solution+2,f
  3306  06AC  1903               	skipnz
  3307  06AD  0AB3               	incf	??_find_best_solution+3,f
  3308  06AE  084C               	movf	find_best_solution@temp_high+1,w
  3309  06AF  00AD               	movwf	___wmul@multiplier+1
  3310  06B0  084B               	movf	find_best_solution@temp_high,w
  3311  06B1  00AC               	movwf	___wmul@multiplier
  3312  06B2  3003               	movlw	3
  3313  06B3  00AE               	movwf	___wmul@multiplicand
  3314  06B4  3000               	movlw	0
  3315  06B5  00AF               	movwf	___wmul@multiplicand+1
  3316  06B6  120A  158A  224E  120A  118A  	fcall	___wmul
  3317  06BB  1283               	bcf	3,5	;RP0=0, select bank0
  3318  06BC  1303               	bcf	3,6	;RP1=0, select bank0
  3319  06BD  092C               	comf	?___wmul,w
  3320  06BE  00B4               	movwf	??_find_best_solution+4
  3321  06BF  092D               	comf	?___wmul+1,w
  3322  06C0  00B5               	movwf	??_find_best_solution+5
  3323  06C1  0AB4               	incf	??_find_best_solution+4,f
  3324  06C2  1903               	skipnz
  3325  06C3  0AB5               	incf	??_find_best_solution+5,f
  3326  06C4  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3327  06C5  120A  118A  2005  120A  118A  	fcall	_get_num_of_orphan
  3328  06CA  087C               	movf	?_get_num_of_orphan,w
  3329  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  3330  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  3331  06CD  00B6               	movwf	??_find_best_solution+6
  3332  06CE  087D               	movf	?_get_num_of_orphan+1,w
  3333  06CF  00B7               	movwf	??_find_best_solution+7
  3334  06D0  1003               	clrc
  3335  06D1  0DB6               	rlf	??_find_best_solution+6,f
  3336  06D2  0DB7               	rlf	??_find_best_solution+7,f
  3337  06D3  1003               	clrc
  3338  06D4  0DB6               	rlf	??_find_best_solution+6,f
  3339  06D5  0DB7               	rlf	??_find_best_solution+7,f
  3340  06D6  09B6               	comf	??_find_best_solution+6,f
  3341  06D7  09B7               	comf	??_find_best_solution+7,f
  3342  06D8  0AB6               	incf	??_find_best_solution+6,f
  3343  06D9  1903               	skipnz
  3344  06DA  0AB7               	incf	??_find_best_solution+7,f
  3345  06DB  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3346  06DC  120A  158A  2295  120A  118A  	fcall	_get_num_removed_rows
  3347  06E1  1283               	bcf	3,5	;RP0=0, select bank0
  3348  06E2  1303               	bcf	3,6	;RP1=0, select bank0
  3349  06E3  00B8               	movwf	??_find_best_solution+8
  3350  06E4  01B9               	clrf	??_find_best_solution+9
  3351  06E5  300A               	movlw	10
  3352  06E6  00FF               	movwf	127
  3353  06E7                     u4115:	
  3354  06E7  1003               	clrc
  3355  06E8  0DB8               	rlf	??_find_best_solution+8,f
  3356  06E9  0DB9               	rlf	??_find_best_solution+9,f
  3357  06EA  0BFF               	decfsz	127,f
  3358  06EB  2EE7               	goto	u4115
  3359  06EC  0836               	movf	??_find_best_solution+6,w
  3360  06ED  0738               	addwf	??_find_best_solution+8,w
  3361  06EE  00BA               	movwf	??_find_best_solution+10
  3362  06EF  0837               	movf	??_find_best_solution+7,w
  3363  06F0  1803               	skipnc
  3364  06F1  0A37               	incf	??_find_best_solution+7,w
  3365  06F2  0739               	addwf	??_find_best_solution+9,w
  3366  06F3  00BB               	movwf	??_find_best_solution+11
  3367  06F4  0834               	movf	??_find_best_solution+4,w
  3368  06F5  073A               	addwf	??_find_best_solution+10,w
  3369  06F6  00BC               	movwf	??_find_best_solution+12
  3370  06F7  0835               	movf	??_find_best_solution+5,w
  3371  06F8  1803               	skipnc
  3372  06F9  0A35               	incf	??_find_best_solution+5,w
  3373  06FA  073B               	addwf	??_find_best_solution+11,w
  3374  06FB  00BD               	movwf	??_find_best_solution+13
  3375  06FC  0832               	movf	??_find_best_solution+2,w
  3376  06FD  073C               	addwf	??_find_best_solution+12,w
  3377  06FE  00BE               	movwf	??_find_best_solution+14
  3378  06FF  0833               	movf	??_find_best_solution+3,w
  3379  0700  1803               	skipnc
  3380  0701  0A33               	incf	??_find_best_solution+3,w
  3381  0702  073D               	addwf	??_find_best_solution+13,w
  3382  0703  00BF               	movwf	??_find_best_solution+15
  3383  0704  0830               	movf	??_find_best_solution,w
  3384  0705  073E               	addwf	??_find_best_solution+14,w
  3385  0706  00C8               	movwf	find_best_solution@temp_risk
  3386  0707  0831               	movf	??_find_best_solution+1,w
  3387  0708  1803               	skipnc
  3388  0709  0A31               	incf	??_find_best_solution+1,w
  3389  070A  073F               	addwf	??_find_best_solution+15,w
  3390  070B  2F95               	goto	L3
  3391  070C                     l3739:	
  3392                           ;teris_16f886.c: 1324: }
  3393                           
  3394                           
  3395                           ;teris_16f886.c: 1325: else
  3396                           ;teris_16f886.c: 1326: {
  3397                           ;teris_16f886.c: 1327: temp_risk = (((int16_t)get_num_removed_rows(&temp_matrix16x8)) <<
      +                           10)
  3398                           ;teris_16f886.c: 1328: - get_num_of_orphan(&temp_matrix16x8)*2
  3399                           ;teris_16f886.c: 1329: - temp_high*5
  3400                           ;teris_16f886.c: 1330: - get_holes_after_merge(&temp_matrix16x8)*3
  3401                           ;teris_16f886.c: 1331: - get_heavy(&temp_matrix16x8);
  3402  070C  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3403  070D  120A  118A  2154  120A  118A  	fcall	_get_heavy
  3404  0712  097C               	comf	?_get_heavy,w
  3405  0713  1283               	bcf	3,5	;RP0=0, select bank0
  3406  0714  1303               	bcf	3,6	;RP1=0, select bank0
  3407  0715  00B0               	movwf	??_find_best_solution
  3408  0716  097D               	comf	?_get_heavy+1,w
  3409  0717  00B1               	movwf	??_find_best_solution+1
  3410  0718  0AB0               	incf	??_find_best_solution,f
  3411  0719  1903               	skipnz
  3412  071A  0AB1               	incf	??_find_best_solution+1,f
  3413  071B  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3414  071C  120A  118A  2387  120A  118A  	fcall	_get_holes_after_merge
  3415  0721  1283               	bcf	3,5	;RP0=0, select bank0
  3416  0722  1303               	bcf	3,6	;RP1=0, select bank0
  3417  0723  00B2               	movwf	??_find_best_solution+2
  3418  0724  01B3               	clrf	??_find_best_solution+3
  3419  0725  0832               	movf	??_find_best_solution+2,w
  3420  0726  00AC               	movwf	___wmul@multiplier
  3421  0727  0833               	movf	??_find_best_solution+3,w
  3422  0728  00AD               	movwf	___wmul@multiplier+1
  3423  0729  3003               	movlw	3
  3424  072A  00AE               	movwf	___wmul@multiplicand
  3425  072B  3000               	movlw	0
  3426  072C  00AF               	movwf	___wmul@multiplicand+1
  3427  072D  120A  158A  224E  120A  118A  	fcall	___wmul
  3428  0732  1283               	bcf	3,5	;RP0=0, select bank0
  3429  0733  1303               	bcf	3,6	;RP1=0, select bank0
  3430  0734  092C               	comf	?___wmul,w
  3431  0735  00B4               	movwf	??_find_best_solution+4
  3432  0736  092D               	comf	?___wmul+1,w
  3433  0737  00B5               	movwf	??_find_best_solution+5
  3434  0738  0AB4               	incf	??_find_best_solution+4,f
  3435  0739  1903               	skipnz
  3436  073A  0AB5               	incf	??_find_best_solution+5,f
  3437  073B  084C               	movf	find_best_solution@temp_high+1,w
  3438  073C  00AD               	movwf	___wmul@multiplier+1
  3439  073D  084B               	movf	find_best_solution@temp_high,w
  3440  073E  00AC               	movwf	___wmul@multiplier
  3441  073F  3005               	movlw	5
  3442  0740  00AE               	movwf	___wmul@multiplicand
  3443  0741  3000               	movlw	0
  3444  0742  00AF               	movwf	___wmul@multiplicand+1
  3445  0743  120A  158A  224E  120A  118A  	fcall	___wmul
  3446  0748  1283               	bcf	3,5	;RP0=0, select bank0
  3447  0749  1303               	bcf	3,6	;RP1=0, select bank0
  3448  074A  092C               	comf	?___wmul,w
  3449  074B  00B6               	movwf	??_find_best_solution+6
  3450  074C  092D               	comf	?___wmul+1,w
  3451  074D  00B7               	movwf	??_find_best_solution+7
  3452  074E  0AB6               	incf	??_find_best_solution+6,f
  3453  074F  1903               	skipnz
  3454  0750  0AB7               	incf	??_find_best_solution+7,f
  3455  0751  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3456  0752  120A  118A  2005  120A  118A  	fcall	_get_num_of_orphan
  3457  0757  087C               	movf	?_get_num_of_orphan,w
  3458  0758  1283               	bcf	3,5	;RP0=0, select bank0
  3459  0759  1303               	bcf	3,6	;RP1=0, select bank0
  3460  075A  00B8               	movwf	??_find_best_solution+8
  3461  075B  087D               	movf	?_get_num_of_orphan+1,w
  3462  075C  00B9               	movwf	??_find_best_solution+9
  3463  075D  1003               	clrc
  3464  075E  0DB8               	rlf	??_find_best_solution+8,f
  3465  075F  0DB9               	rlf	??_find_best_solution+9,f
  3466  0760  09B8               	comf	??_find_best_solution+8,f
  3467  0761  09B9               	comf	??_find_best_solution+9,f
  3468  0762  0AB8               	incf	??_find_best_solution+8,f
  3469  0763  1903               	skipnz
  3470  0764  0AB9               	incf	??_find_best_solution+9,f
  3471  0765  30C0               	movlw	(low (_temp_matrix16x8| 0))& (0+255)
  3472  0766  120A  158A  2295  120A  118A  	fcall	_get_num_removed_rows
  3473  076B  1283               	bcf	3,5	;RP0=0, select bank0
  3474  076C  1303               	bcf	3,6	;RP1=0, select bank0
  3475  076D  00BA               	movwf	??_find_best_solution+10
  3476  076E  01BB               	clrf	??_find_best_solution+11
  3477  076F  300A               	movlw	10
  3478  0770  00FF               	movwf	127
  3479  0771                     u4125:	
  3480  0771  1003               	clrc
  3481  0772  0DBA               	rlf	??_find_best_solution+10,f
  3482  0773  0DBB               	rlf	??_find_best_solution+11,f
  3483  0774  0BFF               	decfsz	127,f
  3484  0775  2F71               	goto	u4125
  3485  0776  0838               	movf	??_find_best_solution+8,w
  3486  0777  073A               	addwf	??_find_best_solution+10,w
  3487  0778  00BC               	movwf	??_find_best_solution+12
  3488  0779  0839               	movf	??_find_best_solution+9,w
  3489  077A  1803               	skipnc
  3490  077B  0A39               	incf	??_find_best_solution+9,w
  3491  077C  073B               	addwf	??_find_best_solution+11,w
  3492  077D  00BD               	movwf	??_find_best_solution+13
  3493  077E  0836               	movf	??_find_best_solution+6,w
  3494  077F  073C               	addwf	??_find_best_solution+12,w
  3495  0780  00BE               	movwf	??_find_best_solution+14
  3496  0781  0837               	movf	??_find_best_solution+7,w
  3497  0782  1803               	skipnc
  3498  0783  0A37               	incf	??_find_best_solution+7,w
  3499  0784  073D               	addwf	??_find_best_solution+13,w
  3500  0785  00BF               	movwf	??_find_best_solution+15
  3501  0786  0834               	movf	??_find_best_solution+4,w
  3502  0787  073E               	addwf	??_find_best_solution+14,w
  3503  0788  00C0               	movwf	??_find_best_solution+16
  3504  0789  0835               	movf	??_find_best_solution+5,w
  3505  078A  1803               	skipnc
  3506  078B  0A35               	incf	??_find_best_solution+5,w
  3507  078C  073F               	addwf	??_find_best_solution+15,w
  3508  078D  00C1               	movwf	??_find_best_solution+17
  3509  078E  0830               	movf	??_find_best_solution,w
  3510  078F  0740               	addwf	??_find_best_solution+16,w
  3511  0790  00C8               	movwf	find_best_solution@temp_risk
  3512  0791  0831               	movf	??_find_best_solution+1,w
  3513  0792  1803               	skipnc
  3514  0793  0A31               	incf	??_find_best_solution+1,w
  3515  0794  0741               	addwf	??_find_best_solution+17,w
  3516  0795                     L3:	
  3517  0795  00C9               	movwf	find_best_solution@temp_risk+1
  3518                           
  3519                           ;teris_16f886.c: 1332: }
  3520                           ;teris_16f886.c: 1341: if(temp_risk > temp_pre_risk)
  3521  0796  0843               	movf	find_best_solution@temp_pre_risk+1,w
  3522  0797  3A80               	xorlw	128
  3523  0798  00B0               	movwf	??_find_best_solution
  3524  0799  0849               	movf	find_best_solution@temp_risk+1,w
  3525  079A  3A80               	xorlw	128
  3526  079B  0230               	subwf	??_find_best_solution,w
  3527  079C  1D03               	skipz
  3528  079D  2FA0               	goto	u4135
  3529  079E  0848               	movf	find_best_solution@temp_risk,w
  3530  079F  0242               	subwf	find_best_solution@temp_pre_risk,w
  3531  07A0                     u4135:	
  3532  07A0  1803               	skipnc
  3533  07A1  2FB0               	goto	l3745
  3534                           
  3535                           ;teris_16f886.c: 1342: {
  3536                           ;teris_16f886.c: 1346: temp_pre_risk = temp_risk;
  3537  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  3538  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  3539  07A4  0849               	movf	find_best_solution@temp_risk+1,w
  3540  07A5  00C3               	movwf	find_best_solution@temp_pre_risk+1
  3541  07A6  0848               	movf	find_best_solution@temp_risk,w
  3542  07A7  00C2               	movwf	find_best_solution@temp_pre_risk
  3543                           
  3544                           ;teris_16f886.c: 1347: tem_pre_sub_index = tem_sub_index;
  3545  07A8  084E               	movf	find_best_solution@tem_sub_index,w
  3546  07A9  00B0               	movwf	??_find_best_solution
  3547  07AA  0830               	movf	??_find_best_solution,w
  3548  07AB  00C7               	movwf	find_best_solution@tem_pre_sub_index
  3549                           
  3550                           ;teris_16f886.c: 1348: temp_pre_x = temp_x;
  3551  07AC  084F               	movf	find_best_solution@temp_x,w
  3552  07AD  00B0               	movwf	??_find_best_solution
  3553  07AE  0830               	movf	??_find_best_solution,w
  3554  07AF  00C6               	movwf	find_best_solution@temp_pre_x
  3555  07B0                     l3745:	
  3556  07B0  3001               	movlw	1
  3557  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  3558  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  3559  07B3  00B0               	movwf	??_find_best_solution
  3560  07B4  0830               	movf	??_find_best_solution,w
  3561  07B5  07CF               	addwf	find_best_solution@temp_x,f
  3562  07B6  2E17               	goto	l3747
  3563  07B7                     l3749:	
  3564  07B7  3001               	movlw	1
  3565  07B8  00B0               	movwf	??_find_best_solution
  3566  07B9  0830               	movf	??_find_best_solution,w
  3567  07BA  07CE               	addwf	find_best_solution@tem_sub_index,f
  3568  07BB  2DBB               	goto	l3751
  3569  07BC                     l3753:	
  3570                           
  3571                           ;teris_16f886.c: 1349: }
  3572                           ;teris_16f886.c: 1363: }
  3573                           ;teris_16f886.c: 1364: }
  3574                           ;teris_16f886.c: 1365: if(res == 1)
  3575  07BC  034A               	decf	find_best_solution@res,w
  3576  07BD  1D03               	btfss	3,2
  3577  07BE  2FC7               	goto	l3757
  3578                           
  3579                           ;teris_16f886.c: 1366: {
  3580                           ;teris_16f886.c: 1367: g_char_info_sub_index = tem_pre_sub_index;
  3581  07BF  0847               	movf	find_best_solution@tem_pre_sub_index,w
  3582  07C0  00B0               	movwf	??_find_best_solution
  3583  07C1  0830               	movf	??_find_best_solution,w
  3584  07C2  00E6               	movwf	_g_char_info_sub_index
  3585                           
  3586                           ;teris_16f886.c: 1368: cur_x = temp_pre_x;
  3587  07C3  0846               	movf	find_best_solution@temp_pre_x,w
  3588  07C4  00B0               	movwf	??_find_best_solution
  3589  07C5  0830               	movf	??_find_best_solution,w
  3590  07C6  00EC               	movwf	_cur_x
  3591  07C7                     l3757:	
  3592                           ;teris_16f886.c: 1383: else
  3593                           ;teris_16f886.c: 1384: {
  3594                           
  3595                           ;teris_16f886.c: 1382: }
  3596                           
  3597                           
  3598                           ;teris_16f886.c: 1388: }
  3599                           ;teris_16f886.c: 1389: return res;
  3600  07C7  084A               	movf	find_best_solution@res,w
  3601  07C8  0008               	return
  3602  07C9                     __end_of_find_best_solution:	
  3603                           
  3604                           	psect	text11
  3605  0B2A                     __ptext11:	
  3606 ;; *************** function _right_most *****************
  3607 ;; Defined at:
  3608 ;;		line 1149 in file "teris_16f886.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;  x               1    wreg     char 
  3611 ;;  matrix4x4       2    6[BANK0 ] PTR const struct .
  3612 ;;		 -> NULL(0), g_matrix4x4(96), 
  3613 ;;  matrix16x8      1    8[BANK0 ] PTR const struct .
  3614 ;;		 -> g_matrix16x8(16), 
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;  x               1   10[BANK0 ] char 
  3617 ;; Return value:  Size  Location     Type
  3618 ;;                  1    wreg      char 
  3619 ;; Registers used:
  3620 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3621 ;; Tracked objects:
  3622 ;;		On entry : 0/0
  3623 ;;		On exit  : 0/0
  3624 ;;		Unchanged: 0/0
  3625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3626 ;;      Params:         0       3       0       0       0
  3627 ;;      Locals:         0       1       0       0       0
  3628 ;;      Temps:          0       1       0       0       0
  3629 ;;      Totals:         0       5       0       0       0
  3630 ;;Total ram usage:        5 bytes
  3631 ;; Hardware stack levels used:    1
  3632 ;; Hardware stack levels required when called:    4
  3633 ;; This function calls:
  3634 ;;		_is_right_boundary
  3635 ;; This function is called by:
  3636 ;;		_find_best_solution
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           
  3641                           ;psect for function _right_most
  3642  0B2A                     _right_most:	
  3643                           
  3644                           ;incstack = 0
  3645                           ; Regs used in _right_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3646                           ;right_most@x stored from wreg
  3647  0B2A  1283               	bcf	3,5	;RP0=0, select bank0
  3648  0B2B  1303               	bcf	3,6	;RP1=0, select bank0
  3649  0B2C  00AA               	movwf	right_most@x
  3650  0B2D                     l451:	
  3651                           ;teris_16f886.c: 1151: while(1)
  3652                           
  3653                           
  3654                           ;teris_16f886.c: 1152: {
  3655                           ;teris_16f886.c: 1154: Seed++;
  3656  0B2D  3001               	movlw	1
  3657  0B2E  07DE               	addwf	_Seed,f
  3658  0B2F  1803               	skipnc
  3659  0B30  0ADF               	incf	_Seed+1,f
  3660  0B31  3000               	movlw	0
  3661  0B32  07DF               	addwf	_Seed+1,f
  3662                           
  3663                           ;teris_16f886.c: 1157: if(is_right_boundary(x, matrix4x4, matrix16x8) == RIGHT_OVER_BOUN
      +                          DARY)
  3664  0B33  0826               	movf	right_most@matrix4x4,w
  3665  0B34  00A0               	movwf	is_right_boundary@matrix4x4
  3666  0B35  0827               	movf	right_most@matrix4x4+1,w
  3667  0B36  00A1               	movwf	is_right_boundary@matrix4x4+1
  3668  0B37  0828               	movf	right_most@matrix16x8,w
  3669  0B38  00A9               	movwf	??_right_most
  3670  0B39  0829               	movf	??_right_most,w
  3671  0B3A  00A2               	movwf	is_right_boundary@matrix16x8
  3672  0B3B  082A               	movf	right_most@x,w
  3673  0B3C  120A  158A  2686  120A  158A  	fcall	_is_right_boundary
  3674  0B41  3A03               	xorlw	3
  3675  0B42  1D03               	skipz
  3676  0B43  2B49               	goto	l3231
  3677                           
  3678                           ;teris_16f886.c: 1158: {
  3679                           ;teris_16f886.c: 1162: return x - 1;
  3680  0B44  1283               	bcf	3,5	;RP0=0, select bank0
  3681  0B45  1303               	bcf	3,6	;RP1=0, select bank0
  3682  0B46  082A               	movf	right_most@x,w
  3683  0B47  3EFF               	addlw	-1
  3684  0B48  0008               	return
  3685  0B49                     l3231:	
  3686                           
  3687                           ;teris_16f886.c: 1163: }
  3688                           ;teris_16f886.c: 1164: x++;
  3689  0B49  3001               	movlw	1
  3690  0B4A  1283               	bcf	3,5	;RP0=0, select bank0
  3691  0B4B  1303               	bcf	3,6	;RP1=0, select bank0
  3692  0B4C  00A9               	movwf	??_right_most
  3693  0B4D  0829               	movf	??_right_most,w
  3694  0B4E  07AA               	addwf	right_most@x,f
  3695  0B4F  2B2D               	goto	l451
  3696  0B50                     __end_of_right_most:	
  3697                           
  3698                           	psect	text12
  3699  0E86                     __ptext12:	
  3700 ;; *************** function _is_right_boundary *****************
  3701 ;; Defined at:
  3702 ;;		line 940 in file "teris_16f886.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;  x               1    wreg     char 
  3705 ;;  matrix4x4       2    0[BANK0 ] PTR const struct .
  3706 ;;		 -> NULL(0), g_matrix4x4(96), 
  3707 ;;  matrix16x8      1    2[BANK0 ] PTR const struct .
  3708 ;;		 -> g_matrix16x8(16), 
  3709 ;; Auto vars:     Size  Location     Type
  3710 ;;  x               1    3[BANK0 ] char 
  3711 ;;  col             1    5[BANK0 ] char 
  3712 ;;  row             1    4[BANK0 ] char 
  3713 ;; Return value:  Size  Location     Type
  3714 ;;                  1    wreg      unsigned char 
  3715 ;; Registers used:
  3716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/0
  3719 ;;		On exit  : 0/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3722 ;;      Params:         0       3       0       0       0
  3723 ;;      Locals:         0       3       0       0       0
  3724 ;;      Temps:          2       0       0       0       0
  3725 ;;      Totals:         2       6       0       0       0
  3726 ;;Total ram usage:        8 bytes
  3727 ;; Hardware stack levels used:    1
  3728 ;; Hardware stack levels required when called:    3
  3729 ;; This function calls:
  3730 ;;		_get_matrix_bit
  3731 ;; This function is called by:
  3732 ;;		_right_most
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           
  3737                           ;psect for function _is_right_boundary
  3738  0E86                     _is_right_boundary:	
  3739                           
  3740                           ;incstack = 0
  3741                           ; Regs used in _is_right_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3742                           ;is_right_boundary@x stored from wreg
  3743  0E86  1283               	bcf	3,5	;RP0=0, select bank0
  3744  0E87  1303               	bcf	3,6	;RP1=0, select bank0
  3745  0E88  00A3               	movwf	is_right_boundary@x
  3746                           
  3747                           ;teris_16f886.c: 942: for(int8_t row = 4 - 1; row >= 0; row--)
  3748  0E89  3003               	movlw	3
  3749  0E8A  00FC               	movwf	??_is_right_boundary
  3750  0E8B  087C               	movf	??_is_right_boundary,w
  3751  0E8C  00A4               	movwf	is_right_boundary@row
  3752  0E8D  1BA4               	btfsc	is_right_boundary@row,7
  3753  0E8E  2ED3               	goto	l2935
  3754  0E8F                     l2913:	
  3755                           
  3756                           ;teris_16f886.c: 943: {
  3757                           ;teris_16f886.c: 944: for(int8_t col = 0; col < 4; col++)
  3758  0E8F  01A5               	clrf	is_right_boundary@col
  3759  0E90  0825               	movf	is_right_boundary@col,w
  3760  0E91  3A80               	xorlw	128
  3761  0E92  3E7C               	addlw	-132
  3762  0E93  1803               	btfsc	3,0
  3763  0E94  2ECD               	goto	l2931
  3764  0E95                     l2919:	
  3765                           
  3766                           ;teris_16f886.c: 945: {
  3767                           ;teris_16f886.c: 946: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  3768  0E95  0820               	movf	is_right_boundary@matrix4x4,w
  3769  0E96  00F7               	movwf	get_matrix_bit@byte
  3770  0E97  0821               	movf	is_right_boundary@matrix4x4+1,w
  3771  0E98  00F8               	movwf	get_matrix_bit@byte+1
  3772  0E99  0824               	movf	is_right_boundary@row,w
  3773  0E9A  00FC               	movwf	??_is_right_boundary
  3774  0E9B  087C               	movf	??_is_right_boundary,w
  3775  0E9C  00F9               	movwf	get_matrix_bit@row
  3776  0E9D  0825               	movf	is_right_boundary@col,w
  3777  0E9E  00FD               	movwf	??_is_right_boundary+1
  3778  0E9F  087D               	movf	??_is_right_boundary+1,w
  3779  0EA0  00FA               	movwf	get_matrix_bit@col
  3780  0EA1  160A  118A  278D  120A  158A  	fcall	_get_matrix_bit
  3781  0EA6  3A01               	xorlw	1
  3782  0EA7  1D03               	skipz
  3783  0EA8  2EC2               	goto	l2927
  3784                           
  3785                           ;teris_16f886.c: 947: {
  3786                           ;teris_16f886.c: 948: if(x + col > 8 - 1)
  3787  0EA9  1283               	bcf	3,5	;RP0=0, select bank0
  3788  0EAA  1303               	bcf	3,6	;RP1=0, select bank0
  3789  0EAB  0823               	movf	is_right_boundary@x,w
  3790  0EAC  0725               	addwf	is_right_boundary@col,w
  3791  0EAD  00FC               	movwf	??_is_right_boundary
  3792  0EAE  01FD               	clrf	??_is_right_boundary+1
  3793  0EAF  1803               	skipnc
  3794  0EB0  0AFD               	incf	??_is_right_boundary+1,f
  3795  0EB1  1BA3               	btfsc	is_right_boundary@x,7
  3796  0EB2  03FD               	decf	??_is_right_boundary+1,f
  3797  0EB3  1BA5               	btfsc	is_right_boundary@col,7
  3798  0EB4  03FD               	decf	??_is_right_boundary+1,f
  3799  0EB5  087D               	movf	??_is_right_boundary+1,w
  3800  0EB6  3A80               	xorlw	128
  3801  0EB7  00FF               	movwf	127
  3802  0EB8  3080               	movlw	128
  3803  0EB9  027F               	subwf	127,w
  3804  0EBA  1D03               	skipz
  3805  0EBB  2EBE               	goto	u2555
  3806  0EBC  3008               	movlw	8
  3807  0EBD  027C               	subwf	??_is_right_boundary,w
  3808  0EBE                     u2555:	
  3809  0EBE  1C03               	skipc
  3810  0EBF  2EC2               	goto	l2927
  3811                           
  3812                           ;teris_16f886.c: 949: {
  3813                           ;teris_16f886.c: 953: return RIGHT_OVER_BOUNDARY;
  3814  0EC0  3003               	movlw	3
  3815  0EC1  0008               	return
  3816  0EC2                     l2927:	
  3817  0EC2  3001               	movlw	1
  3818  0EC3  00FC               	movwf	??_is_right_boundary
  3819  0EC4  087C               	movf	??_is_right_boundary,w
  3820  0EC5  1283               	bcf	3,5	;RP0=0, select bank0
  3821  0EC6  1303               	bcf	3,6	;RP1=0, select bank0
  3822  0EC7  07A5               	addwf	is_right_boundary@col,f
  3823  0EC8  0825               	movf	is_right_boundary@col,w
  3824  0EC9  3A80               	xorlw	128
  3825  0ECA  3E7C               	addlw	-132
  3826  0ECB  1C03               	skipc
  3827  0ECC  2E95               	goto	l2919
  3828  0ECD                     l2931:	
  3829  0ECD  30FF               	movlw	255
  3830  0ECE  00FC               	movwf	??_is_right_boundary
  3831  0ECF  087C               	movf	??_is_right_boundary,w
  3832  0ED0  07A4               	addwf	is_right_boundary@row,f
  3833  0ED1  1FA4               	btfss	is_right_boundary@row,7
  3834  0ED2  2E8F               	goto	l2913
  3835  0ED3                     l2935:	
  3836                           
  3837                           ;teris_16f886.c: 954: }
  3838                           ;teris_16f886.c: 955: }
  3839                           ;teris_16f886.c: 956: }
  3840                           ;teris_16f886.c: 957: }
  3841                           ;teris_16f886.c: 958: return OK;
  3842  0ED3  3000               	movlw	0
  3843  0ED4  0008               	return
  3844  0ED5                     __end_of_is_right_boundary:	
  3845                           
  3846                           	psect	text13
  3847  0ED5                     __ptext13:	
  3848 ;; *************** function _merge1 *****************
  3849 ;; Defined at:
  3850 ;;		line 1030 in file "teris_16f886.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;  x               1    wreg     char 
  3853 ;;  y               1    0[BANK0 ] char 
  3854 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  3855 ;;		 -> NULL(0), g_matrix4x4(96), 
  3856 ;;  matrix16x8_i    1    3[BANK0 ] PTR const struct .
  3857 ;;		 -> g_matrix16x8(16), 
  3858 ;;  matrix16x8_o    1    4[BANK0 ] PTR struct .
  3859 ;;		 -> temp_matrix16x8(16), 
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;  x               1    7[BANK0 ] char 
  3862 ;;  col             1    9[BANK0 ] unsigned char 
  3863 ;;  row             1    8[BANK0 ] unsigned char 
  3864 ;;  len             2    5[BANK0 ] unsigned int 
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  1    wreg      void 
  3867 ;; Registers used:
  3868 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3874 ;;      Params:         0       5       0       0       0
  3875 ;;      Locals:         0       5       0       0       0
  3876 ;;      Temps:          2       0       0       0       0
  3877 ;;      Totals:         2      10       0       0       0
  3878 ;;Total ram usage:       12 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; Hardware stack levels required when called:    3
  3881 ;; This function calls:
  3882 ;;		_get_matrix_bit
  3883 ;;		_memcpy
  3884 ;;		_set_matrix_bit
  3885 ;; This function is called by:
  3886 ;;		_find_best_solution
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           
  3891                           ;psect for function _merge1
  3892  0ED5                     _merge1:	
  3893                           
  3894                           ;incstack = 0
  3895                           ; Regs used in _merge1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3896                           ;merge1@x stored from wreg
  3897  0ED5  1283               	bcf	3,5	;RP0=0, select bank0
  3898  0ED6  1303               	bcf	3,6	;RP1=0, select bank0
  3899  0ED7  00A7               	movwf	merge1@x
  3900                           
  3901                           ;teris_16f886.c: 1035: register size_t len;
  3902                           ;teris_16f886.c: 1037: len = sizeof(MATRIX16x8);
  3903  0ED8  3010               	movlw	16
  3904  0ED9  00A5               	movwf	merge1@len
  3905  0EDA  3000               	movlw	0
  3906  0EDB  00A6               	movwf	merge1@len+1
  3907                           
  3908                           ;teris_16f886.c: 1038: memcpy(matrix16x8_out, matrix16x8_in, len);
  3909  0EDC  0823               	movf	merge1@matrix16x8_in,w
  3910  0EDD  00FC               	movwf	??_merge1
  3911  0EDE  087C               	movf	??_merge1,w
  3912  0EDF  00F0               	movwf	memcpy@s1
  3913  0EE0  0826               	movf	merge1@len+1,w
  3914  0EE1  00F2               	movwf	memcpy@n+1
  3915  0EE2  0825               	movf	merge1@len,w
  3916  0EE3  00F1               	movwf	memcpy@n
  3917  0EE4  0824               	movf	merge1@matrix16x8_out,w
  3918  0EE5  120A  158A  2304  120A  158A  	fcall	_memcpy
  3919                           
  3920                           ;teris_16f886.c: 1040: for(uint8_t row = 0; row < 4; row++)
  3921  0EEA  1283               	bcf	3,5	;RP0=0, select bank0
  3922  0EEB  1303               	bcf	3,6	;RP1=0, select bank0
  3923  0EEC  01A8               	clrf	merge1@row
  3924  0EED                     L4:	
  3925  0EED  3004               	movlw	4
  3926  0EEE  0228               	subwf	merge1@row,w
  3927  0EEF  1803               	btfsc	3,0
  3928  0EF0  0008               	return
  3929                           
  3930                           ;teris_16f886.c: 1041: {
  3931                           ;teris_16f886.c: 1042: for(uint8_t col = 0; col < 4; col++)
  3932  0EF1  01A9               	clrf	merge1@col
  3933  0EF2  3004               	movlw	4
  3934  0EF3  0229               	subwf	merge1@col,w
  3935  0EF4  1803               	btfsc	3,0
  3936  0EF5  2F28               	goto	l3117
  3937  0EF6                     l3109:	
  3938                           
  3939                           ;teris_16f886.c: 1043: {
  3940                           ;teris_16f886.c: 1044: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  3941  0EF6  0821               	movf	merge1@matrix4x4,w
  3942  0EF7  00F7               	movwf	get_matrix_bit@byte
  3943  0EF8  0822               	movf	merge1@matrix4x4+1,w
  3944  0EF9  00F8               	movwf	get_matrix_bit@byte+1
  3945  0EFA  0828               	movf	merge1@row,w
  3946  0EFB  00FC               	movwf	??_merge1
  3947  0EFC  087C               	movf	??_merge1,w
  3948  0EFD  00F9               	movwf	get_matrix_bit@row
  3949  0EFE  0829               	movf	merge1@col,w
  3950  0EFF  00FD               	movwf	??_merge1+1
  3951  0F00  087D               	movf	??_merge1+1,w
  3952  0F01  00FA               	movwf	get_matrix_bit@col
  3953  0F02  160A  118A  278D  120A  158A  	fcall	_get_matrix_bit
  3954  0F07  3A01               	xorlw	1
  3955  0F08  1D03               	skipz
  3956  0F09  2F1E               	goto	l3113
  3957                           
  3958                           ;teris_16f886.c: 1045: {
  3959                           ;teris_16f886.c: 1046: set_matrix_bit(matrix16x8_out->row, y + row, x + col, 1);
  3960  0F0A  1283               	bcf	3,5	;RP0=0, select bank0
  3961  0F0B  1303               	bcf	3,6	;RP1=0, select bank0
  3962  0F0C  0828               	movf	merge1@row,w
  3963  0F0D  0720               	addwf	merge1@y,w
  3964  0F0E  00FC               	movwf	??_merge1
  3965  0F0F  087C               	movf	??_merge1,w
  3966  0F10  00F5               	movwf	set_matrix_bit@row
  3967  0F11  0829               	movf	merge1@col,w
  3968  0F12  0727               	addwf	merge1@x,w
  3969  0F13  00FD               	movwf	??_merge1+1
  3970  0F14  087D               	movf	??_merge1+1,w
  3971  0F15  00F6               	movwf	set_matrix_bit@col
  3972  0F16  01F7               	clrf	set_matrix_bit@value
  3973  0F17  0AF7               	incf	set_matrix_bit@value,f
  3974  0F18  0824               	movf	merge1@matrix16x8_out,w
  3975  0F19  160A  118A  279C  120A  158A  	fcall	_set_matrix_bit
  3976  0F1E                     l3113:	
  3977  0F1E  3001               	movlw	1
  3978  0F1F  00FC               	movwf	??_merge1
  3979  0F20  087C               	movf	??_merge1,w
  3980  0F21  1283               	bcf	3,5	;RP0=0, select bank0
  3981  0F22  1303               	bcf	3,6	;RP1=0, select bank0
  3982  0F23  07A9               	addwf	merge1@col,f
  3983  0F24  3004               	movlw	4
  3984  0F25  0229               	subwf	merge1@col,w
  3985  0F26  1C03               	skipc
  3986  0F27  2EF6               	goto	l3109
  3987  0F28                     l3117:	
  3988  0F28  3001               	movlw	1
  3989  0F29  00FC               	movwf	??_merge1
  3990  0F2A  087C               	movf	??_merge1,w
  3991  0F2B  07A8               	addwf	merge1@row,f
  3992  0F2C  2EED               	goto	L4
  3993  0F2D                     __end_of_merge1:	
  3994                           
  3995                           	psect	text14
  3996  0B04                     __ptext14:	
  3997 ;; *************** function _memcpy *****************
  3998 ;; Defined at:
  3999 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memcpy.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;  d1              1    wreg     PTR void 
  4002 ;;		 -> temp_matrix16x8(16), 
  4003 ;;  s1              1    0[COMMON] PTR const void 
  4004 ;;		 -> g_matrix16x8(16), 
  4005 ;;  n               2    1[COMMON] unsigned int 
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;  d1              1    4[COMMON] PTR void 
  4008 ;;		 -> temp_matrix16x8(16), 
  4009 ;;  s               1    6[COMMON] PTR const unsigned char 
  4010 ;;		 -> g_matrix16x8(16), 
  4011 ;;  d               1    5[COMMON] PTR unsigned char 
  4012 ;;		 -> temp_matrix16x8(16), 
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  1    wreg      PTR void 
  4015 ;; Registers used:
  4016 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4022 ;;      Params:         3       0       0       0       0
  4023 ;;      Locals:         3       0       0       0       0
  4024 ;;      Temps:          1       0       0       0       0
  4025 ;;      Totals:         7       0       0       0       0
  4026 ;;Total ram usage:        7 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; This function calls:
  4029 ;;		Nothing
  4030 ;; This function is called by:
  4031 ;;		_merge1
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           
  4036                           ;psect for function _memcpy
  4037  0B04                     _memcpy:	
  4038                           
  4039                           ;incstack = 0
  4040                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  4041                           ;memcpy@d1 stored from wreg
  4042  0B04  00F4               	movwf	memcpy@d1
  4043  0B05  0870               	movf	memcpy@s1,w
  4044  0B06  00F3               	movwf	??_memcpy
  4045  0B07  0873               	movf	??_memcpy,w
  4046  0B08  00F6               	movwf	memcpy@s
  4047  0B09  0874               	movf	memcpy@d1,w
  4048  0B0A  00F3               	movwf	??_memcpy
  4049  0B0B  0873               	movf	??_memcpy,w
  4050  0B0C  00F5               	movwf	memcpy@d
  4051  0B0D                     l2947:	
  4052  0B0D  3001               	movlw	1
  4053  0B0E  02F1               	subwf	memcpy@n,f
  4054  0B0F  3000               	movlw	0
  4055  0B10  1C03               	skipc
  4056  0B11  03F2               	decf	memcpy@n+1,f
  4057  0B12  02F2               	subwf	memcpy@n+1,f
  4058  0B13  0A71               	incf	memcpy@n,w
  4059  0B14  1903               	btfsc	3,2
  4060  0B15  0A72               	incf	memcpy@n+1,w
  4061  0B16  1903               	btfsc	3,2
  4062  0B17  0008               	return
  4063  0B18  0876               	movf	memcpy@s,w
  4064  0B19  0084               	movwf	4
  4065  0B1A  1383               	bcf	3,7	;select IRP bank0
  4066  0B1B  0800               	movf	0,w
  4067  0B1C  00F3               	movwf	??_memcpy
  4068  0B1D  0875               	movf	memcpy@d,w
  4069  0B1E  0084               	movwf	4
  4070  0B1F  0873               	movf	??_memcpy,w
  4071  0B20  0080               	movwf	0
  4072  0B21  3001               	movlw	1
  4073  0B22  00F3               	movwf	??_memcpy
  4074  0B23  0873               	movf	??_memcpy,w
  4075  0B24  07F6               	addwf	memcpy@s,f
  4076  0B25  3001               	movlw	1
  4077  0B26  00F3               	movwf	??_memcpy
  4078  0B27  0873               	movf	??_memcpy,w
  4079  0B28  07F5               	addwf	memcpy@d,f
  4080  0B29  2B0D               	goto	l2947
  4081  0B2A                     __end_of_memcpy:	
  4082                           ;	Return value of _memcpy is never used
  4083                           
  4084                           
  4085                           	psect	text15
  4086  0A2C                     __ptext15:	
  4087 ;; *************** function _left_most *****************
  4088 ;; Defined at:
  4089 ;;		line 1131 in file "teris_16f886.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;  x               1    wreg     char 
  4092 ;;  matrix4x4       2   11[BANK0 ] PTR const struct .
  4093 ;;		 -> NULL(0), g_matrix4x4(96), 
  4094 ;;  matrix16x8      1   13[BANK0 ] PTR const struct .
  4095 ;;		 -> g_matrix16x8(16), 
  4096 ;; Auto vars:     Size  Location     Type
  4097 ;;  x               1   13[COMMON] char 
  4098 ;; Return value:  Size  Location     Type
  4099 ;;                  1    wreg      char 
  4100 ;; Registers used:
  4101 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4102 ;; Tracked objects:
  4103 ;;		On entry : 0/0
  4104 ;;		On exit  : 0/0
  4105 ;;		Unchanged: 0/0
  4106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4107 ;;      Params:         0       3       0       0       0
  4108 ;;      Locals:         1       0       0       0       0
  4109 ;;      Temps:          1       0       0       0       0
  4110 ;;      Totals:         2       3       0       0       0
  4111 ;;Total ram usage:        5 bytes
  4112 ;; Hardware stack levels used:    1
  4113 ;; Hardware stack levels required when called:    4
  4114 ;; This function calls:
  4115 ;;		_is_left_boundary
  4116 ;; This function is called by:
  4117 ;;		_find_best_solution
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           
  4122                           ;psect for function _left_most
  4123  0A2C                     _left_most:	
  4124                           
  4125                           ;incstack = 0
  4126                           ; Regs used in _left_most: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4127                           ;left_most@x stored from wreg
  4128  0A2C  00FD               	movwf	left_most@x
  4129  0A2D                     l444:	
  4130                           ;teris_16f886.c: 1133: while(1)
  4131                           
  4132                           
  4133                           ;teris_16f886.c: 1134: {
  4134                           ;teris_16f886.c: 1136: Seed++;
  4135  0A2D  3001               	movlw	1
  4136  0A2E  1283               	bcf	3,5	;RP0=0, select bank0
  4137  0A2F  1303               	bcf	3,6	;RP1=0, select bank0
  4138  0A30  07DE               	addwf	_Seed,f
  4139  0A31  1803               	skipnc
  4140  0A32  0ADF               	incf	_Seed+1,f
  4141  0A33  3000               	movlw	0
  4142  0A34  07DF               	addwf	_Seed+1,f
  4143                           
  4144                           ;teris_16f886.c: 1139: if(is_left_boundary(x, matrix4x4, matrix16x8) == LEFT_OVER_BOUNDA
      +                          RY)
  4145  0A35  082B               	movf	left_most@matrix4x4,w
  4146  0A36  00A0               	movwf	is_left_boundary@matrix4x4
  4147  0A37  082C               	movf	left_most@matrix4x4+1,w
  4148  0A38  00A1               	movwf	is_left_boundary@matrix4x4+1
  4149  0A39  082D               	movf	left_most@matrix16x8,w
  4150  0A3A  00FC               	movwf	??_left_most
  4151  0A3B  087C               	movf	??_left_most,w
  4152  0A3C  00A2               	movwf	is_left_boundary@matrix16x8
  4153  0A3D  087D               	movf	left_most@x,w
  4154  0A3E  120A  158A  2639  120A  158A  	fcall	_is_left_boundary
  4155  0A43  3A02               	xorlw	2
  4156  0A44  1D03               	skipz
  4157  0A45  2A49               	goto	l3221
  4158                           
  4159                           ;teris_16f886.c: 1140: {
  4160                           ;teris_16f886.c: 1144: return x + 1;
  4161  0A46  087D               	movf	left_most@x,w
  4162  0A47  3E01               	addlw	1
  4163  0A48  0008               	return
  4164  0A49                     l3221:	
  4165                           
  4166                           ;teris_16f886.c: 1145: }
  4167                           ;teris_16f886.c: 1146: x--;
  4168  0A49  30FF               	movlw	255
  4169  0A4A  00FC               	movwf	??_left_most
  4170  0A4B  087C               	movf	??_left_most,w
  4171  0A4C  07FD               	addwf	left_most@x,f
  4172  0A4D  2A2D               	goto	l444
  4173  0A4E                     __end_of_left_most:	
  4174                           
  4175                           	psect	text16
  4176  0E39                     __ptext16:	
  4177 ;; *************** function _is_left_boundary *****************
  4178 ;; Defined at:
  4179 ;;		line 920 in file "teris_16f886.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;  x               1    wreg     char 
  4182 ;;  matrix4x4       2    0[BANK0 ] PTR const struct .
  4183 ;;		 -> NULL(0), g_matrix4x4(96), 
  4184 ;;  matrix16x8      1    2[BANK0 ] PTR const struct .
  4185 ;;		 -> g_matrix16x8(16), 
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;  x               1    8[BANK0 ] char 
  4188 ;;  col             1   10[BANK0 ] char 
  4189 ;;  row             1    9[BANK0 ] char 
  4190 ;; Return value:  Size  Location     Type
  4191 ;;                  1    wreg      unsigned char 
  4192 ;; Registers used:
  4193 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4199 ;;      Params:         0       3       0       0       0
  4200 ;;      Locals:         0       3       0       0       0
  4201 ;;      Temps:          0       5       0       0       0
  4202 ;;      Totals:         0      11       0       0       0
  4203 ;;Total ram usage:       11 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    3
  4206 ;; This function calls:
  4207 ;;		_get_matrix_bit
  4208 ;; This function is called by:
  4209 ;;		_left_most
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           
  4214                           ;psect for function _is_left_boundary
  4215  0E39                     _is_left_boundary:	
  4216                           
  4217                           ;incstack = 0
  4218                           ; Regs used in _is_left_boundary: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4219                           ;is_left_boundary@x stored from wreg
  4220  0E39  1283               	bcf	3,5	;RP0=0, select bank0
  4221  0E3A  1303               	bcf	3,6	;RP1=0, select bank0
  4222  0E3B  00A8               	movwf	is_left_boundary@x
  4223                           
  4224                           ;teris_16f886.c: 922: for(int8_t row = 4 - 1; row >= 0; row--)
  4225  0E3C  3003               	movlw	3
  4226  0E3D  00A3               	movwf	??_is_left_boundary
  4227  0E3E  0823               	movf	??_is_left_boundary,w
  4228  0E3F  00A9               	movwf	is_left_boundary@row
  4229  0E40  1BA9               	btfsc	is_left_boundary@row,7
  4230  0E41  2E84               	goto	l2903
  4231  0E42                     l2881:	
  4232                           
  4233                           ;teris_16f886.c: 923: {
  4234                           ;teris_16f886.c: 924: for(int8_t col = 0; col < 4; col++)
  4235  0E42  01AA               	clrf	is_left_boundary@col
  4236  0E43  082A               	movf	is_left_boundary@col,w
  4237  0E44  3A80               	xorlw	128
  4238  0E45  3E7C               	addlw	-132
  4239  0E46  1803               	btfsc	3,0
  4240  0E47  2E7E               	goto	l2899
  4241  0E48                     l2887:	
  4242                           
  4243                           ;teris_16f886.c: 925: {
  4244                           ;teris_16f886.c: 926: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  4245  0E48  0820               	movf	is_left_boundary@matrix4x4,w
  4246  0E49  00F7               	movwf	get_matrix_bit@byte
  4247  0E4A  0821               	movf	is_left_boundary@matrix4x4+1,w
  4248  0E4B  00F8               	movwf	get_matrix_bit@byte+1
  4249  0E4C  0829               	movf	is_left_boundary@row,w
  4250  0E4D  00A3               	movwf	??_is_left_boundary
  4251  0E4E  0823               	movf	??_is_left_boundary,w
  4252  0E4F  00F9               	movwf	get_matrix_bit@row
  4253  0E50  082A               	movf	is_left_boundary@col,w
  4254  0E51  00A4               	movwf	??_is_left_boundary+1
  4255  0E52  0824               	movf	??_is_left_boundary+1,w
  4256  0E53  00FA               	movwf	get_matrix_bit@col
  4257  0E54  160A  118A  278D  120A  158A  	fcall	_get_matrix_bit
  4258  0E59  3A01               	xorlw	1
  4259  0E5A  1D03               	skipz
  4260  0E5B  2E73               	goto	l2895
  4261                           
  4262                           ;teris_16f886.c: 927: {
  4263                           ;teris_16f886.c: 928: if( x + col < 0)
  4264  0E5C  1283               	bcf	3,5	;RP0=0, select bank0
  4265  0E5D  1303               	bcf	3,6	;RP1=0, select bank0
  4266  0E5E  082A               	movf	is_left_boundary@col,w
  4267  0E5F  00A3               	movwf	??_is_left_boundary
  4268  0E60  01A4               	clrf	??_is_left_boundary+1
  4269  0E61  1BA3               	btfsc	??_is_left_boundary,7
  4270  0E62  03A4               	decf	??_is_left_boundary+1,f
  4271  0E63  0828               	movf	is_left_boundary@x,w
  4272  0E64  00A5               	movwf	??_is_left_boundary+2
  4273  0E65  01A6               	clrf	??_is_left_boundary+3
  4274  0E66  1BA5               	btfsc	??_is_left_boundary+2,7
  4275  0E67  03A6               	decf	??_is_left_boundary+3,f
  4276  0E68  0823               	movf	??_is_left_boundary,w
  4277  0E69  0725               	addwf	??_is_left_boundary+2,w
  4278  0E6A  0826               	movf	??_is_left_boundary+3,w
  4279  0E6B  1803               	skipnc
  4280  0E6C  0A26               	incf	??_is_left_boundary+3,w
  4281  0E6D  0724               	addwf	??_is_left_boundary+1,w
  4282  0E6E  00A7               	movwf	??_is_left_boundary+4
  4283  0E6F  1FA7               	btfss	??_is_left_boundary+4,7
  4284  0E70  2E73               	goto	l2895
  4285                           
  4286                           ;teris_16f886.c: 929: {
  4287                           ;teris_16f886.c: 933: return LEFT_OVER_BOUNDARY;
  4288  0E71  3002               	movlw	2
  4289  0E72  0008               	return
  4290  0E73                     l2895:	
  4291  0E73  3001               	movlw	1
  4292  0E74  1283               	bcf	3,5	;RP0=0, select bank0
  4293  0E75  1303               	bcf	3,6	;RP1=0, select bank0
  4294  0E76  00A3               	movwf	??_is_left_boundary
  4295  0E77  0823               	movf	??_is_left_boundary,w
  4296  0E78  07AA               	addwf	is_left_boundary@col,f
  4297  0E79  082A               	movf	is_left_boundary@col,w
  4298  0E7A  3A80               	xorlw	128
  4299  0E7B  3E7C               	addlw	-132
  4300  0E7C  1C03               	skipc
  4301  0E7D  2E48               	goto	l2887
  4302  0E7E                     l2899:	
  4303  0E7E  30FF               	movlw	255
  4304  0E7F  00A3               	movwf	??_is_left_boundary
  4305  0E80  0823               	movf	??_is_left_boundary,w
  4306  0E81  07A9               	addwf	is_left_boundary@row,f
  4307  0E82  1FA9               	btfss	is_left_boundary@row,7
  4308  0E83  2E42               	goto	l2881
  4309  0E84                     l2903:	
  4310                           
  4311                           ;teris_16f886.c: 934: }
  4312                           ;teris_16f886.c: 935: }
  4313                           ;teris_16f886.c: 936: }
  4314                           ;teris_16f886.c: 937: }
  4315                           ;teris_16f886.c: 938: return OK;
  4316  0E84  3000               	movlw	0
  4317  0E85  0008               	return
  4318  0E86                     __end_of_is_left_boundary:	
  4319                           
  4320                           	psect	text17
  4321  0264                     __ptext17:	
  4322 ;; *************** function _is_valid *****************
  4323 ;; Defined at:
  4324 ;;		line 876 in file "teris_16f886.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;  x               1    wreg     char 
  4327 ;;  y               1    0[BANK0 ] char 
  4328 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  4329 ;;		 -> NULL(0), g_matrix4x4(96), 
  4330 ;;  matrix16x8      1    3[BANK0 ] PTR const struct .
  4331 ;;		 -> g_matrix16x8(16), 
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;  x               1    4[BANK0 ] char 
  4334 ;;  col             1    6[BANK0 ] char 
  4335 ;;  row             1    5[BANK0 ] char 
  4336 ;; Return value:  Size  Location     Type
  4337 ;;                  1    wreg      unsigned char 
  4338 ;; Registers used:
  4339 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4340 ;; Tracked objects:
  4341 ;;		On entry : 0/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4345 ;;      Params:         0       4       0       0       0
  4346 ;;      Locals:         0       3       0       0       0
  4347 ;;      Temps:          2       0       0       0       0
  4348 ;;      Totals:         2       7       0       0       0
  4349 ;;Total ram usage:        9 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; Hardware stack levels required when called:    3
  4352 ;; This function calls:
  4353 ;;		_get_matrix_bit
  4354 ;; This function is called by:
  4355 ;;		_find_best_solution
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           
  4360                           ;psect for function _is_valid
  4361  0264                     _is_valid:	
  4362                           
  4363                           ;incstack = 0
  4364                           ; Regs used in _is_valid: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4365                           ;is_valid@x stored from wreg
  4366  0264  1283               	bcf	3,5	;RP0=0, select bank0
  4367  0265  1303               	bcf	3,6	;RP1=0, select bank0
  4368  0266  00A4               	movwf	is_valid@x
  4369                           
  4370                           ;teris_16f886.c: 881: for(int8_t row = 4 - 1; row >= 0; row--)
  4371  0267  3003               	movlw	3
  4372  0268  00FC               	movwf	??_is_valid
  4373  0269  087C               	movf	??_is_valid,w
  4374  026A  00A5               	movwf	is_valid@row
  4375  026B  1BA5               	btfsc	is_valid@row,7
  4376  026C  2AF2               	goto	l3053
  4377  026D                     l3017:	
  4378                           
  4379                           ;teris_16f886.c: 882: {
  4380                           ;teris_16f886.c: 883: for(int8_t col = 0; col < 4; col++)
  4381  026D  01A6               	clrf	is_valid@col
  4382  026E  0826               	movf	is_valid@col,w
  4383  026F  3A80               	xorlw	128
  4384  0270  3E7C               	addlw	-132
  4385  0271  1803               	btfsc	3,0
  4386  0272  2AEC               	goto	l3049
  4387  0273                     l3023:	
  4388                           
  4389                           ;teris_16f886.c: 884: {
  4390                           ;teris_16f886.c: 885: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  4391  0273  0821               	movf	is_valid@matrix4x4,w
  4392  0274  00F7               	movwf	get_matrix_bit@byte
  4393  0275  0822               	movf	is_valid@matrix4x4+1,w
  4394  0276  00F8               	movwf	get_matrix_bit@byte+1
  4395  0277  0825               	movf	is_valid@row,w
  4396  0278  00FC               	movwf	??_is_valid
  4397  0279  087C               	movf	??_is_valid,w
  4398  027A  00F9               	movwf	get_matrix_bit@row
  4399  027B  0826               	movf	is_valid@col,w
  4400  027C  00FD               	movwf	??_is_valid+1
  4401  027D  087D               	movf	??_is_valid+1,w
  4402  027E  00FA               	movwf	get_matrix_bit@col
  4403  027F  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  4404  0284  3A01               	xorlw	1
  4405  0285  1D03               	skipz
  4406  0286  2AE1               	goto	l3045
  4407                           
  4408                           ;teris_16f886.c: 886: {
  4409                           ;teris_16f886.c: 887: if(get_matrix_bit(matrix16x8->row, y + row, x + col) == 1)
  4410  0287  1283               	bcf	3,5	;RP0=0, select bank0
  4411  0288  1303               	bcf	3,6	;RP1=0, select bank0
  4412  0289  0823               	movf	is_valid@matrix16x8,w
  4413  028A  00F7               	movwf	get_matrix_bit@byte
  4414  028B  3000               	movlw	0
  4415  028C  00F8               	movwf	get_matrix_bit@byte+1
  4416  028D  0825               	movf	is_valid@row,w
  4417  028E  0720               	addwf	is_valid@y,w
  4418  028F  00FC               	movwf	??_is_valid
  4419  0290  087C               	movf	??_is_valid,w
  4420  0291  00F9               	movwf	get_matrix_bit@row
  4421  0292  0826               	movf	is_valid@col,w
  4422  0293  0724               	addwf	is_valid@x,w
  4423  0294  00FD               	movwf	??_is_valid+1
  4424  0295  087D               	movf	??_is_valid+1,w
  4425  0296  00FA               	movwf	get_matrix_bit@col
  4426  0297  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  4427  029C  3A01               	xorlw	1
  4428  029D  1D03               	skipz
  4429  029E  2AA1               	goto	l3031
  4430                           
  4431                           ;teris_16f886.c: 888: {
  4432                           ;teris_16f886.c: 893: return 0;
  4433  029F  3000               	movlw	0
  4434  02A0  0008               	return
  4435  02A1                     l3031:	
  4436                           
  4437                           ;teris_16f886.c: 894: }
  4438                           ;teris_16f886.c: 896: if(( x + col < 0) || (x + col >= 8))
  4439  02A1  1283               	bcf	3,5	;RP0=0, select bank0
  4440  02A2  1303               	bcf	3,6	;RP1=0, select bank0
  4441  02A3  0824               	movf	is_valid@x,w
  4442  02A4  0726               	addwf	is_valid@col,w
  4443  02A5  00FC               	movwf	??_is_valid
  4444  02A6  01FD               	clrf	??_is_valid+1
  4445  02A7  1803               	skipnc
  4446  02A8  0AFD               	incf	??_is_valid+1,f
  4447  02A9  1BA4               	btfsc	is_valid@x,7
  4448  02AA  03FD               	decf	??_is_valid+1,f
  4449  02AB  1BA6               	btfsc	is_valid@col,7
  4450  02AC  03FD               	decf	??_is_valid+1,f
  4451  02AD  1BFD               	btfsc	??_is_valid+1,7
  4452  02AE  2AC6               	goto	l3035
  4453  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  4454  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  4455  02B1  0824               	movf	is_valid@x,w
  4456  02B2  0726               	addwf	is_valid@col,w
  4457  02B3  00FC               	movwf	??_is_valid
  4458  02B4  01FD               	clrf	??_is_valid+1
  4459  02B5  1803               	skipnc
  4460  02B6  0AFD               	incf	??_is_valid+1,f
  4461  02B7  1BA4               	btfsc	is_valid@x,7
  4462  02B8  03FD               	decf	??_is_valid+1,f
  4463  02B9  1BA6               	btfsc	is_valid@col,7
  4464  02BA  03FD               	decf	??_is_valid+1,f
  4465  02BB  087D               	movf	??_is_valid+1,w
  4466  02BC  3A80               	xorlw	128
  4467  02BD  00FF               	movwf	127
  4468  02BE  3080               	movlw	128
  4469  02BF  027F               	subwf	127,w
  4470  02C0  1D03               	skipz
  4471  02C1  2AC4               	goto	u2795
  4472  02C2  3008               	movlw	8
  4473  02C3  027C               	subwf	??_is_valid,w
  4474  02C4                     u2795:	
  4475  02C4  1C03               	skipc
  4476  02C5  2AC8               	goto	l3039
  4477  02C6                     l3035:	
  4478                           
  4479                           ;teris_16f886.c: 897: {
  4480                           ;teris_16f886.c: 902: return 0;
  4481  02C6  3000               	movlw	0
  4482  02C7  0008               	return
  4483  02C8                     l3039:	
  4484                           
  4485                           ;teris_16f886.c: 903: }
  4486                           ;teris_16f886.c: 904: if((y + row) > (16 - 1))
  4487  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  4488  02C9  1303               	bcf	3,6	;RP1=0, select bank0
  4489  02CA  0820               	movf	is_valid@y,w
  4490  02CB  0725               	addwf	is_valid@row,w
  4491  02CC  00FC               	movwf	??_is_valid
  4492  02CD  01FD               	clrf	??_is_valid+1
  4493  02CE  1803               	skipnc
  4494  02CF  0AFD               	incf	??_is_valid+1,f
  4495  02D0  1BA0               	btfsc	is_valid@y,7
  4496  02D1  03FD               	decf	??_is_valid+1,f
  4497  02D2  1BA5               	btfsc	is_valid@row,7
  4498  02D3  03FD               	decf	??_is_valid+1,f
  4499  02D4  087D               	movf	??_is_valid+1,w
  4500  02D5  3A80               	xorlw	128
  4501  02D6  00FF               	movwf	127
  4502  02D7  3080               	movlw	128
  4503  02D8  027F               	subwf	127,w
  4504  02D9  1D03               	skipz
  4505  02DA  2ADD               	goto	u2815
  4506  02DB  3010               	movlw	16
  4507  02DC  027C               	subwf	??_is_valid,w
  4508  02DD                     u2815:	
  4509  02DD  1C03               	skipc
  4510  02DE  2AE1               	goto	l3045
  4511                           
  4512                           ;teris_16f886.c: 905: {
  4513                           ;teris_16f886.c: 910: return 0;
  4514  02DF  3000               	movlw	0
  4515  02E0  0008               	return
  4516  02E1                     l3045:	
  4517  02E1  3001               	movlw	1
  4518  02E2  00FC               	movwf	??_is_valid
  4519  02E3  087C               	movf	??_is_valid,w
  4520  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  4521  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  4522  02E6  07A6               	addwf	is_valid@col,f
  4523  02E7  0826               	movf	is_valid@col,w
  4524  02E8  3A80               	xorlw	128
  4525  02E9  3E7C               	addlw	-132
  4526  02EA  1C03               	skipc
  4527  02EB  2A73               	goto	l3023
  4528  02EC                     l3049:	
  4529  02EC  30FF               	movlw	255
  4530  02ED  00FC               	movwf	??_is_valid
  4531  02EE  087C               	movf	??_is_valid,w
  4532  02EF  07A5               	addwf	is_valid@row,f
  4533  02F0  1FA5               	btfss	is_valid@row,7
  4534  02F1  2A6D               	goto	l3017
  4535  02F2                     l3053:	
  4536                           
  4537                           ;teris_16f886.c: 911: }
  4538                           ;teris_16f886.c: 912: }
  4539                           ;teris_16f886.c: 913: }
  4540                           ;teris_16f886.c: 914: }
  4541                           ;teris_16f886.c: 918: return 1;
  4542  02F2  3001               	movlw	1
  4543  02F3  0008               	return
  4544  02F4                     __end_of_is_valid:	
  4545                           
  4546                           	psect	text18
  4547  0A95                     __ptext18:	
  4548 ;; *************** function _get_num_removed_rows *****************
  4549 ;; Defined at:
  4550 ;;		line 817 in file "teris_16f886.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  matrix          1    wreg     PTR struct .
  4553 ;;		 -> temp_matrix16x8(16), 
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;  matrix          1    5[COMMON] PTR struct .
  4556 ;;		 -> temp_matrix16x8(16), 
  4557 ;;  row             1    6[COMMON] char 
  4558 ;;  count           1    4[COMMON] unsigned char 
  4559 ;; Return value:  Size  Location     Type
  4560 ;;                  1    wreg      unsigned char 
  4561 ;; Registers used:
  4562 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4563 ;; Tracked objects:
  4564 ;;		On entry : 0/0
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4568 ;;      Params:         0       0       0       0       0
  4569 ;;      Locals:         3       0       0       0       0
  4570 ;;      Temps:          1       0       0       0       0
  4571 ;;      Totals:         4       0       0       0       0
  4572 ;;Total ram usage:        4 bytes
  4573 ;; Hardware stack levels used:    1
  4574 ;; Hardware stack levels required when called:    1
  4575 ;; This function calls:
  4576 ;;		_is_row_full
  4577 ;; This function is called by:
  4578 ;;		_find_best_solution
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           
  4583                           ;psect for function _get_num_removed_rows
  4584  0A95                     _get_num_removed_rows:	
  4585                           
  4586                           ;incstack = 0
  4587                           ; Regs used in _get_num_removed_rows: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4588                           ;get_num_removed_rows@matrix stored from wreg
  4589  0A95  00F5               	movwf	get_num_removed_rows@matrix
  4590                           
  4591                           ;teris_16f886.c: 819: uint8_t count = 0;
  4592  0A96  01F4               	clrf	get_num_removed_rows@count
  4593                           
  4594                           ;teris_16f886.c: 820: for(int8_t row = 0; row < 16; row++)
  4595  0A97  01F6               	clrf	get_num_removed_rows@row
  4596  0A98  0876               	movf	get_num_removed_rows@row,w
  4597  0A99  3A80               	xorlw	128
  4598  0A9A  3E70               	addlw	-144
  4599  0A9B  1803               	btfsc	3,0
  4600  0A9C  2AB7               	goto	l3007
  4601  0A9D                     l3001:	
  4602                           
  4603                           ;teris_16f886.c: 821: {
  4604                           ;teris_16f886.c: 822: if(is_row_full(matrix, row) == 1)
  4605  0A9D  0876               	movf	get_num_removed_rows@row,w
  4606  0A9E  00F3               	movwf	??_get_num_removed_rows
  4607  0A9F  0873               	movf	??_get_num_removed_rows,w
  4608  0AA0  00F0               	movwf	is_row_full@row
  4609  0AA1  0875               	movf	get_num_removed_rows@matrix,w
  4610  0AA2  160A  118A  277F  120A  158A  	fcall	_is_row_full
  4611  0AA7  3A01               	xorlw	1
  4612  0AA8  1D03               	skipz
  4613  0AA9  2AAE               	goto	l331
  4614                           
  4615                           ;teris_16f886.c: 823: {
  4616                           ;teris_16f886.c: 824: count++;
  4617  0AAA  3001               	movlw	1
  4618  0AAB  00F3               	movwf	??_get_num_removed_rows
  4619  0AAC  0873               	movf	??_get_num_removed_rows,w
  4620  0AAD  07F4               	addwf	get_num_removed_rows@count,f
  4621  0AAE                     l331:	
  4622  0AAE  3001               	movlw	1
  4623  0AAF  00F3               	movwf	??_get_num_removed_rows
  4624  0AB0  0873               	movf	??_get_num_removed_rows,w
  4625  0AB1  07F6               	addwf	get_num_removed_rows@row,f
  4626  0AB2  0876               	movf	get_num_removed_rows@row,w
  4627  0AB3  3A80               	xorlw	128
  4628  0AB4  3E70               	addlw	-144
  4629  0AB5  1C03               	skipc
  4630  0AB6  2A9D               	goto	l3001
  4631  0AB7                     l3007:	
  4632                           
  4633                           ;teris_16f886.c: 825: }
  4634                           ;teris_16f886.c: 826: }
  4635                           ;teris_16f886.c: 830: return count;
  4636  0AB7  0874               	movf	get_num_removed_rows@count,w
  4637  0AB8  0008               	return
  4638  0AB9                     __end_of_get_num_removed_rows:	
  4639                           
  4640                           	psect	text19
  4641  0005                     __ptext19:	
  4642 ;; *************** function _get_num_of_orphan *****************
  4643 ;; Defined at:
  4644 ;;		line 1052 in file "teris_16f886.c"
  4645 ;; Parameters:    Size  Location     Type
  4646 ;;  matrix          1    wreg     PTR const struct .
  4647 ;;		 -> temp_matrix16x8(16), 
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;  matrix          1    6[BANK0 ] PTR const struct .
  4650 ;;		 -> temp_matrix16x8(16), 
  4651 ;;  row             1    8[BANK0 ] char 
  4652 ;;  col             1    7[BANK0 ] unsigned char 
  4653 ;;  risk            2    3[BANK0 ] unsigned int 
  4654 ;;  full            1    5[BANK0 ] unsigned char 
  4655 ;; Return value:  Size  Location     Type
  4656 ;;                  2   12[COMMON] unsigned int 
  4657 ;; Registers used:
  4658 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4659 ;; Tracked objects:
  4660 ;;		On entry : 0/0
  4661 ;;		On exit  : 0/0
  4662 ;;		Unchanged: 0/0
  4663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4664 ;;      Params:         2       0       0       0       0
  4665 ;;      Locals:         0       6       0       0       0
  4666 ;;      Temps:          0       3       0       0       0
  4667 ;;      Totals:         2       9       0       0       0
  4668 ;;Total ram usage:       11 bytes
  4669 ;; Hardware stack levels used:    1
  4670 ;; Hardware stack levels required when called:    3
  4671 ;; This function calls:
  4672 ;;		_get_matrix_bit
  4673 ;; This function is called by:
  4674 ;;		_find_best_solution
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           
  4679                           ;psect for function _get_num_of_orphan
  4680  0005                     _get_num_of_orphan:	
  4681                           
  4682                           ;incstack = 0
  4683                           ; Regs used in _get_num_of_orphan: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4684                           ;get_num_of_orphan@matrix stored from wreg
  4685  0005  1283               	bcf	3,5	;RP0=0, select bank0
  4686  0006  1303               	bcf	3,6	;RP1=0, select bank0
  4687  0007  00A6               	movwf	get_num_of_orphan@matrix
  4688                           
  4689                           ;teris_16f886.c: 1054: uint16_t risk = 0;
  4690  0008  01A3               	clrf	get_num_of_orphan@risk
  4691  0009  01A4               	clrf	get_num_of_orphan@risk+1
  4692                           
  4693                           ;teris_16f886.c: 1055: uint8_t full = 0xFF;
  4694  000A  30FF               	movlw	255
  4695  000B  00A0               	movwf	??_get_num_of_orphan
  4696  000C  0820               	movf	??_get_num_of_orphan,w
  4697  000D  00A5               	movwf	get_num_of_orphan@full
  4698                           
  4699                           ;teris_16f886.c: 1056: for(uint8_t col = 0; col < 8; col++)
  4700  000E  01A7               	clrf	get_num_of_orphan@col
  4701  000F  3008               	movlw	8
  4702  0010  0227               	subwf	get_num_of_orphan@col,w
  4703  0011  1803               	btfsc	3,0
  4704  0012  2865               	goto	l3155
  4705  0013                     l3129:	
  4706                           
  4707                           ;teris_16f886.c: 1057: {
  4708                           ;teris_16f886.c: 1058: full = 0xFF;
  4709  0013  30FF               	movlw	255
  4710  0014  00A0               	movwf	??_get_num_of_orphan
  4711  0015  0820               	movf	??_get_num_of_orphan,w
  4712  0016  00A5               	movwf	get_num_of_orphan@full
  4713                           
  4714                           ;teris_16f886.c: 1059: for(int8_t row = 16 - 1; row >= 0; row--)
  4715  0017  300F               	movlw	15
  4716  0018  00A0               	movwf	??_get_num_of_orphan
  4717  0019  0820               	movf	??_get_num_of_orphan,w
  4718  001A  00A8               	movwf	get_num_of_orphan@row
  4719  001B  1BA8               	btfsc	get_num_of_orphan@row,7
  4720  001C  285D               	goto	l3151
  4721  001D                     l3135:	
  4722                           
  4723                           ;teris_16f886.c: 1060: {
  4724                           ;teris_16f886.c: 1061: if(full == 0xFF)
  4725  001D  0A25               	incf	get_num_of_orphan@full,w
  4726  001E  1903               	btfsc	3,2
  4727  001F  2841               	goto	L6
  4728                           
  4729                           ;teris_16f886.c: 1065: else
  4730                           ;teris_16f886.c: 1066: {
  4731                           ;teris_16f886.c: 1067: if(get_matrix_bit(matrix->row, row, col) == 1)
  4732                           
  4733                           ;teris_16f886.c: 1064: }
  4734                           
  4735                           ;teris_16f886.c: 1062: {
  4736                           ;teris_16f886.c: 1063: full = get_matrix_bit(matrix->row, row, col);
  4737  0020  0826               	movf	get_num_of_orphan@matrix,w
  4738  0021  00F7               	movwf	get_matrix_bit@byte
  4739  0022  3000               	movlw	0
  4740  0023  00F8               	movwf	get_matrix_bit@byte+1
  4741  0024  0828               	movf	get_num_of_orphan@row,w
  4742  0025  00A0               	movwf	??_get_num_of_orphan
  4743  0026  0820               	movf	??_get_num_of_orphan,w
  4744  0027  00F9               	movwf	get_matrix_bit@row
  4745  0028  0827               	movf	get_num_of_orphan@col,w
  4746  0029  00A1               	movwf	??_get_num_of_orphan+1
  4747  002A  0821               	movf	??_get_num_of_orphan+1,w
  4748  002B  00FA               	movwf	get_matrix_bit@col
  4749  002C  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  4750  0031  3A01               	xorlw	1
  4751  0032  1D03               	skipz
  4752  0033  283F               	goto	l3145
  4753                           
  4754                           ;teris_16f886.c: 1068: {
  4755                           ;teris_16f886.c: 1069: if(full == 0)
  4756  0034  1283               	bcf	3,5	;RP0=0, select bank0
  4757  0035  1303               	bcf	3,6	;RP1=0, select bank0
  4758  0036  0825               	movf	get_num_of_orphan@full,w
  4759  0037  1D03               	btfss	3,2
  4760  0038  283F               	goto	l3145
  4761                           
  4762                           ;teris_16f886.c: 1070: {
  4763                           ;teris_16f886.c: 1071: risk++;
  4764  0039  3001               	movlw	1
  4765  003A  07A3               	addwf	get_num_of_orphan@risk,f
  4766  003B  1803               	skipnc
  4767  003C  0AA4               	incf	get_num_of_orphan@risk+1,f
  4768  003D  3000               	movlw	0
  4769  003E  07A4               	addwf	get_num_of_orphan@risk+1,f
  4770  003F                     l3145:	
  4771                           
  4772                           ;teris_16f886.c: 1072: }
  4773                           ;teris_16f886.c: 1073: }
  4774                           ;teris_16f886.c: 1074: full = get_matrix_bit(matrix->row, row, col);
  4775  003F  1283               	bcf	3,5	;RP0=0, select bank0
  4776  0040  1303               	bcf	3,6	;RP1=0, select bank0
  4777  0041                     L6:	
  4778  0041  0826               	movf	get_num_of_orphan@matrix,w
  4779  0042  00F7               	movwf	get_matrix_bit@byte
  4780  0043  3000               	movlw	0
  4781  0044  00F8               	movwf	get_matrix_bit@byte+1
  4782  0045  0828               	movf	get_num_of_orphan@row,w
  4783  0046  00A0               	movwf	??_get_num_of_orphan
  4784  0047  0820               	movf	??_get_num_of_orphan,w
  4785  0048  00F9               	movwf	get_matrix_bit@row
  4786  0049  0827               	movf	get_num_of_orphan@col,w
  4787  004A  00A1               	movwf	??_get_num_of_orphan+1
  4788  004B  0821               	movf	??_get_num_of_orphan+1,w
  4789  004C  00FA               	movwf	get_matrix_bit@col
  4790  004D  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  4791  0052  1283               	bcf	3,5	;RP0=0, select bank0
  4792  0053  1303               	bcf	3,6	;RP1=0, select bank0
  4793  0054  00A2               	movwf	??_get_num_of_orphan+2
  4794  0055  0822               	movf	??_get_num_of_orphan+2,w
  4795  0056  00A5               	movwf	get_num_of_orphan@full
  4796  0057  30FF               	movlw	255
  4797  0058  00A0               	movwf	??_get_num_of_orphan
  4798  0059  0820               	movf	??_get_num_of_orphan,w
  4799  005A  07A8               	addwf	get_num_of_orphan@row,f
  4800  005B  1FA8               	btfss	get_num_of_orphan@row,7
  4801  005C  281D               	goto	l3135
  4802  005D                     l3151:	
  4803  005D  3001               	movlw	1
  4804  005E  00A0               	movwf	??_get_num_of_orphan
  4805  005F  0820               	movf	??_get_num_of_orphan,w
  4806  0060  07A7               	addwf	get_num_of_orphan@col,f
  4807  0061  3008               	movlw	8
  4808  0062  0227               	subwf	get_num_of_orphan@col,w
  4809  0063  1C03               	skipc
  4810  0064  2813               	goto	l3129
  4811  0065                     l3155:	
  4812                           
  4813                           ;teris_16f886.c: 1075: }
  4814                           ;teris_16f886.c: 1076: }
  4815                           ;teris_16f886.c: 1077: }
  4816                           ;teris_16f886.c: 1082: return risk;
  4817  0065  0824               	movf	get_num_of_orphan@risk+1,w
  4818  0066  00FD               	movwf	?_get_num_of_orphan+1
  4819  0067  0823               	movf	get_num_of_orphan@risk,w
  4820  0068  00FC               	movwf	?_get_num_of_orphan
  4821  0069  0008               	return
  4822  006A                     __end_of_get_num_of_orphan:	
  4823                           
  4824                           	psect	text20
  4825  0387                     __ptext20:	
  4826 ;; *************** function _get_holes_after_merge *****************
  4827 ;; Defined at:
  4828 ;;		line 1202 in file "teris_16f886.c"
  4829 ;; Parameters:    Size  Location     Type
  4830 ;;  matrix          1    wreg     PTR struct .
  4831 ;;		 -> temp_matrix16x8(16), 
  4832 ;; Auto vars:     Size  Location     Type
  4833 ;;  matrix          1    9[BANK0 ] PTR struct .
  4834 ;;		 -> temp_matrix16x8(16), 
  4835 ;;  row             1   11[BANK0 ] char 
  4836 ;;  col             1   10[BANK0 ] char 
  4837 ;;  start           1    8[BANK0 ] char 
  4838 ;;  stop            1    7[BANK0 ] char 
  4839 ;;  num_hole        1    6[BANK0 ] unsigned char 
  4840 ;; Return value:  Size  Location     Type
  4841 ;;                  1    wreg      unsigned char 
  4842 ;; Registers used:
  4843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4844 ;; Tracked objects:
  4845 ;;		On entry : 0/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4849 ;;      Params:         0       0       0       0       0
  4850 ;;      Locals:         0       6       0       0       0
  4851 ;;      Temps:          0       6       0       0       0
  4852 ;;      Totals:         0      12       0       0       0
  4853 ;;Total ram usage:       12 bytes
  4854 ;; Hardware stack levels used:    1
  4855 ;; Hardware stack levels required when called:    3
  4856 ;; This function calls:
  4857 ;;		_get_matrix_bit
  4858 ;; This function is called by:
  4859 ;;		_find_best_solution
  4860 ;; This function uses a non-reentrant model
  4861 ;;
  4862                           
  4863                           
  4864                           ;psect for function _get_holes_after_merge
  4865  0387                     _get_holes_after_merge:	
  4866                           
  4867                           ;incstack = 0
  4868                           ; Regs used in _get_holes_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  4869                           ;get_holes_after_merge@matrix stored from wreg
  4870  0387  1283               	bcf	3,5	;RP0=0, select bank0
  4871  0388  1303               	bcf	3,6	;RP1=0, select bank0
  4872  0389  00A9               	movwf	get_holes_after_merge@matrix
  4873                           
  4874                           ;teris_16f886.c: 1204: int8_t start = -1;
  4875  038A  01A8               	clrf	get_holes_after_merge@start
  4876  038B  03A8               	decf	get_holes_after_merge@start,f
  4877                           
  4878                           ;teris_16f886.c: 1205: int8_t stop = -1;
  4879  038C  01A7               	clrf	get_holes_after_merge@stop
  4880  038D  03A7               	decf	get_holes_after_merge@stop,f
  4881                           
  4882                           ;teris_16f886.c: 1206: uint8_t num_hole = 0;
  4883  038E  01A6               	clrf	get_holes_after_merge@num_hole
  4884                           
  4885                           ;teris_16f886.c: 1207: for(int8_t col = 0; col < 8; col++)
  4886  038F  01AA               	clrf	get_holes_after_merge@col
  4887  0390  082A               	movf	get_holes_after_merge@col,w
  4888  0391  3A80               	xorlw	128
  4889  0392  3E78               	addlw	-136
  4890  0393  1803               	btfsc	3,0
  4891  0394  2C93               	goto	l3349
  4892  0395                     l3287:	
  4893                           
  4894                           ;teris_16f886.c: 1208: {
  4895                           ;teris_16f886.c: 1209: start = stop = -1;
  4896  0395  30FF               	movlw	255
  4897  0396  00A7               	movwf	get_holes_after_merge@stop
  4898  0397  00A0               	movwf	??_get_holes_after_merge
  4899  0398  0820               	movf	??_get_holes_after_merge,w
  4900  0399  00A8               	movwf	get_holes_after_merge@start
  4901                           
  4902                           ;teris_16f886.c: 1210: for(int8_t row = 0; row < 16; row++)
  4903  039A  01AB               	clrf	get_holes_after_merge@row
  4904  039B  082B               	movf	get_holes_after_merge@row,w
  4905  039C  3A80               	xorlw	128
  4906  039D  3E70               	addlw	-144
  4907  039E  1803               	btfsc	3,0
  4908  039F  2C5D               	goto	l475
  4909  03A0                     l3295:	
  4910                           
  4911                           ;teris_16f886.c: 1211: {
  4912                           ;teris_16f886.c: 1212: if(col == 0)
  4913  03A0  082A               	movf	get_holes_after_merge@col,w
  4914  03A1  1D03               	btfss	3,2
  4915  03A2  2BB6               	goto	l3305
  4916                           
  4917                           ;teris_16f886.c: 1213: {
  4918                           ;teris_16f886.c: 1214: if((get_matrix_bit(matrix->row, row, col) == 0) && (get_matrix_bi
      +                          t(matrix->row, row, col + 1) == 1))
  4919  03A3  0829               	movf	get_holes_after_merge@matrix,w
  4920  03A4  00F7               	movwf	get_matrix_bit@byte
  4921  03A5  3000               	movlw	0
  4922  03A6  00F8               	movwf	get_matrix_bit@byte+1
  4923  03A7  082B               	movf	get_holes_after_merge@row,w
  4924  03A8  00A0               	movwf	??_get_holes_after_merge
  4925  03A9  0820               	movf	??_get_holes_after_merge,w
  4926  03AA  00F9               	movwf	get_matrix_bit@row
  4927  03AB  082A               	movf	get_holes_after_merge@col,w
  4928  03AC  00A1               	movwf	??_get_holes_after_merge+1
  4929  03AD  0821               	movf	??_get_holes_after_merge+1,w
  4930  03AE  00FA               	movwf	get_matrix_bit@col
  4931  03AF  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  4932  03B4  3A00               	xorlw	0
  4933  03B5  2C04               	goto	L8
  4934  03B6                     l3305:	
  4935                           ;teris_16f886.c: 1219: }
  4936                           ;teris_16f886.c: 1220: }
  4937                           ;teris_16f886.c: 1221: }
  4938                           
  4939                           ;teris_16f886.c: 1217: {
  4940                           ;teris_16f886.c: 1218: start = row;
  4941                           
  4942                           ;teris_16f886.c: 1215: {
  4943                           ;teris_16f886.c: 1216: if(start == -1)
  4944                           
  4945                           
  4946                           ;teris_16f886.c: 1222: else if(col == 8 - 1)
  4947  03B6  3007               	movlw	7
  4948  03B7  062A               	xorwf	get_holes_after_merge@col,w
  4949  03B8  1D03               	btfss	3,2
  4950  03B9  2BDB               	goto	l3315
  4951                           
  4952                           ;teris_16f886.c: 1223: {
  4953                           ;teris_16f886.c: 1224: if((get_matrix_bit(matrix->row, row, col) == 0) && (get_matrix_bi
      +                          t(matrix->row, row, col - 1) == 1))
  4954  03BA  0829               	movf	get_holes_after_merge@matrix,w
  4955  03BB  00F7               	movwf	get_matrix_bit@byte
  4956  03BC  3000               	movlw	0
  4957  03BD  00F8               	movwf	get_matrix_bit@byte+1
  4958  03BE  082B               	movf	get_holes_after_merge@row,w
  4959  03BF  00A0               	movwf	??_get_holes_after_merge
  4960  03C0  0820               	movf	??_get_holes_after_merge,w
  4961  03C1  00F9               	movwf	get_matrix_bit@row
  4962  03C2  082A               	movf	get_holes_after_merge@col,w
  4963  03C3  00A1               	movwf	??_get_holes_after_merge+1
  4964  03C4  0821               	movf	??_get_holes_after_merge+1,w
  4965  03C5  00FA               	movwf	get_matrix_bit@col
  4966  03C6  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  4967  03CB  3A00               	xorlw	0
  4968  03CC  1D03               	skipz
  4969  03CD  2C26               	goto	l3325
  4970  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  4971  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  4972  03D0  0829               	movf	get_holes_after_merge@matrix,w
  4973  03D1  00F7               	movwf	get_matrix_bit@byte
  4974  03D2  3000               	movlw	0
  4975  03D3  00F8               	movwf	get_matrix_bit@byte+1
  4976  03D4  082B               	movf	get_holes_after_merge@row,w
  4977  03D5  00A0               	movwf	??_get_holes_after_merge
  4978  03D6  0820               	movf	??_get_holes_after_merge,w
  4979  03D7  00F9               	movwf	get_matrix_bit@row
  4980  03D8  082A               	movf	get_holes_after_merge@col,w
  4981  03D9  3EFF               	addlw	255
  4982  03DA  2C12               	goto	L9
  4983  03DB                     l3315:	
  4984                           ;teris_16f886.c: 1229: }
  4985                           ;teris_16f886.c: 1230: }
  4986                           ;teris_16f886.c: 1231: }
  4987                           
  4988                           ;teris_16f886.c: 1227: {
  4989                           ;teris_16f886.c: 1228: start = row;
  4990                           
  4991                           ;teris_16f886.c: 1225: {
  4992                           ;teris_16f886.c: 1226: if(start == -1)
  4993                           
  4994                           
  4995                           ;teris_16f886.c: 1232: else
  4996                           ;teris_16f886.c: 1233: {
  4997                           ;teris_16f886.c: 1234: if((get_matrix_bit(matrix->row, row, col) == 0) && (get_matrix_bi
      +                          t(matrix->row, row, col - 1) == 1) && (get_matrix_bit(matrix->row, row, col + 1) == 1))
  4998  03DB  0829               	movf	get_holes_after_merge@matrix,w
  4999  03DC  00F7               	movwf	get_matrix_bit@byte
  5000  03DD  3000               	movlw	0
  5001  03DE  00F8               	movwf	get_matrix_bit@byte+1
  5002  03DF  082B               	movf	get_holes_after_merge@row,w
  5003  03E0  00A0               	movwf	??_get_holes_after_merge
  5004  03E1  0820               	movf	??_get_holes_after_merge,w
  5005  03E2  00F9               	movwf	get_matrix_bit@row
  5006  03E3  082A               	movf	get_holes_after_merge@col,w
  5007  03E4  00A1               	movwf	??_get_holes_after_merge+1
  5008  03E5  0821               	movf	??_get_holes_after_merge+1,w
  5009  03E6  00FA               	movwf	get_matrix_bit@col
  5010  03E7  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  5011  03EC  3A00               	xorlw	0
  5012  03ED  1D03               	skipz
  5013  03EE  2C26               	goto	l3325
  5014  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  5015  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  5016  03F1  0829               	movf	get_holes_after_merge@matrix,w
  5017  03F2  00F7               	movwf	get_matrix_bit@byte
  5018  03F3  3000               	movlw	0
  5019  03F4  00F8               	movwf	get_matrix_bit@byte+1
  5020  03F5  082B               	movf	get_holes_after_merge@row,w
  5021  03F6  00A0               	movwf	??_get_holes_after_merge
  5022  03F7  0820               	movf	??_get_holes_after_merge,w
  5023  03F8  00F9               	movwf	get_matrix_bit@row
  5024  03F9  082A               	movf	get_holes_after_merge@col,w
  5025  03FA  3EFF               	addlw	255
  5026  03FB  00A1               	movwf	??_get_holes_after_merge+1
  5027  03FC  0821               	movf	??_get_holes_after_merge+1,w
  5028  03FD  00FA               	movwf	get_matrix_bit@col
  5029  03FE  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  5030  0403  3A01               	xorlw	1
  5031  0404                     L8:	
  5032  0404  1D03               	skipz
  5033  0405  2C26               	goto	l3325
  5034  0406  1283               	bcf	3,5	;RP0=0, select bank0
  5035  0407  1303               	bcf	3,6	;RP1=0, select bank0
  5036  0408  0829               	movf	get_holes_after_merge@matrix,w
  5037  0409  00F7               	movwf	get_matrix_bit@byte
  5038  040A  3000               	movlw	0
  5039  040B  00F8               	movwf	get_matrix_bit@byte+1
  5040  040C  082B               	movf	get_holes_after_merge@row,w
  5041  040D  00A0               	movwf	??_get_holes_after_merge
  5042  040E  0820               	movf	??_get_holes_after_merge,w
  5043  040F  00F9               	movwf	get_matrix_bit@row
  5044  0410  082A               	movf	get_holes_after_merge@col,w
  5045  0411  3E01               	addlw	1
  5046  0412                     L9:	
  5047  0412  00A1               	movwf	??_get_holes_after_merge+1
  5048  0413  0821               	movf	??_get_holes_after_merge+1,w
  5049  0414  00FA               	movwf	get_matrix_bit@col
  5050  0415  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  5051  041A  3A01               	xorlw	1
  5052  041B  1D03               	skipz
  5053  041C  2C26               	goto	l3325
  5054                           
  5055                           ;teris_16f886.c: 1235: {
  5056                           ;teris_16f886.c: 1236: if(start == -1)
  5057  041D  1283               	bcf	3,5	;RP0=0, select bank0
  5058  041E  1303               	bcf	3,6	;RP1=0, select bank0
  5059  041F  0A28               	incf	get_holes_after_merge@start,w
  5060  0420  1D03               	btfss	3,2
  5061  0421  2C26               	goto	l3325
  5062                           
  5063                           ;teris_16f886.c: 1237: {
  5064                           ;teris_16f886.c: 1238: start = row;
  5065  0422  082B               	movf	get_holes_after_merge@row,w
  5066  0423  00A0               	movwf	??_get_holes_after_merge
  5067  0424  0820               	movf	??_get_holes_after_merge,w
  5068  0425  00A8               	movwf	get_holes_after_merge@start
  5069  0426                     l3325:	
  5070                           
  5071                           ;teris_16f886.c: 1239: }
  5072                           ;teris_16f886.c: 1240: }
  5073                           ;teris_16f886.c: 1241: }
  5074                           ;teris_16f886.c: 1242: if(start >= 0)
  5075  0426  1283               	bcf	3,5	;RP0=0, select bank0
  5076  0427  1303               	bcf	3,6	;RP1=0, select bank0
  5077  0428  1BA8               	btfsc	get_holes_after_merge@start,7
  5078  0429  2C52               	goto	l486
  5079                           
  5080                           ;teris_16f886.c: 1243: {
  5081                           ;teris_16f886.c: 1244: if(row == 16 - 1)
  5082  042A  300F               	movlw	15
  5083  042B  062B               	xorwf	get_holes_after_merge@row,w
  5084  042C  1D03               	btfss	3,2
  5085  042D  2C33               	goto	l3333
  5086                           
  5087                           ;teris_16f886.c: 1245: {
  5088                           ;teris_16f886.c: 1246: if(stop == -1)
  5089  042E  0A27               	incf	get_holes_after_merge@stop,w
  5090  042F  1D03               	btfss	3,2
  5091  0430  2C52               	goto	l486
  5092                           
  5093                           ;teris_16f886.c: 1247: {
  5094                           ;teris_16f886.c: 1248: stop = 16;
  5095  0431  3010               	movlw	16
  5096  0432  2C4F               	goto	L7
  5097  0433                     l3333:	
  5098                           ;teris_16f886.c: 1249: }
  5099                           ;teris_16f886.c: 1250: }
  5100                           
  5101                           
  5102                           ;teris_16f886.c: 1251: else if(get_matrix_bit(matrix->row, row + 1, col) == 1)
  5103  0433  0829               	movf	get_holes_after_merge@matrix,w
  5104  0434  00F7               	movwf	get_matrix_bit@byte
  5105  0435  3000               	movlw	0
  5106  0436  00F8               	movwf	get_matrix_bit@byte+1
  5107  0437  082B               	movf	get_holes_after_merge@row,w
  5108  0438  3E01               	addlw	1
  5109  0439  00A0               	movwf	??_get_holes_after_merge
  5110  043A  0820               	movf	??_get_holes_after_merge,w
  5111  043B  00F9               	movwf	get_matrix_bit@row
  5112  043C  082A               	movf	get_holes_after_merge@col,w
  5113  043D  00A1               	movwf	??_get_holes_after_merge+1
  5114  043E  0821               	movf	??_get_holes_after_merge+1,w
  5115  043F  00FA               	movwf	get_matrix_bit@col
  5116  0440  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  5117  0445  3A01               	xorlw	1
  5118  0446  1D03               	skipz
  5119  0447  2C52               	goto	l486
  5120                           
  5121                           ;teris_16f886.c: 1252: {
  5122                           ;teris_16f886.c: 1253: if(stop == -1)
  5123  0448  1283               	bcf	3,5	;RP0=0, select bank0
  5124  0449  1303               	bcf	3,6	;RP1=0, select bank0
  5125  044A  0A27               	incf	get_holes_after_merge@stop,w
  5126  044B  1D03               	btfss	3,2
  5127  044C  2C52               	goto	l486
  5128                           
  5129                           ;teris_16f886.c: 1254: {
  5130                           ;teris_16f886.c: 1255: stop = row + 1;
  5131  044D  082B               	movf	get_holes_after_merge@row,w
  5132  044E  3E01               	addlw	1
  5133  044F                     L7:	
  5134  044F  00A0               	movwf	??_get_holes_after_merge
  5135  0450  0820               	movf	??_get_holes_after_merge,w
  5136  0451  00A7               	movwf	get_holes_after_merge@stop
  5137  0452                     l486:	
  5138  0452  3001               	movlw	1
  5139  0453  1283               	bcf	3,5	;RP0=0, select bank0
  5140  0454  1303               	bcf	3,6	;RP1=0, select bank0
  5141  0455  00A0               	movwf	??_get_holes_after_merge
  5142  0456  0820               	movf	??_get_holes_after_merge,w
  5143  0457  07AB               	addwf	get_holes_after_merge@row,f
  5144  0458  082B               	movf	get_holes_after_merge@row,w
  5145  0459  3A80               	xorlw	128
  5146  045A  3E70               	addlw	-144
  5147  045B  1C03               	skipc
  5148  045C  2BA0               	goto	l3295
  5149  045D                     l475:	
  5150                           
  5151                           ;teris_16f886.c: 1256: }
  5152                           ;teris_16f886.c: 1257: }
  5153                           ;teris_16f886.c: 1258: }
  5154                           ;teris_16f886.c: 1260: }
  5155                           ;teris_16f886.c: 1261: if((start >= 0) && (stop >= 0) && (stop - start >= 3))
  5156  045D  1FA8               	btfss	get_holes_after_merge@start,7
  5157  045E  1BA7               	btfsc	get_holes_after_merge@stop,7
  5158  045F  2C88               	goto	l492
  5159  0460  0828               	movf	get_holes_after_merge@start,w
  5160  0461  00A0               	movwf	??_get_holes_after_merge
  5161  0462  01A1               	clrf	??_get_holes_after_merge+1
  5162  0463  1BA0               	btfsc	??_get_holes_after_merge,7
  5163  0464  03A1               	decf	??_get_holes_after_merge+1,f
  5164  0465  09A0               	comf	??_get_holes_after_merge,f
  5165  0466  09A1               	comf	??_get_holes_after_merge+1,f
  5166  0467  0AA0               	incf	??_get_holes_after_merge,f
  5167  0468  1903               	skipnz
  5168  0469  0AA1               	incf	??_get_holes_after_merge+1,f
  5169  046A  0827               	movf	get_holes_after_merge@stop,w
  5170  046B  00A2               	movwf	??_get_holes_after_merge+2
  5171  046C  01A3               	clrf	??_get_holes_after_merge+3
  5172  046D  1BA2               	btfsc	??_get_holes_after_merge+2,7
  5173  046E  03A3               	decf	??_get_holes_after_merge+3,f
  5174  046F  0820               	movf	??_get_holes_after_merge,w
  5175  0470  0722               	addwf	??_get_holes_after_merge+2,w
  5176  0471  00A4               	movwf	??_get_holes_after_merge+4
  5177  0472  0821               	movf	??_get_holes_after_merge+1,w
  5178  0473  1803               	skipnc
  5179  0474  0A21               	incf	??_get_holes_after_merge+1,w
  5180  0475  0723               	addwf	??_get_holes_after_merge+3,w
  5181  0476  00A5               	movwf	??_get_holes_after_merge+5
  5182  0477  0825               	movf	??_get_holes_after_merge+5,w
  5183  0478  3A80               	xorlw	128
  5184  0479  00FF               	movwf	127
  5185  047A  3080               	movlw	128
  5186  047B  027F               	subwf	127,w
  5187  047C  1D03               	skipz
  5188  047D  2C80               	goto	u3455
  5189  047E  3003               	movlw	3
  5190  047F  0224               	subwf	??_get_holes_after_merge+4,w
  5191  0480                     u3455:	
  5192  0480  1C03               	skipc
  5193  0481  2C88               	goto	l492
  5194                           
  5195                           ;teris_16f886.c: 1262: {
  5196                           ;teris_16f886.c: 1268: num_hole++;
  5197  0482  3001               	movlw	1
  5198  0483  1283               	bcf	3,5	;RP0=0, select bank0
  5199  0484  1303               	bcf	3,6	;RP1=0, select bank0
  5200  0485  00A0               	movwf	??_get_holes_after_merge
  5201  0486  0820               	movf	??_get_holes_after_merge,w
  5202  0487  07A6               	addwf	get_holes_after_merge@num_hole,f
  5203  0488                     l492:	
  5204  0488  3001               	movlw	1
  5205  0489  1283               	bcf	3,5	;RP0=0, select bank0
  5206  048A  1303               	bcf	3,6	;RP1=0, select bank0
  5207  048B  00A0               	movwf	??_get_holes_after_merge
  5208  048C  0820               	movf	??_get_holes_after_merge,w
  5209  048D  07AA               	addwf	get_holes_after_merge@col,f
  5210  048E  082A               	movf	get_holes_after_merge@col,w
  5211  048F  3A80               	xorlw	128
  5212  0490  3E78               	addlw	-136
  5213  0491  1C03               	skipc
  5214  0492  2B95               	goto	l3287
  5215  0493                     l3349:	
  5216                           
  5217                           ;teris_16f886.c: 1269: }
  5218                           ;teris_16f886.c: 1270: }
  5219                           ;teris_16f886.c: 1274: return num_hole;
  5220  0493  0826               	movf	get_holes_after_merge@num_hole,w
  5221  0494  0008               	return
  5222  0495                     __end_of_get_holes_after_merge:	
  5223                           
  5224                           	psect	text21
  5225  0C11                     __ptext21:	
  5226 ;; *************** function _get_high_after_merge *****************
  5227 ;; Defined at:
  5228 ;;		line 1181 in file "teris_16f886.c"
  5229 ;; Parameters:    Size  Location     Type
  5230 ;;  y               1    wreg     char 
  5231 ;;  matrix          2   12[COMMON] PTR struct .
  5232 ;;		 -> NULL(0), g_matrix4x4(96), 
  5233 ;; Auto vars:     Size  Location     Type
  5234 ;;  y               1    2[BANK0 ] char 
  5235 ;;  col             1    3[BANK0 ] char 
  5236 ;;  row             1    4[BANK0 ] char 
  5237 ;; Return value:  Size  Location     Type
  5238 ;;                  1    wreg      unsigned char 
  5239 ;; Registers used:
  5240 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 0/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5246 ;;      Params:         2       0       0       0       0
  5247 ;;      Locals:         0       3       0       0       0
  5248 ;;      Temps:          0       2       0       0       0
  5249 ;;      Totals:         2       5       0       0       0
  5250 ;;Total ram usage:        7 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; Hardware stack levels required when called:    3
  5253 ;; This function calls:
  5254 ;;		_get_matrix_bit
  5255 ;; This function is called by:
  5256 ;;		_find_best_solution
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           
  5261                           ;psect for function _get_high_after_merge
  5262  0C11                     _get_high_after_merge:	
  5263                           
  5264                           ;incstack = 0
  5265                           ; Regs used in _get_high_after_merge: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  5266                           ;get_high_after_merge@y stored from wreg
  5267  0C11  1283               	bcf	3,5	;RP0=0, select bank0
  5268  0C12  1303               	bcf	3,6	;RP1=0, select bank0
  5269  0C13  00A2               	movwf	get_high_after_merge@y
  5270                           
  5271                           ;teris_16f886.c: 1186: for(int8_t row = 0; row < 4; row++)
  5272  0C14  01A4               	clrf	get_high_after_merge@row
  5273  0C15                     L10:	
  5274  0C15  0824               	movf	get_high_after_merge@row,w
  5275  0C16  3A80               	xorlw	128
  5276  0C17  3E7C               	addlw	-132
  5277  0C18  1803               	btfsc	3,0
  5278  0C19  0008               	return
  5279                           
  5280                           ;teris_16f886.c: 1187: {
  5281                           ;teris_16f886.c: 1188: for(int8_t col = 0; col < 4; col++)
  5282  0C1A  01A3               	clrf	get_high_after_merge@col
  5283  0C1B  0823               	movf	get_high_after_merge@col,w
  5284  0C1C  3A80               	xorlw	128
  5285  0C1D  3E7C               	addlw	-132
  5286  0C1E  1803               	btfsc	3,0
  5287  0C1F  2C47               	goto	l3275
  5288  0C20                     l3265:	
  5289                           
  5290                           ;teris_16f886.c: 1189: {
  5291                           ;teris_16f886.c: 1190: if(get_matrix_bit(matrix->row, row, col) == 1)
  5292  0C20  087C               	movf	get_high_after_merge@matrix,w
  5293  0C21  00F7               	movwf	get_matrix_bit@byte
  5294  0C22  087D               	movf	get_high_after_merge@matrix+1,w
  5295  0C23  00F8               	movwf	get_matrix_bit@byte+1
  5296  0C24  0824               	movf	get_high_after_merge@row,w
  5297  0C25  00A0               	movwf	??_get_high_after_merge
  5298  0C26  0820               	movf	??_get_high_after_merge,w
  5299  0C27  00F9               	movwf	get_matrix_bit@row
  5300  0C28  0823               	movf	get_high_after_merge@col,w
  5301  0C29  00A1               	movwf	??_get_high_after_merge+1
  5302  0C2A  0821               	movf	??_get_high_after_merge+1,w
  5303  0C2B  00FA               	movwf	get_matrix_bit@col
  5304  0C2C  160A  118A  278D  120A  158A  	fcall	_get_matrix_bit
  5305  0C31  3A01               	xorlw	1
  5306  0C32  1D03               	skipz
  5307  0C33  2C3C               	goto	l3271
  5308                           
  5309                           ;teris_16f886.c: 1191: {
  5310                           ;teris_16f886.c: 1197: return (uint8_t)(16 - y - row);
  5311  0C34  1283               	bcf	3,5	;RP0=0, select bank0
  5312  0C35  1303               	bcf	3,6	;RP1=0, select bank0
  5313  0C36  0824               	movf	get_high_after_merge@row,w
  5314  0C37  0722               	addwf	get_high_after_merge@y,w
  5315  0C38  3AFF               	xorlw	255
  5316  0C39  3E01               	addlw	1
  5317  0C3A  3E10               	addlw	16
  5318  0C3B  0008               	return
  5319  0C3C                     l3271:	
  5320  0C3C  3001               	movlw	1
  5321  0C3D  1283               	bcf	3,5	;RP0=0, select bank0
  5322  0C3E  1303               	bcf	3,6	;RP1=0, select bank0
  5323  0C3F  00A0               	movwf	??_get_high_after_merge
  5324  0C40  0820               	movf	??_get_high_after_merge,w
  5325  0C41  07A3               	addwf	get_high_after_merge@col,f
  5326  0C42  0823               	movf	get_high_after_merge@col,w
  5327  0C43  3A80               	xorlw	128
  5328  0C44  3E7C               	addlw	-132
  5329  0C45  1C03               	skipc
  5330  0C46  2C20               	goto	l3265
  5331  0C47                     l3275:	
  5332  0C47  3001               	movlw	1
  5333  0C48  00A0               	movwf	??_get_high_after_merge
  5334  0C49  0820               	movf	??_get_high_after_merge,w
  5335  0C4A  07A4               	addwf	get_high_after_merge@row,f
  5336  0C4B  2C15               	goto	L10
  5337  0C4C                     __end_of_get_high_after_merge:	
  5338                           
  5339                           	psect	text22
  5340  0A0A                     __ptext22:	
  5341 ;; *************** function _get_high *****************
  5342 ;; Defined at:
  5343 ;;		line 1167 in file "teris_16f886.c"
  5344 ;; Parameters:    Size  Location     Type
  5345 ;;  matrix          1    wreg     PTR struct .
  5346 ;;		 -> g_matrix16x8(16), 
  5347 ;; Auto vars:     Size  Location     Type
  5348 ;;  matrix          1    3[COMMON] PTR struct .
  5349 ;;		 -> g_matrix16x8(16), 
  5350 ;;  row             1    4[COMMON] char 
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  1    wreg      unsigned char 
  5353 ;; Registers used:
  5354 ;;		wreg, status,2, status,0, pclath, cstack
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5360 ;;      Params:         0       0       0       0       0
  5361 ;;      Locals:         2       0       0       0       0
  5362 ;;      Temps:          1       0       0       0       0
  5363 ;;      Totals:         3       0       0       0       0
  5364 ;;Total ram usage:        3 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; Hardware stack levels required when called:    1
  5367 ;; This function calls:
  5368 ;;		_is_row_empty
  5369 ;; This function is called by:
  5370 ;;		_find_best_solution
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           
  5375                           ;psect for function _get_high
  5376  0A0A                     _get_high:	
  5377                           
  5378                           ;incstack = 0
  5379                           ; Regs used in _get_high: [wreg+status,2+status,0+pclath+cstack]
  5380                           ;get_high@matrix stored from wreg
  5381  0A0A  00F3               	movwf	get_high@matrix
  5382                           
  5383                           ;teris_16f886.c: 1169: for(int8_t row = 16 - 1; row >= 0; row--)
  5384  0A0B  300F               	movlw	15
  5385  0A0C  00F2               	movwf	??_get_high
  5386  0A0D  0872               	movf	??_get_high,w
  5387  0A0E  00F4               	movwf	get_high@row
  5388  0A0F  1BF4               	btfsc	get_high@row,7
  5389  0A10  2A2A               	goto	l3249
  5390  0A11                     l3239:	
  5391                           
  5392                           ;teris_16f886.c: 1170: {
  5393                           ;teris_16f886.c: 1171: if(is_row_empty(matrix, row) == 1)
  5394  0A11  0874               	movf	get_high@row,w
  5395  0A12  00F2               	movwf	??_get_high
  5396  0A13  0872               	movf	??_get_high,w
  5397  0A14  00F0               	movwf	is_row_empty@row
  5398  0A15  0873               	movf	get_high@matrix,w
  5399  0A16  160A  118A  2756  120A  158A  	fcall	_is_row_empty
  5400  0A1B  3A01               	xorlw	1
  5401  0A1C  1D03               	skipz
  5402  0A1D  2A24               	goto	l3245
  5403                           
  5404                           ;teris_16f886.c: 1172: {
  5405                           ;teris_16f886.c: 1176: return (uint8_t)(16 - row - 1);
  5406  0A1E  0874               	movf	get_high@row,w
  5407  0A1F  3E01               	addlw	1
  5408  0A20  3AFF               	xorlw	255
  5409  0A21  3E01               	addlw	1
  5410  0A22  3E10               	addlw	16
  5411  0A23  0008               	return
  5412  0A24                     l3245:	
  5413  0A24  30FF               	movlw	255
  5414  0A25  00F2               	movwf	??_get_high
  5415  0A26  0872               	movf	??_get_high,w
  5416  0A27  07F4               	addwf	get_high@row,f
  5417  0A28  1FF4               	btfss	get_high@row,7
  5418  0A29  2A11               	goto	l3239
  5419  0A2A                     l3249:	
  5420                           
  5421                           ;teris_16f886.c: 1177: }
  5422                           ;teris_16f886.c: 1178: }
  5423                           ;teris_16f886.c: 1179: return 16;
  5424  0A2A  3010               	movlw	16
  5425  0A2B  0008               	return
  5426  0A2C                     __end_of_get_high:	
  5427                           
  5428                           	psect	text23
  5429  1756                     __ptext23:	
  5430 ;; *************** function _is_row_empty *****************
  5431 ;; Defined at:
  5432 ;;		line 833 in file "teris_16f886.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;  matrix          1    wreg     PTR const struct .
  5435 ;;		 -> g_matrix16x8(16), 
  5436 ;;  row             1    0[COMMON] unsigned char 
  5437 ;; Auto vars:     Size  Location     Type
  5438 ;;  matrix          1    1[COMMON] PTR const struct .
  5439 ;;		 -> g_matrix16x8(16), 
  5440 ;; Return value:  Size  Location     Type
  5441 ;;                  1    wreg      unsigned char 
  5442 ;; Registers used:
  5443 ;;		wreg, status,2, status,0
  5444 ;; Tracked objects:
  5445 ;;		On entry : 0/0
  5446 ;;		On exit  : 0/0
  5447 ;;		Unchanged: 0/0
  5448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5449 ;;      Params:         1       0       0       0       0
  5450 ;;      Locals:         1       0       0       0       0
  5451 ;;      Temps:          0       0       0       0       0
  5452 ;;      Totals:         2       0       0       0       0
  5453 ;;Total ram usage:        2 bytes
  5454 ;; Hardware stack levels used:    1
  5455 ;; This function calls:
  5456 ;;		Nothing
  5457 ;; This function is called by:
  5458 ;;		_get_high
  5459 ;; This function uses a non-reentrant model
  5460 ;;
  5461                           
  5462                           
  5463                           ;psect for function _is_row_empty
  5464  1756                     _is_row_empty:	
  5465                           
  5466                           ;incstack = 0
  5467                           ; Regs used in _is_row_empty: [wreg+status,2+status,0]
  5468                           ;is_row_empty@matrix stored from wreg
  5469  1756  00F1               	movwf	is_row_empty@matrix
  5470                           
  5471                           ;teris_16f886.c: 835: if(matrix->row == 0x0)
  5472  1757  0871               	movf	is_row_empty@matrix,w
  5473  1758  1D03               	btfss	3,2
  5474  1759  2F5C               	goto	l2871
  5475                           
  5476                           ;teris_16f886.c: 836: {
  5477                           ;teris_16f886.c: 837: return 1;
  5478  175A  3001               	movlw	1
  5479  175B  0008               	return
  5480  175C                     l2871:	
  5481                           
  5482                           ;teris_16f886.c: 838: }
  5483                           ;teris_16f886.c: 839: return 0;
  5484  175C  3000               	movlw	0
  5485  175D  0008               	return
  5486  175E                     __end_of_is_row_empty:	
  5487                           
  5488                           	psect	text24
  5489  0154                     __ptext24:	
  5490 ;; *************** function _get_heavy *****************
  5491 ;; Defined at:
  5492 ;;		line 1084 in file "teris_16f886.c"
  5493 ;; Parameters:    Size  Location     Type
  5494 ;;  matrix          1    wreg     PTR const struct .
  5495 ;;		 -> temp_matrix16x8(16), 
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;  matrix          1    6[BANK0 ] PTR const struct .
  5498 ;;		 -> temp_matrix16x8(16), 
  5499 ;;  row             1    9[BANK0 ] char 
  5500 ;;  col             1    8[BANK0 ] unsigned char 
  5501 ;;  risk            2    3[BANK0 ] unsigned int 
  5502 ;;  pre             1    7[BANK0 ] unsigned char 
  5503 ;;  start           1    5[BANK0 ] unsigned char 
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  2   12[COMMON] unsigned int 
  5506 ;; Registers used:
  5507 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5513 ;;      Params:         2       0       0       0       0
  5514 ;;      Locals:         0       7       0       0       0
  5515 ;;      Temps:          0       3       0       0       0
  5516 ;;      Totals:         2      10       0       0       0
  5517 ;;Total ram usage:       12 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    3
  5520 ;; This function calls:
  5521 ;;		_get_matrix_bit
  5522 ;; This function is called by:
  5523 ;;		_find_best_solution
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           
  5528                           ;psect for function _get_heavy
  5529  0154                     _get_heavy:	
  5530                           
  5531                           ;incstack = 0
  5532                           ; Regs used in _get_heavy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5533                           ;get_heavy@matrix stored from wreg
  5534  0154  1283               	bcf	3,5	;RP0=0, select bank0
  5535  0155  1303               	bcf	3,6	;RP1=0, select bank0
  5536  0156  00A6               	movwf	get_heavy@matrix
  5537                           
  5538                           ;teris_16f886.c: 1086: uint8_t start;
  5539                           ;teris_16f886.c: 1087: uint16_t risk = 0;
  5540  0157  01A3               	clrf	get_heavy@risk
  5541  0158  01A4               	clrf	get_heavy@risk+1
  5542                           
  5543                           ;teris_16f886.c: 1088: uint8_t pre = 0xFF;
  5544  0159  30FF               	movlw	255
  5545  015A  00A0               	movwf	??_get_heavy
  5546  015B  0820               	movf	??_get_heavy,w
  5547  015C  00A7               	movwf	get_heavy@pre
  5548                           
  5549                           ;teris_16f886.c: 1089: for(uint8_t col = 0; col < 8; col++)
  5550  015D  01A8               	clrf	get_heavy@col
  5551  015E  3008               	movlw	8
  5552  015F  0228               	subwf	get_heavy@col,w
  5553  0160  1803               	btfsc	3,0
  5554  0161  29D1               	goto	l3201
  5555  0162                     l3167:	
  5556                           
  5557                           ;teris_16f886.c: 1090: {
  5558                           ;teris_16f886.c: 1091: pre = 0xFF;
  5559  0162  30FF               	movlw	255
  5560  0163  00A0               	movwf	??_get_heavy
  5561  0164  0820               	movf	??_get_heavy,w
  5562  0165  00A7               	movwf	get_heavy@pre
  5563                           
  5564                           ;teris_16f886.c: 1092: start = 0;
  5565  0166  01A5               	clrf	get_heavy@start
  5566                           
  5567                           ;teris_16f886.c: 1093: for(int8_t row = 16 - 1; row >= 0; row--)
  5568  0167  300F               	movlw	15
  5569  0168  00A0               	movwf	??_get_heavy
  5570  0169  0820               	movf	??_get_heavy,w
  5571  016A  00A9               	movwf	get_heavy@row
  5572  016B  1BA9               	btfsc	get_heavy@row,7
  5573  016C  29C9               	goto	l3197
  5574  016D                     l3177:	
  5575                           
  5576                           ;teris_16f886.c: 1094: {
  5577                           ;teris_16f886.c: 1095: if(pre == 0xFF)
  5578  016D  0A27               	incf	get_heavy@pre,w
  5579  016E  1D03               	btfss	3,2
  5580  016F  2987               	goto	l3181
  5581                           
  5582                           ;teris_16f886.c: 1096: {
  5583                           ;teris_16f886.c: 1097: pre = get_matrix_bit(matrix->row, row, col);
  5584  0170  0826               	movf	get_heavy@matrix,w
  5585  0171  00F7               	movwf	get_matrix_bit@byte
  5586  0172  3000               	movlw	0
  5587  0173  00F8               	movwf	get_matrix_bit@byte+1
  5588  0174  0829               	movf	get_heavy@row,w
  5589  0175  00A0               	movwf	??_get_heavy
  5590  0176  0820               	movf	??_get_heavy,w
  5591  0177  00F9               	movwf	get_matrix_bit@row
  5592  0178  0828               	movf	get_heavy@col,w
  5593  0179  00A1               	movwf	??_get_heavy+1
  5594  017A  0821               	movf	??_get_heavy+1,w
  5595  017B  00FA               	movwf	get_matrix_bit@col
  5596  017C  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  5597  0181  1283               	bcf	3,5	;RP0=0, select bank0
  5598  0182  1303               	bcf	3,6	;RP1=0, select bank0
  5599  0183  00A2               	movwf	??_get_heavy+2
  5600  0184  0822               	movf	??_get_heavy+2,w
  5601  0185  00A7               	movwf	get_heavy@pre
  5602                           
  5603                           ;teris_16f886.c: 1098: }
  5604  0186  29C3               	goto	l3193
  5605  0187                     l3181:	
  5606                           
  5607                           ;teris_16f886.c: 1099: else
  5608                           ;teris_16f886.c: 1100: {
  5609                           ;teris_16f886.c: 1101: if(pre != get_matrix_bit(matrix->row, row, col))
  5610  0187  0826               	movf	get_heavy@matrix,w
  5611  0188  00F7               	movwf	get_matrix_bit@byte
  5612  0189  3000               	movlw	0
  5613  018A  00F8               	movwf	get_matrix_bit@byte+1
  5614  018B  0829               	movf	get_heavy@row,w
  5615  018C  00A0               	movwf	??_get_heavy
  5616  018D  0820               	movf	??_get_heavy,w
  5617  018E  00F9               	movwf	get_matrix_bit@row
  5618  018F  0828               	movf	get_heavy@col,w
  5619  0190  00A1               	movwf	??_get_heavy+1
  5620  0191  0821               	movf	??_get_heavy+1,w
  5621  0192  00FA               	movwf	get_matrix_bit@col
  5622  0193  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  5623  0198  1283               	bcf	3,5	;RP0=0, select bank0
  5624  0199  1303               	bcf	3,6	;RP1=0, select bank0
  5625  019A  0627               	xorwf	get_heavy@pre,w
  5626  019B  1903               	skipnz
  5627  019C  29BA               	goto	l3189
  5628                           
  5629                           ;teris_16f886.c: 1102: {
  5630                           ;teris_16f886.c: 1103: pre = get_matrix_bit(matrix->row, row, col);
  5631  019D  0826               	movf	get_heavy@matrix,w
  5632  019E  00F7               	movwf	get_matrix_bit@byte
  5633  019F  3000               	movlw	0
  5634  01A0  00F8               	movwf	get_matrix_bit@byte+1
  5635  01A1  0829               	movf	get_heavy@row,w
  5636  01A2  00A0               	movwf	??_get_heavy
  5637  01A3  0820               	movf	??_get_heavy,w
  5638  01A4  00F9               	movwf	get_matrix_bit@row
  5639  01A5  0828               	movf	get_heavy@col,w
  5640  01A6  00A1               	movwf	??_get_heavy+1
  5641  01A7  0821               	movf	??_get_heavy+1,w
  5642  01A8  00FA               	movwf	get_matrix_bit@col
  5643  01A9  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  5644  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  5645  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  5646  01B0  00A2               	movwf	??_get_heavy+2
  5647  01B1  0822               	movf	??_get_heavy+2,w
  5648  01B2  00A7               	movwf	get_heavy@pre
  5649                           
  5650                           ;teris_16f886.c: 1104: if(pre == 0)
  5651  01B3  0827               	movf	get_heavy@pre,w
  5652  01B4  1D03               	btfss	3,2
  5653  01B5  29B8               	goto	l435
  5654                           
  5655                           ;teris_16f886.c: 1105: {
  5656                           ;teris_16f886.c: 1106: start = 0;
  5657  01B6  01A5               	clrf	get_heavy@start
  5658                           
  5659                           ;teris_16f886.c: 1107: }
  5660  01B7  29BA               	goto	l3189
  5661  01B8                     l435:	
  5662                           
  5663                           ;teris_16f886.c: 1108: else
  5664                           ;teris_16f886.c: 1109: {
  5665                           ;teris_16f886.c: 1110: start = 1;
  5666  01B8  01A5               	clrf	get_heavy@start
  5667  01B9  0AA5               	incf	get_heavy@start,f
  5668  01BA                     l3189:	
  5669                           
  5670                           ;teris_16f886.c: 1111: }
  5671                           ;teris_16f886.c: 1112: }
  5672                           ;teris_16f886.c: 1113: if(start == 1)
  5673  01BA  0325               	decf	get_heavy@start,w
  5674  01BB  1D03               	btfss	3,2
  5675  01BC  29C3               	goto	l3193
  5676                           
  5677                           ;teris_16f886.c: 1114: {
  5678                           ;teris_16f886.c: 1115: risk++;
  5679  01BD  3001               	movlw	1
  5680  01BE  07A3               	addwf	get_heavy@risk,f
  5681  01BF  1803               	skipnc
  5682  01C0  0AA4               	incf	get_heavy@risk+1,f
  5683  01C1  3000               	movlw	0
  5684  01C2  07A4               	addwf	get_heavy@risk+1,f
  5685  01C3                     l3193:	
  5686  01C3  30FF               	movlw	255
  5687  01C4  00A0               	movwf	??_get_heavy
  5688  01C5  0820               	movf	??_get_heavy,w
  5689  01C6  07A9               	addwf	get_heavy@row,f
  5690  01C7  1FA9               	btfss	get_heavy@row,7
  5691  01C8  296D               	goto	l3177
  5692  01C9                     l3197:	
  5693  01C9  3001               	movlw	1
  5694  01CA  00A0               	movwf	??_get_heavy
  5695  01CB  0820               	movf	??_get_heavy,w
  5696  01CC  07A8               	addwf	get_heavy@col,f
  5697  01CD  3008               	movlw	8
  5698  01CE  0228               	subwf	get_heavy@col,w
  5699  01CF  1C03               	skipc
  5700  01D0  2962               	goto	l3167
  5701  01D1                     l3201:	
  5702                           
  5703                           ;teris_16f886.c: 1116: }
  5704                           ;teris_16f886.c: 1117: }
  5705                           ;teris_16f886.c: 1118: }
  5706                           ;teris_16f886.c: 1119: }
  5707                           ;teris_16f886.c: 1124: return risk;
  5708  01D1  0824               	movf	get_heavy@risk+1,w
  5709  01D2  00FD               	movwf	?_get_heavy+1
  5710  01D3  0823               	movf	get_heavy@risk,w
  5711  01D4  00FC               	movwf	?_get_heavy
  5712  01D5  0008               	return
  5713  01D6                     __end_of_get_heavy:	
  5714                           
  5715                           	psect	text25
  5716  00DD                     __ptext25:	
  5717 ;; *************** function _fall_off *****************
  5718 ;; Defined at:
  5719 ;;		line 960 in file "teris_16f886.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;  x               1    wreg     char 
  5722 ;;  y               1    0[BANK0 ] char 
  5723 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  5724 ;;		 -> NULL(0), g_matrix4x4(96), 
  5725 ;;  matrix16x8      1    3[BANK0 ] PTR const struct .
  5726 ;;		 -> g_matrix16x8(16), 
  5727 ;; Auto vars:     Size  Location     Type
  5728 ;;  x               1    4[BANK0 ] char 
  5729 ;;  col             1    5[BANK0 ] char 
  5730 ;;  row             1    6[BANK0 ] char 
  5731 ;; Return value:  Size  Location     Type
  5732 ;;                  1    wreg      unsigned char 
  5733 ;; Registers used:
  5734 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5735 ;; Tracked objects:
  5736 ;;		On entry : 0/0
  5737 ;;		On exit  : 0/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5740 ;;      Params:         0       4       0       0       0
  5741 ;;      Locals:         0       3       0       0       0
  5742 ;;      Temps:          2       0       0       0       0
  5743 ;;      Totals:         2       7       0       0       0
  5744 ;;Total ram usage:        9 bytes
  5745 ;; Hardware stack levels used:    1
  5746 ;; Hardware stack levels required when called:    3
  5747 ;; This function calls:
  5748 ;;		_get_matrix_bit
  5749 ;; This function is called by:
  5750 ;;		_find_best_solution
  5751 ;; This function uses a non-reentrant model
  5752 ;;
  5753                           
  5754                           
  5755                           ;psect for function _fall_off
  5756  00DD                     _fall_off:	
  5757                           
  5758                           ;incstack = 0
  5759                           ; Regs used in _fall_off: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5760                           ;fall_off@x stored from wreg
  5761  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  5762  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  5763  00DF  00A4               	movwf	fall_off@x
  5764  00E0                     l380:	
  5765                           ;teris_16f886.c: 962: while(1)
  5766                           
  5767                           
  5768                           ;teris_16f886.c: 963: {
  5769                           ;teris_16f886.c: 965: Seed++;
  5770  00E0  3001               	movlw	1
  5771  00E1  07DE               	addwf	_Seed,f
  5772  00E2  1803               	skipnc
  5773  00E3  0ADF               	incf	_Seed+1,f
  5774  00E4  3000               	movlw	0
  5775  00E5  07DF               	addwf	_Seed+1,f
  5776                           
  5777                           ;teris_16f886.c: 968: for(int8_t row = 4 - 1; row >= 0; row--)
  5778  00E6  3003               	movlw	3
  5779  00E7  00FC               	movwf	??_fall_off
  5780  00E8  087C               	movf	??_fall_off,w
  5781  00E9  00A6               	movwf	fall_off@row
  5782  00EA  1BA6               	btfsc	fall_off@row,7
  5783  00EB  294F               	goto	l3091
  5784  00EC                     l3063:	
  5785                           
  5786                           ;teris_16f886.c: 969: {
  5787                           ;teris_16f886.c: 970: for(int8_t col = 0; col < 4; col++)
  5788  00EC  01A5               	clrf	fall_off@col
  5789  00ED  0825               	movf	fall_off@col,w
  5790  00EE  3A80               	xorlw	128
  5791  00EF  3E7C               	addlw	-132
  5792  00F0  1803               	btfsc	3,0
  5793  00F1  2949               	goto	l3087
  5794  00F2                     l3069:	
  5795                           
  5796                           ;teris_16f886.c: 971: {
  5797                           ;teris_16f886.c: 972: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  5798  00F2  0821               	movf	fall_off@matrix4x4,w
  5799  00F3  00F7               	movwf	get_matrix_bit@byte
  5800  00F4  0822               	movf	fall_off@matrix4x4+1,w
  5801  00F5  00F8               	movwf	get_matrix_bit@byte+1
  5802  00F6  0826               	movf	fall_off@row,w
  5803  00F7  00FC               	movwf	??_fall_off
  5804  00F8  087C               	movf	??_fall_off,w
  5805  00F9  00F9               	movwf	get_matrix_bit@row
  5806  00FA  0825               	movf	fall_off@col,w
  5807  00FB  00FD               	movwf	??_fall_off+1
  5808  00FC  087D               	movf	??_fall_off+1,w
  5809  00FD  00FA               	movwf	get_matrix_bit@col
  5810  00FE  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  5811  0103  3A01               	xorlw	1
  5812  0104  1D03               	skipz
  5813  0105  293E               	goto	l3083
  5814                           
  5815                           ;teris_16f886.c: 973: {
  5816                           ;teris_16f886.c: 974: if(get_matrix_bit(matrix16x8->row, y + row + 1, x + col) == 1)
  5817  0106  1283               	bcf	3,5	;RP0=0, select bank0
  5818  0107  1303               	bcf	3,6	;RP1=0, select bank0
  5819  0108  0823               	movf	fall_off@matrix16x8,w
  5820  0109  00F7               	movwf	get_matrix_bit@byte
  5821  010A  3000               	movlw	0
  5822  010B  00F8               	movwf	get_matrix_bit@byte+1
  5823  010C  0826               	movf	fall_off@row,w
  5824  010D  0720               	addwf	fall_off@y,w
  5825  010E  3E01               	addlw	1
  5826  010F  00FC               	movwf	??_fall_off
  5827  0110  087C               	movf	??_fall_off,w
  5828  0111  00F9               	movwf	get_matrix_bit@row
  5829  0112  0825               	movf	fall_off@col,w
  5830  0113  0724               	addwf	fall_off@x,w
  5831  0114  00FD               	movwf	??_fall_off+1
  5832  0115  087D               	movf	??_fall_off+1,w
  5833  0116  00FA               	movwf	get_matrix_bit@col
  5834  0117  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  5835  011C  3A01               	xorlw	1
  5836  011D  1D03               	skipz
  5837  011E  2923               	goto	l3077
  5838                           
  5839                           ;teris_16f886.c: 975: {
  5840                           ;teris_16f886.c: 980: return y;
  5841  011F  1283               	bcf	3,5	;RP0=0, select bank0
  5842  0120  1303               	bcf	3,6	;RP1=0, select bank0
  5843  0121  0820               	movf	fall_off@y,w
  5844  0122  0008               	return
  5845  0123                     l3077:	
  5846                           
  5847                           ;teris_16f886.c: 981: }
  5848                           ;teris_16f886.c: 982: if((y + row) >= (16 - 1))
  5849  0123  1283               	bcf	3,5	;RP0=0, select bank0
  5850  0124  1303               	bcf	3,6	;RP1=0, select bank0
  5851  0125  0820               	movf	fall_off@y,w
  5852  0126  0726               	addwf	fall_off@row,w
  5853  0127  00FC               	movwf	??_fall_off
  5854  0128  01FD               	clrf	??_fall_off+1
  5855  0129  1803               	skipnc
  5856  012A  0AFD               	incf	??_fall_off+1,f
  5857  012B  1BA0               	btfsc	fall_off@y,7
  5858  012C  03FD               	decf	??_fall_off+1,f
  5859  012D  1BA6               	btfsc	fall_off@row,7
  5860  012E  03FD               	decf	??_fall_off+1,f
  5861  012F  087D               	movf	??_fall_off+1,w
  5862  0130  3A80               	xorlw	128
  5863  0131  00FF               	movwf	127
  5864  0132  3080               	movlw	128
  5865  0133  027F               	subwf	127,w
  5866  0134  1D03               	skipz
  5867  0135  2938               	goto	u2895
  5868  0136  300F               	movlw	15
  5869  0137  027C               	subwf	??_fall_off,w
  5870  0138                     u2895:	
  5871  0138  1C03               	skipc
  5872  0139  293E               	goto	l3083
  5873                           
  5874                           ;teris_16f886.c: 983: {
  5875                           ;teris_16f886.c: 988: return y;
  5876  013A  1283               	bcf	3,5	;RP0=0, select bank0
  5877  013B  1303               	bcf	3,6	;RP1=0, select bank0
  5878  013C  0820               	movf	fall_off@y,w
  5879  013D  0008               	return
  5880  013E                     l3083:	
  5881  013E  3001               	movlw	1
  5882  013F  00FC               	movwf	??_fall_off
  5883  0140  087C               	movf	??_fall_off,w
  5884  0141  1283               	bcf	3,5	;RP0=0, select bank0
  5885  0142  1303               	bcf	3,6	;RP1=0, select bank0
  5886  0143  07A5               	addwf	fall_off@col,f
  5887  0144  0825               	movf	fall_off@col,w
  5888  0145  3A80               	xorlw	128
  5889  0146  3E7C               	addlw	-132
  5890  0147  1C03               	skipc
  5891  0148  28F2               	goto	l3069
  5892  0149                     l3087:	
  5893  0149  30FF               	movlw	255
  5894  014A  00FC               	movwf	??_fall_off
  5895  014B  087C               	movf	??_fall_off,w
  5896  014C  07A6               	addwf	fall_off@row,f
  5897  014D  1FA6               	btfss	fall_off@row,7
  5898  014E  28EC               	goto	l3063
  5899  014F                     l3091:	
  5900                           
  5901                           ;teris_16f886.c: 989: }
  5902                           ;teris_16f886.c: 990: }
  5903                           ;teris_16f886.c: 991: }
  5904                           ;teris_16f886.c: 992: }
  5905                           ;teris_16f886.c: 993: y++;
  5906  014F  3001               	movlw	1
  5907  0150  00FC               	movwf	??_fall_off
  5908  0151  087C               	movf	??_fall_off,w
  5909  0152  07A0               	addwf	fall_off@y,f
  5910  0153  28E0               	goto	l380
  5911  0154                     __end_of_fall_off:	
  5912                           
  5913                           	psect	text26
  5914  0A4E                     __ptext26:	
  5915 ;; *************** function ___wmul *****************
  5916 ;; Defined at:
  5917 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  5918 ;; Parameters:    Size  Location     Type
  5919 ;;  multiplier      2   12[BANK0 ] unsigned int 
  5920 ;;  multiplicand    2   14[BANK0 ] unsigned int 
  5921 ;; Auto vars:     Size  Location     Type
  5922 ;;  product         2   12[COMMON] unsigned int 
  5923 ;; Return value:  Size  Location     Type
  5924 ;;                  2   12[BANK0 ] unsigned int 
  5925 ;; Registers used:
  5926 ;;		wreg, status,2, status,0
  5927 ;; Tracked objects:
  5928 ;;		On entry : 0/0
  5929 ;;		On exit  : 0/0
  5930 ;;		Unchanged: 0/0
  5931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5932 ;;      Params:         0       4       0       0       0
  5933 ;;      Locals:         2       0       0       0       0
  5934 ;;      Temps:          0       0       0       0       0
  5935 ;;      Totals:         2       4       0       0       0
  5936 ;;Total ram usage:        6 bytes
  5937 ;; Hardware stack levels used:    1
  5938 ;; This function calls:
  5939 ;;		Nothing
  5940 ;; This function is called by:
  5941 ;;		_find_best_solution
  5942 ;;		_sprintf
  5943 ;; This function uses a non-reentrant model
  5944 ;;
  5945                           
  5946                           
  5947                           ;psect for function ___wmul
  5948  0A4E                     ___wmul:	
  5949                           
  5950                           ;incstack = 0
  5951                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5952  0A4E  01FC               	clrf	___wmul@product
  5953  0A4F  01FD               	clrf	___wmul@product+1
  5954  0A50                     l3379:	
  5955  0A50  1283               	bcf	3,5	;RP0=0, select bank0
  5956  0A51  1303               	bcf	3,6	;RP1=0, select bank0
  5957  0A52  1C2C               	btfss	___wmul@multiplier,0
  5958  0A53  2A5A               	goto	l804
  5959  0A54  082E               	movf	___wmul@multiplicand,w
  5960  0A55  07FC               	addwf	___wmul@product,f
  5961  0A56  1803               	skipnc
  5962  0A57  0AFD               	incf	___wmul@product+1,f
  5963  0A58  082F               	movf	___wmul@multiplicand+1,w
  5964  0A59  07FD               	addwf	___wmul@product+1,f
  5965  0A5A                     l804:	
  5966  0A5A  3001               	movlw	1
  5967  0A5B                     u3525:	
  5968  0A5B  1003               	clrc
  5969  0A5C  0DAE               	rlf	___wmul@multiplicand,f
  5970  0A5D  0DAF               	rlf	___wmul@multiplicand+1,f
  5971  0A5E  3EFF               	addlw	-1
  5972  0A5F  1D03               	skipz
  5973  0A60  2A5B               	goto	u3525
  5974  0A61  3001               	movlw	1
  5975  0A62                     u3535:	
  5976  0A62  1003               	clrc
  5977  0A63  0CAD               	rrf	___wmul@multiplier+1,f
  5978  0A64  0CAC               	rrf	___wmul@multiplier,f
  5979  0A65  3EFF               	addlw	-1
  5980  0A66  1D03               	skipz
  5981  0A67  2A62               	goto	u3535
  5982  0A68  082C               	movf	___wmul@multiplier,w
  5983  0A69  042D               	iorwf	___wmul@multiplier+1,w
  5984  0A6A  1D03               	btfss	3,2
  5985  0A6B  2A50               	goto	l3379
  5986  0A6C  087D               	movf	___wmul@product+1,w
  5987  0A6D  00AD               	movwf	?___wmul+1
  5988  0A6E  087C               	movf	___wmul@product,w
  5989  0A6F  00AC               	movwf	?___wmul
  5990  0A70  0008               	return
  5991  0A71                     __end_of___wmul:	
  5992                           
  5993                           	psect	text27
  5994  09CF                     __ptext27:	
  5995 ;; *************** function _eeprom_write_int *****************
  5996 ;; Defined at:
  5997 ;;		line 1491 in file "teris_16f886.c"
  5998 ;; Parameters:    Size  Location     Type
  5999 ;;  at              1    wreg     unsigned char 
  6000 ;;  value           2    3[COMMON] unsigned int 
  6001 ;; Auto vars:     Size  Location     Type
  6002 ;;  at              1    6[COMMON] unsigned char 
  6003 ;;  temp            1    7[COMMON] unsigned char 
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  1    wreg      void 
  6006 ;; Registers used:
  6007 ;;		wreg, status,2, status,0, pclath, cstack
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6013 ;;      Params:         2       0       0       0       0
  6014 ;;      Locals:         2       0       0       0       0
  6015 ;;      Temps:          1       0       0       0       0
  6016 ;;      Totals:         5       0       0       0       0
  6017 ;;Total ram usage:        5 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; Hardware stack levels required when called:    1
  6020 ;; This function calls:
  6021 ;;		_eeprom_write
  6022 ;; This function is called by:
  6023 ;;		_main
  6024 ;; This function uses a non-reentrant model
  6025 ;;
  6026                           
  6027                           
  6028                           ;psect for function _eeprom_write_int
  6029  09CF                     _eeprom_write_int:	
  6030                           
  6031                           ;incstack = 0
  6032                           ; Regs used in _eeprom_write_int: [wreg+status,2+status,0+pclath+cstack]
  6033                           ;eeprom_write_int@at stored from wreg
  6034  09CF  00F6               	movwf	eeprom_write_int@at
  6035                           
  6036                           ;teris_16f886.c: 1493: uint8_t temp;
  6037                           ;teris_16f886.c: 1494: temp = value >> 8;
  6038  09D0  0874               	movf	eeprom_write_int@value+1,w
  6039  09D1  00F5               	movwf	??_eeprom_write_int
  6040  09D2  0875               	movf	??_eeprom_write_int,w
  6041  09D3  00F7               	movwf	eeprom_write_int@temp
  6042                           
  6043                           ;teris_16f886.c: 1495: eeprom_write(at, temp);
  6044  09D4  0877               	movf	eeprom_write_int@temp,w
  6045  09D5  00F5               	movwf	??_eeprom_write_int
  6046  09D6  0875               	movf	??_eeprom_write_int,w
  6047  09D7  00F0               	movwf	eeprom_write@value
  6048  09D8  0876               	movf	eeprom_write_int@at,w
  6049  09D9  120A  158A  22DE  120A  158A  	fcall	_eeprom_write
  6050                           
  6051                           ;teris_16f886.c: 1497: temp = value & 0xFF;
  6052  09DE  0873               	movf	eeprom_write_int@value,w
  6053  09DF  00F5               	movwf	??_eeprom_write_int
  6054  09E0  0875               	movf	??_eeprom_write_int,w
  6055  09E1  00F7               	movwf	eeprom_write_int@temp
  6056                           
  6057                           ;teris_16f886.c: 1498: eeprom_write(at + 1, temp);
  6058  09E2  0877               	movf	eeprom_write_int@temp,w
  6059  09E3  00F5               	movwf	??_eeprom_write_int
  6060  09E4  0875               	movf	??_eeprom_write_int,w
  6061  09E5  00F0               	movwf	eeprom_write@value
  6062  09E6  0876               	movf	eeprom_write_int@at,w
  6063  09E7  3E01               	addlw	1
  6064  09E8  120A  158A  22DE   	fcall	_eeprom_write
  6065  09EB  0008               	return
  6066  09EC                     __end_of_eeprom_write_int:	
  6067                           
  6068                           	psect	text28
  6069  0ADE                     __ptext28:	
  6070 ;; *************** function _eeprom_write *****************
  6071 ;; Defined at:
  6072 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic\eewrite.c"
  6073 ;; Parameters:    Size  Location     Type
  6074 ;;  addr            1    wreg     unsigned char 
  6075 ;;  value           1    0[COMMON] unsigned char 
  6076 ;; Auto vars:     Size  Location     Type
  6077 ;;  addr            1    2[COMMON] unsigned char 
  6078 ;; Return value:  Size  Location     Type
  6079 ;;                  1    wreg      void 
  6080 ;; Registers used:
  6081 ;;		wreg, status,2, status,0
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6087 ;;      Params:         1       0       0       0       0
  6088 ;;      Locals:         1       0       0       0       0
  6089 ;;      Temps:          1       0       0       0       0
  6090 ;;      Totals:         3       0       0       0       0
  6091 ;;Total ram usage:        3 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; This function calls:
  6094 ;;		Nothing
  6095 ;; This function is called by:
  6096 ;;		_eeprom_write_int
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           
  6101                           ;psect for function _eeprom_write
  6102  0ADE                     _eeprom_write:	
  6103                           
  6104                           ;incstack = 0
  6105                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  6106                           ;eeprom_write@addr stored from wreg
  6107  0ADE  00F2               	movwf	eeprom_write@addr
  6108  0ADF                     l714:	
  6109  0ADF  1683               	bsf	3,5	;RP0=1, select bank3
  6110  0AE0  1703               	bsf	3,6	;RP1=1, select bank3
  6111  0AE1  188C               	btfsc	12,1	;volsfr
  6112  0AE2  2ADF               	goto	l714
  6113  0AE3  0872               	movf	eeprom_write@addr,w
  6114  0AE4  1283               	bcf	3,5	;RP0=0, select bank2
  6115  0AE5  1703               	bsf	3,6	;RP1=1, select bank2
  6116  0AE6  008D               	movwf	13	;volatile
  6117  0AE7  0870               	movf	eeprom_write@value,w
  6118  0AE8  008C               	movwf	12	;volatile
  6119  0AE9  303F               	movlw	63
  6120  0AEA  00F1               	movwf	??_eeprom_write
  6121  0AEB  0871               	movf	??_eeprom_write,w
  6122  0AEC  1683               	bsf	3,5	;RP0=1, select bank3
  6123  0AED  1703               	bsf	3,6	;RP1=1, select bank3
  6124  0AEE  058C               	andwf	12,f	;volsfr
  6125  0AEF  1283               	bcf	3,5	;RP0=0, select bank0
  6126  0AF0  1303               	bcf	3,6	;RP1=0, select bank0
  6127  0AF1  1003               	bcf	3,0	;volatile
  6128  0AF2  1B8B               	btfsc	11,7	;volatile
  6129  0AF3  1403               	bsf	3,0	;volatile
  6130  0AF4  138B               	bcf	11,7	;volatile
  6131  0AF5  1683               	bsf	3,5	;RP0=1, select bank3
  6132  0AF6  1703               	bsf	3,6	;RP1=1, select bank3
  6133  0AF7  150C               	bsf	12,2	;volsfr
  6134  0AF8  3055               	movlw	85
  6135  0AF9  008D               	movwf	13	;volsfr
  6136  0AFA  30AA               	movlw	170
  6137  0AFB  008D               	movwf	13	;volsfr
  6138  0AFC  148C               	bsf	12,1	;volsfr
  6139  0AFD  110C               	bcf	12,2	;volsfr
  6140  0AFE  1283               	bcf	3,5	;RP0=0, select bank0
  6141  0AFF  1303               	bcf	3,6	;RP1=0, select bank0
  6142  0B00  1C03               	btfss	3,0	;volatile
  6143  0B01  0008               	return
  6144  0B02  178B               	bsf	11,7	;volatile
  6145  0B03  0008               	return
  6146  0B04                     __end_of_eeprom_write:	
  6147                           
  6148                           	psect	text29
  6149  0A71                     __ptext29:	
  6150 ;; *************** function _eeprom_read_int *****************
  6151 ;; Defined at:
  6152 ;;		line 1503 in file "teris_16f886.c"
  6153 ;; Parameters:    Size  Location     Type
  6154 ;;  at              1    wreg     unsigned char 
  6155 ;; Auto vars:     Size  Location     Type
  6156 ;;  at              1    8[COMMON] unsigned char 
  6157 ;;  value           2    6[COMMON] unsigned int 
  6158 ;; Return value:  Size  Location     Type
  6159 ;;                  2    2[COMMON] unsigned int 
  6160 ;; Registers used:
  6161 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6162 ;; Tracked objects:
  6163 ;;		On entry : 0/0
  6164 ;;		On exit  : 0/0
  6165 ;;		Unchanged: 0/0
  6166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6167 ;;      Params:         2       0       0       0       0
  6168 ;;      Locals:         3       0       0       0       0
  6169 ;;      Temps:          2       0       0       0       0
  6170 ;;      Totals:         7       0       0       0       0
  6171 ;;Total ram usage:        7 bytes
  6172 ;; Hardware stack levels used:    1
  6173 ;; Hardware stack levels required when called:    1
  6174 ;; This function calls:
  6175 ;;		_eeprom_read
  6176 ;; This function is called by:
  6177 ;;		_main
  6178 ;; This function uses a non-reentrant model
  6179 ;;
  6180                           
  6181                           
  6182                           ;psect for function _eeprom_read_int
  6183  0A71                     _eeprom_read_int:	
  6184                           
  6185                           ;incstack = 0
  6186                           ; Regs used in _eeprom_read_int: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6187                           ;eeprom_read_int@at stored from wreg
  6188  0A71  00F8               	movwf	eeprom_read_int@at
  6189                           
  6190                           ;teris_16f886.c: 1505: uint16_t value = 0;
  6191  0A72  01F6               	clrf	eeprom_read_int@value
  6192  0A73  01F7               	clrf	eeprom_read_int@value+1
  6193                           
  6194                           ;teris_16f886.c: 1506: value = eeprom_read(at) << 8;
  6195  0A74  0878               	movf	eeprom_read_int@at,w
  6196  0A75  120A  158A  2198  120A  158A  	fcall	_eeprom_read
  6197  0A7A  00F4               	movwf	??_eeprom_read_int
  6198  0A7B  01F5               	clrf	??_eeprom_read_int+1
  6199  0A7C  0874               	movf	??_eeprom_read_int,w
  6200  0A7D  00F5               	movwf	??_eeprom_read_int+1
  6201  0A7E  01F4               	clrf	??_eeprom_read_int
  6202  0A7F  0874               	movf	??_eeprom_read_int,w
  6203  0A80  00F6               	movwf	eeprom_read_int@value
  6204  0A81  0875               	movf	??_eeprom_read_int+1,w
  6205  0A82  00F7               	movwf	eeprom_read_int@value+1
  6206                           
  6207                           ;teris_16f886.c: 1507: value += eeprom_read(at + 1);
  6208  0A83  0878               	movf	eeprom_read_int@at,w
  6209  0A84  3E01               	addlw	1
  6210  0A85  120A  158A  2198   	fcall	_eeprom_read
  6211  0A88  00F4               	movwf	??_eeprom_read_int
  6212  0A89  01F5               	clrf	??_eeprom_read_int+1
  6213  0A8A  0874               	movf	??_eeprom_read_int,w
  6214  0A8B  07F6               	addwf	eeprom_read_int@value,f
  6215  0A8C  1803               	skipnc
  6216  0A8D  0AF7               	incf	eeprom_read_int@value+1,f
  6217  0A8E  0875               	movf	??_eeprom_read_int+1,w
  6218  0A8F  07F7               	addwf	eeprom_read_int@value+1,f
  6219                           
  6220                           ;teris_16f886.c: 1511: return value;
  6221  0A90  0877               	movf	eeprom_read_int@value+1,w
  6222  0A91  00F3               	movwf	?_eeprom_read_int+1
  6223  0A92  0876               	movf	eeprom_read_int@value,w
  6224  0A93  00F2               	movwf	?_eeprom_read_int
  6225  0A94  0008               	return
  6226  0A95                     __end_of_eeprom_read_int:	
  6227                           
  6228                           	psect	text30
  6229  0998                     __ptext30:	
  6230 ;; *************** function _eeprom_read *****************
  6231 ;; Defined at:
  6232 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic\eeread.c"
  6233 ;; Parameters:    Size  Location     Type
  6234 ;;  addr            1    wreg     unsigned char 
  6235 ;; Auto vars:     Size  Location     Type
  6236 ;;  addr            1    1[COMMON] unsigned char 
  6237 ;; Return value:  Size  Location     Type
  6238 ;;                  1    wreg      unsigned char 
  6239 ;; Registers used:
  6240 ;;		wreg, status,2, status,0
  6241 ;; Tracked objects:
  6242 ;;		On entry : 0/0
  6243 ;;		On exit  : 0/0
  6244 ;;		Unchanged: 0/0
  6245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6246 ;;      Params:         0       0       0       0       0
  6247 ;;      Locals:         1       0       0       0       0
  6248 ;;      Temps:          1       0       0       0       0
  6249 ;;      Totals:         2       0       0       0       0
  6250 ;;Total ram usage:        2 bytes
  6251 ;; Hardware stack levels used:    1
  6252 ;; This function calls:
  6253 ;;		Nothing
  6254 ;; This function is called by:
  6255 ;;		_eeprom_read_int
  6256 ;; This function uses a non-reentrant model
  6257 ;;
  6258                           
  6259                           
  6260                           ;psect for function _eeprom_read
  6261  0998                     _eeprom_read:	
  6262                           
  6263                           ;incstack = 0
  6264                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  6265                           ;eeprom_read@addr stored from wreg
  6266  0998  00F1               	movwf	eeprom_read@addr
  6267  0999                     l692:	
  6268  0999  0064               	clrwdt	;# 
  6269  099A  1683               	bsf	3,5	;RP0=1, select bank3
  6270  099B  1703               	bsf	3,6	;RP1=1, select bank3
  6271  099C  188C               	btfsc	12,1	;volsfr
  6272  099D  2999               	goto	l692
  6273  099E  0871               	movf	eeprom_read@addr,w
  6274  099F  1283               	bcf	3,5	;RP0=0, select bank2
  6275  09A0  1703               	bsf	3,6	;RP1=1, select bank2
  6276  09A1  008D               	movwf	13	;volatile
  6277  09A2  303F               	movlw	63
  6278  09A3  00F0               	movwf	??_eeprom_read
  6279  09A4  0870               	movf	??_eeprom_read,w
  6280  09A5  1683               	bsf	3,5	;RP0=1, select bank3
  6281  09A6  1703               	bsf	3,6	;RP1=1, select bank3
  6282  09A7  058C               	andwf	12,f	;volsfr
  6283  09A8  140C               	bsf	12,0	;volsfr
  6284  09A9  1003               	clrc
  6285  09AA  180C               	btfsc	12,0	;volsfr
  6286  09AB  1403               	setc
  6287  09AC  3000               	movlw	0
  6288  09AD  1803               	skipnc
  6289  09AE  3001               	movlw	1
  6290  09AF  1283               	bcf	3,5	;RP0=0, select bank2
  6291  09B0  1703               	bsf	3,6	;RP1=1, select bank2
  6292  09B1  080C               	movf	12,w	;volatile
  6293  09B2  0008               	return
  6294  09B3                     __end_of_eeprom_read:	
  6295                           
  6296                           	psect	text31
  6297  0BA9                     __ptext31:	
  6298 ;; *************** function _delete_matrix *****************
  6299 ;; Defined at:
  6300 ;;		line 786 in file "teris_16f886.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;  matrix          1    wreg     PTR struct .
  6303 ;;		 -> g_matrix16x8(16), 
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;  matrix          1    8[COMMON] PTR struct .
  6306 ;;		 -> g_matrix16x8(16), 
  6307 ;;  row             1    9[COMMON] char 
  6308 ;;  count           1    7[COMMON] unsigned char 
  6309 ;; Return value:  Size  Location     Type
  6310 ;;                  1    wreg      unsigned char 
  6311 ;; Registers used:
  6312 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6313 ;; Tracked objects:
  6314 ;;		On entry : 0/0
  6315 ;;		On exit  : 0/0
  6316 ;;		Unchanged: 0/0
  6317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6318 ;;      Params:         0       0       0       0       0
  6319 ;;      Locals:         3       0       0       0       0
  6320 ;;      Temps:          1       0       0       0       0
  6321 ;;      Totals:         4       0       0       0       0
  6322 ;;Total ram usage:        4 bytes
  6323 ;; Hardware stack levels used:    1
  6324 ;; Hardware stack levels required when called:    1
  6325 ;; This function calls:
  6326 ;;		_delete_row
  6327 ;;		_is_row_full
  6328 ;; This function is called by:
  6329 ;;		_main
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           
  6334                           ;psect for function _delete_matrix
  6335  0BA9                     _delete_matrix:	
  6336                           
  6337                           ;incstack = 0
  6338                           ; Regs used in _delete_matrix: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6339                           ;delete_matrix@matrix stored from wreg
  6340  0BA9  00F8               	movwf	delete_matrix@matrix
  6341                           
  6342                           ;teris_16f886.c: 788: uint8_t count = 0;
  6343  0BAA  01F7               	clrf	delete_matrix@count
  6344                           
  6345                           ;teris_16f886.c: 789: int8_t row = 16 - 1;
  6346  0BAB  300F               	movlw	15
  6347  0BAC  00F6               	movwf	??_delete_matrix
  6348  0BAD  0876               	movf	??_delete_matrix,w
  6349  0BAE  00F9               	movwf	delete_matrix@row
  6350  0BAF                     l3617:	
  6351                           ;teris_16f886.c: 790: while(row >= 0)
  6352                           
  6353  0BAF  1BF9               	btfsc	delete_matrix@row,7
  6354  0BB0  0008               	return
  6355                           
  6356                           ;teris_16f886.c: 791: {
  6357                           ;teris_16f886.c: 793: Seed++;
  6358  0BB1  3001               	movlw	1
  6359  0BB2  1283               	bcf	3,5	;RP0=0, select bank0
  6360  0BB3  1303               	bcf	3,6	;RP1=0, select bank0
  6361  0BB4  07DE               	addwf	_Seed,f
  6362  0BB5  1803               	skipnc
  6363  0BB6  0ADF               	incf	_Seed+1,f
  6364  0BB7  3000               	movlw	0
  6365  0BB8  07DF               	addwf	_Seed+1,f
  6366                           
  6367                           ;teris_16f886.c: 796: if(is_row_full(matrix, row) == 1)
  6368  0BB9  0879               	movf	delete_matrix@row,w
  6369  0BBA  00F6               	movwf	??_delete_matrix
  6370  0BBB  0876               	movf	??_delete_matrix,w
  6371  0BBC  00F0               	movwf	is_row_full@row
  6372  0BBD  0878               	movf	delete_matrix@matrix,w
  6373  0BBE  160A  118A  277F  120A  158A  	fcall	_is_row_full
  6374  0BC3  3A01               	xorlw	1
  6375  0BC4  1D03               	skipz
  6376  0BC5  2BD5               	goto	l3615
  6377                           
  6378                           ;teris_16f886.c: 797: {
  6379                           ;teris_16f886.c: 801: delete_row(matrix, row);
  6380  0BC6  0879               	movf	delete_matrix@row,w
  6381  0BC7  00F6               	movwf	??_delete_matrix
  6382  0BC8  0876               	movf	??_delete_matrix,w
  6383  0BC9  00F0               	movwf	delete_row@row
  6384  0BCA  0878               	movf	delete_matrix@matrix,w
  6385  0BCB  120A  158A  23DA  120A  158A  	fcall	_delete_row
  6386                           
  6387                           ;teris_16f886.c: 805: count++;
  6388  0BD0  3001               	movlw	1
  6389  0BD1  00F6               	movwf	??_delete_matrix
  6390  0BD2  0876               	movf	??_delete_matrix,w
  6391  0BD3  07F7               	addwf	delete_matrix@count,f
  6392                           
  6393                           ;teris_16f886.c: 806: }
  6394  0BD4  2BAF               	goto	l3617
  6395  0BD5                     l3615:	
  6396                           
  6397                           ;teris_16f886.c: 807: else
  6398                           ;teris_16f886.c: 808: {
  6399                           ;teris_16f886.c: 809: row--;
  6400  0BD5  30FF               	movlw	255
  6401  0BD6  00F6               	movwf	??_delete_matrix
  6402  0BD7  0876               	movf	??_delete_matrix,w
  6403  0BD8  07F9               	addwf	delete_matrix@row,f
  6404  0BD9  2BAF               	goto	l3617
  6405  0BDA                     __end_of_delete_matrix:	
  6406                           ;teris_16f886.c: 810: }
  6407                           ;teris_16f886.c: 811: }
  6408                           ;teris_16f886.c: 815: return count;
  6409                           ;	Return value of _delete_matrix is never used
  6410                           
  6411                           
  6412                           	psect	text32
  6413  177F                     __ptext32:	
  6414 ;; *************** function _is_row_full *****************
  6415 ;; Defined at:
  6416 ;;		line 754 in file "teris_16f886.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;  matrix          1    wreg     PTR const struct .
  6419 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  6420 ;;  row             1    0[COMMON] unsigned char 
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;  matrix          1    2[COMMON] PTR const struct .
  6423 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  6424 ;; Return value:  Size  Location     Type
  6425 ;;                  1    wreg      unsigned char 
  6426 ;; Registers used:
  6427 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6428 ;; Tracked objects:
  6429 ;;		On entry : 0/0
  6430 ;;		On exit  : 0/0
  6431 ;;		Unchanged: 0/0
  6432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6433 ;;      Params:         1       0       0       0       0
  6434 ;;      Locals:         1       0       0       0       0
  6435 ;;      Temps:          1       0       0       0       0
  6436 ;;      Totals:         3       0       0       0       0
  6437 ;;Total ram usage:        3 bytes
  6438 ;; Hardware stack levels used:    1
  6439 ;; This function calls:
  6440 ;;		Nothing
  6441 ;; This function is called by:
  6442 ;;		_delete_matrix
  6443 ;;		_get_num_removed_rows
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           
  6448                           ;psect for function _is_row_full
  6449  177F                     _is_row_full:	
  6450                           
  6451                           ;incstack = 0
  6452                           ; Regs used in _is_row_full: [wreg-fsr0h+status,2+status,0]
  6453                           ;is_row_full@matrix stored from wreg
  6454  177F  00F2               	movwf	is_row_full@matrix
  6455                           
  6456                           ;teris_16f886.c: 756: if(matrix->row[row] == 0xFF)
  6457  1780  0870               	movf	is_row_full@row,w
  6458  1781  0772               	addwf	is_row_full@matrix,w
  6459  1782  00F1               	movwf	??_is_row_full
  6460  1783  0871               	movf	??_is_row_full,w
  6461  1784  0084               	movwf	4
  6462  1785  1383               	bcf	3,7	;select IRP bank0
  6463  1786  0A00               	incf	0,w
  6464  1787  1D03               	btfss	3,2
  6465  1788  2F8B               	goto	l2861
  6466                           
  6467                           ;teris_16f886.c: 757: {
  6468                           ;teris_16f886.c: 765: return 1;
  6469  1789  3001               	movlw	1
  6470  178A  0008               	return
  6471  178B                     l2861:	
  6472                           
  6473                           ;teris_16f886.c: 766: }
  6474                           ;teris_16f886.c: 767: return 0;
  6475  178B  3000               	movlw	0
  6476  178C  0008               	return
  6477  178D                     __end_of_is_row_full:	
  6478                           
  6479                           	psect	text33
  6480  0BDA                     __ptext33:	
  6481 ;; *************** function _delete_row *****************
  6482 ;; Defined at:
  6483 ;;		line 769 in file "teris_16f886.c"
  6484 ;; Parameters:    Size  Location     Type
  6485 ;;  matrix          1    wreg     PTR struct .
  6486 ;;		 -> g_matrix16x8(16), 
  6487 ;;  row             1    0[COMMON] unsigned char 
  6488 ;; Auto vars:     Size  Location     Type
  6489 ;;  matrix          1    4[COMMON] PTR struct .
  6490 ;;		 -> g_matrix16x8(16), 
  6491 ;;  i               1    5[COMMON] char 
  6492 ;; Return value:  Size  Location     Type
  6493 ;;                  1    wreg      void 
  6494 ;; Registers used:
  6495 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6501 ;;      Params:         1       0       0       0       0
  6502 ;;      Locals:         2       0       0       0       0
  6503 ;;      Temps:          3       0       0       0       0
  6504 ;;      Totals:         6       0       0       0       0
  6505 ;;Total ram usage:        6 bytes
  6506 ;; Hardware stack levels used:    1
  6507 ;; This function calls:
  6508 ;;		Nothing
  6509 ;; This function is called by:
  6510 ;;		_delete_matrix
  6511 ;; This function uses a non-reentrant model
  6512 ;;
  6513                           
  6514                           
  6515                           ;psect for function _delete_row
  6516  0BDA                     _delete_row:	
  6517                           
  6518                           ;incstack = 0
  6519                           ; Regs used in _delete_row: [wreg-fsr0h+status,2+status,0]
  6520                           ;delete_row@matrix stored from wreg
  6521  0BDA  00F4               	movwf	delete_row@matrix
  6522                           
  6523                           ;teris_16f886.c: 771: for(int8_t i = 16 - 1; i >= 0; i--)
  6524  0BDB  300F               	movlw	15
  6525  0BDC  00F1               	movwf	??_delete_row
  6526  0BDD  0871               	movf	??_delete_row,w
  6527  0BDE  00F5               	movwf	delete_row@i
  6528  0BDF                     L11:	
  6529  0BDF  1BF5               	btfsc	delete_row@i,7
  6530  0BE0  0008               	return
  6531                           
  6532                           ;teris_16f886.c: 772: {
  6533                           ;teris_16f886.c: 773: if(i <= row)
  6534  0BE1  0875               	movf	delete_row@i,w
  6535  0BE2  00F1               	movwf	??_delete_row
  6536  0BE3  01F2               	clrf	??_delete_row+1
  6537  0BE4  1BF1               	btfsc	??_delete_row,7
  6538  0BE5  03F2               	decf	??_delete_row+1,f
  6539  0BE6  0872               	movf	??_delete_row+1,w
  6540  0BE7  3A80               	xorlw	128
  6541  0BE8  3C80               	sublw	128
  6542  0BE9  1D03               	skipz
  6543  0BEA  2BED               	goto	u2665
  6544  0BEB  0871               	movf	??_delete_row,w
  6545  0BEC  0270               	subwf	delete_row@row,w
  6546  0BED                     u2665:	
  6547  0BED  1C03               	skipc
  6548  0BEE  2C0C               	goto	l2991
  6549                           
  6550                           ;teris_16f886.c: 774: {
  6551                           ;teris_16f886.c: 775: if(i > 0)
  6552  0BEF  0875               	movf	delete_row@i,w
  6553  0BF0  3A80               	xorlw	128
  6554  0BF1  3E7F               	addlw	-129
  6555  0BF2  1C03               	skipc
  6556  0BF3  2C05               	goto	l2989
  6557                           
  6558                           ;teris_16f886.c: 776: {
  6559                           ;teris_16f886.c: 777: matrix->row[i] = matrix->row[i - 1];
  6560  0BF4  0875               	movf	delete_row@i,w
  6561  0BF5  3EFF               	addlw	255
  6562  0BF6  0774               	addwf	delete_row@matrix,w
  6563  0BF7  00F1               	movwf	??_delete_row
  6564  0BF8  0871               	movf	??_delete_row,w
  6565  0BF9  0084               	movwf	4
  6566  0BFA  1383               	bcf	3,7	;select IRP bank0
  6567  0BFB  0800               	movf	0,w
  6568  0BFC  00F2               	movwf	??_delete_row+1
  6569  0BFD  0875               	movf	delete_row@i,w
  6570  0BFE  0774               	addwf	delete_row@matrix,w
  6571  0BFF  00F3               	movwf	??_delete_row+2
  6572  0C00  0873               	movf	??_delete_row+2,w
  6573  0C01  0084               	movwf	4
  6574  0C02  0872               	movf	??_delete_row+1,w
  6575  0C03  0080               	movwf	0
  6576                           
  6577                           ;teris_16f886.c: 778: }
  6578  0C04  2C0C               	goto	l2991
  6579  0C05                     l2989:	
  6580                           
  6581                           ;teris_16f886.c: 779: else
  6582                           ;teris_16f886.c: 780: {
  6583                           ;teris_16f886.c: 781: matrix->row[i] = 0x0;
  6584  0C05  0875               	movf	delete_row@i,w
  6585  0C06  0774               	addwf	delete_row@matrix,w
  6586  0C07  00F1               	movwf	??_delete_row
  6587  0C08  0871               	movf	??_delete_row,w
  6588  0C09  0084               	movwf	4
  6589  0C0A  1383               	bcf	3,7	;select IRP bank0
  6590  0C0B  0180               	clrf	0
  6591  0C0C                     l2991:	
  6592  0C0C  30FF               	movlw	255
  6593  0C0D  00F1               	movwf	??_delete_row
  6594  0C0E  0871               	movf	??_delete_row,w
  6595  0C0F  07F5               	addwf	delete_row@i,f
  6596  0C10  2BDF               	goto	L11
  6597  0C11                     __end_of_delete_row:	
  6598                           
  6599                           	psect	text34
  6600  0C8B                     __ptext34:	
  6601 ;; *************** function _clear *****************
  6602 ;; Defined at:
  6603 ;;		line 996 in file "teris_16f886.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;  x               1    wreg     char 
  6606 ;;  y               1    0[BANK0 ] char 
  6607 ;;  matrix4x4       2    1[BANK0 ] PTR const struct .
  6608 ;;		 -> NULL(0), g_matrix4x4(96), 
  6609 ;;  matrix16x8      1    3[BANK0 ] PTR struct .
  6610 ;;		 -> g_matrix16x8(16), 
  6611 ;; Auto vars:     Size  Location     Type
  6612 ;;  x               1    4[BANK0 ] char 
  6613 ;;  col             1    6[BANK0 ] unsigned char 
  6614 ;;  row             1    5[BANK0 ] unsigned char 
  6615 ;; Return value:  Size  Location     Type
  6616 ;;                  1    wreg      void 
  6617 ;; Registers used:
  6618 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6624 ;;      Params:         0       4       0       0       0
  6625 ;;      Locals:         0       3       0       0       0
  6626 ;;      Temps:          2       0       0       0       0
  6627 ;;      Totals:         2       7       0       0       0
  6628 ;;Total ram usage:        9 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:    3
  6631 ;; This function calls:
  6632 ;;		_get_matrix_bit
  6633 ;;		_set_matrix_bit
  6634 ;; This function is called by:
  6635 ;;		_main
  6636 ;; This function uses a non-reentrant model
  6637 ;;
  6638                           
  6639                           
  6640                           ;psect for function _clear
  6641  0C8B                     _clear:	
  6642                           
  6643                           ;incstack = 0
  6644                           ; Regs used in _clear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6645                           ;clear@x stored from wreg
  6646  0C8B  1283               	bcf	3,5	;RP0=0, select bank0
  6647  0C8C  1303               	bcf	3,6	;RP1=0, select bank0
  6648  0C8D  00A4               	movwf	clear@x
  6649                           
  6650                           ;teris_16f886.c: 998: for(uint8_t row = 0; row < 4; row++)
  6651  0C8E  01A5               	clrf	clear@row
  6652  0C8F                     L12:	
  6653  0C8F  3004               	movlw	4
  6654  0C90  0225               	subwf	clear@row,w
  6655  0C91  1803               	btfsc	3,0
  6656  0C92  0008               	return
  6657                           
  6658                           ;teris_16f886.c: 999: {
  6659                           ;teris_16f886.c: 1000: for(uint8_t col = 0; col < 4; col++)
  6660  0C93  01A6               	clrf	clear@col
  6661  0C94  3004               	movlw	4
  6662  0C95  0226               	subwf	clear@col,w
  6663  0C96  1803               	btfsc	3,0
  6664  0C97  2CC9               	goto	l3677
  6665  0C98                     l3669:	
  6666                           
  6667                           ;teris_16f886.c: 1001: {
  6668                           ;teris_16f886.c: 1002: if(get_matrix_bit(matrix4x4->row, row, col) == 1)
  6669  0C98  0821               	movf	clear@matrix4x4,w
  6670  0C99  00F7               	movwf	get_matrix_bit@byte
  6671  0C9A  0822               	movf	clear@matrix4x4+1,w
  6672  0C9B  00F8               	movwf	get_matrix_bit@byte+1
  6673  0C9C  0825               	movf	clear@row,w
  6674  0C9D  00FC               	movwf	??_clear
  6675  0C9E  087C               	movf	??_clear,w
  6676  0C9F  00F9               	movwf	get_matrix_bit@row
  6677  0CA0  0826               	movf	clear@col,w
  6678  0CA1  00FD               	movwf	??_clear+1
  6679  0CA2  087D               	movf	??_clear+1,w
  6680  0CA3  00FA               	movwf	get_matrix_bit@col
  6681  0CA4  160A  118A  278D  120A  158A  	fcall	_get_matrix_bit
  6682  0CA9  3A01               	xorlw	1
  6683  0CAA  1D03               	skipz
  6684  0CAB  2CBF               	goto	l3673
  6685                           
  6686                           ;teris_16f886.c: 1003: {
  6687                           ;teris_16f886.c: 1004: set_matrix_bit(matrix16x8->row, y + row, x + col, 0);
  6688  0CAC  1283               	bcf	3,5	;RP0=0, select bank0
  6689  0CAD  1303               	bcf	3,6	;RP1=0, select bank0
  6690  0CAE  0825               	movf	clear@row,w
  6691  0CAF  0720               	addwf	clear@y,w
  6692  0CB0  00FC               	movwf	??_clear
  6693  0CB1  087C               	movf	??_clear,w
  6694  0CB2  00F5               	movwf	set_matrix_bit@row
  6695  0CB3  0826               	movf	clear@col,w
  6696  0CB4  0724               	addwf	clear@x,w
  6697  0CB5  00FD               	movwf	??_clear+1
  6698  0CB6  087D               	movf	??_clear+1,w
  6699  0CB7  00F6               	movwf	set_matrix_bit@col
  6700  0CB8  01F7               	clrf	set_matrix_bit@value
  6701  0CB9  0823               	movf	clear@matrix16x8,w
  6702  0CBA  160A  118A  279C  120A  158A  	fcall	_set_matrix_bit
  6703  0CBF                     l3673:	
  6704  0CBF  3001               	movlw	1
  6705  0CC0  00FC               	movwf	??_clear
  6706  0CC1  087C               	movf	??_clear,w
  6707  0CC2  1283               	bcf	3,5	;RP0=0, select bank0
  6708  0CC3  1303               	bcf	3,6	;RP1=0, select bank0
  6709  0CC4  07A6               	addwf	clear@col,f
  6710  0CC5  3004               	movlw	4
  6711  0CC6  0226               	subwf	clear@col,w
  6712  0CC7  1C03               	skipc
  6713  0CC8  2C98               	goto	l3669
  6714  0CC9                     l3677:	
  6715  0CC9  3001               	movlw	1
  6716  0CCA  00FC               	movwf	??_clear
  6717  0CCB  087C               	movf	??_clear,w
  6718  0CCC  07A5               	addwf	clear@row,f
  6719  0CCD  2C8F               	goto	L12
  6720  0CCE                     __end_of_clear:	
  6721                           
  6722                           	psect	text35
  6723  179C                     __ptext35:	
  6724 ;; *************** function _set_matrix_bit *****************
  6725 ;; Defined at:
  6726 ;;		line 469 in file "teris_16f886.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;  byte            1    wreg     PTR unsigned char 
  6729 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  6730 ;;  row             1    5[COMMON] unsigned char 
  6731 ;;  col             1    6[COMMON] unsigned char 
  6732 ;;  value           1    7[COMMON] unsigned char 
  6733 ;; Auto vars:     Size  Location     Type
  6734 ;;  byte            1   10[COMMON] PTR unsigned char 
  6735 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  6736 ;; Return value:  Size  Location     Type
  6737 ;;                  1    wreg      void 
  6738 ;; Registers used:
  6739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6740 ;; Tracked objects:
  6741 ;;		On entry : 0/0
  6742 ;;		On exit  : 0/0
  6743 ;;		Unchanged: 0/0
  6744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6745 ;;      Params:         3       0       0       0       0
  6746 ;;      Locals:         1       0       0       0       0
  6747 ;;      Temps:          2       0       0       0       0
  6748 ;;      Totals:         6       0       0       0       0
  6749 ;;Total ram usage:        6 bytes
  6750 ;; Hardware stack levels used:    1
  6751 ;; Hardware stack levels required when called:    1
  6752 ;; This function calls:
  6753 ;;		_setbit
  6754 ;; This function is called by:
  6755 ;;		_clear
  6756 ;;		_merge
  6757 ;;		_merge1
  6758 ;; This function uses a non-reentrant model
  6759 ;;
  6760                           
  6761                           
  6762                           ;psect for function _set_matrix_bit
  6763  179C                     _set_matrix_bit:	
  6764                           
  6765                           ;incstack = 0
  6766                           ; Regs used in _set_matrix_bit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6767                           ;set_matrix_bit@byte stored from wreg
  6768  179C  00FA               	movwf	set_matrix_bit@byte
  6769                           
  6770                           ;teris_16f886.c: 471: setbit(&byte[row], col, value);
  6771  179D  0876               	movf	set_matrix_bit@col,w
  6772  179E  00F8               	movwf	??_set_matrix_bit
  6773  179F  0878               	movf	??_set_matrix_bit,w
  6774  17A0  00F0               	movwf	setbit@at
  6775  17A1  0877               	movf	set_matrix_bit@value,w
  6776  17A2  00F9               	movwf	??_set_matrix_bit+1
  6777  17A3  0879               	movf	??_set_matrix_bit+1,w
  6778  17A4  00F1               	movwf	setbit@value
  6779  17A5  0875               	movf	set_matrix_bit@row,w
  6780  17A6  077A               	addwf	set_matrix_bit@byte,w
  6781  17A7  120A  158A  272D   	fcall	_setbit
  6782  17AA  0008               	return
  6783  17AB                     __end_of_set_matrix_bit:	
  6784                           
  6785                           	psect	text36
  6786  0F2D                     __ptext36:	
  6787 ;; *************** function _setbit *****************
  6788 ;; Defined at:
  6789 ;;		line 407 in file "teris_16f886.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;  byte            1    wreg     PTR unsigned char 
  6792 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  6793 ;;  at              1    0[COMMON] unsigned char 
  6794 ;;  value           1    1[COMMON] unsigned char 
  6795 ;; Auto vars:     Size  Location     Type
  6796 ;;  byte            1    3[COMMON] PTR unsigned char 
  6797 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  6798 ;;  temp            1    4[COMMON] PTR struct .
  6799 ;;		 -> temp_matrix16x8(16), g_matrix16x8(16), 
  6800 ;; Return value:  Size  Location     Type
  6801 ;;                  1    wreg      void 
  6802 ;; Registers used:
  6803 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6804 ;; Tracked objects:
  6805 ;;		On entry : 0/0
  6806 ;;		On exit  : 0/0
  6807 ;;		Unchanged: 0/0
  6808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6809 ;;      Params:         2       0       0       0       0
  6810 ;;      Locals:         2       0       0       0       0
  6811 ;;      Temps:          1       0       0       0       0
  6812 ;;      Totals:         5       0       0       0       0
  6813 ;;Total ram usage:        5 bytes
  6814 ;; Hardware stack levels used:    1
  6815 ;; This function calls:
  6816 ;;		Nothing
  6817 ;; This function is called by:
  6818 ;;		_set_matrix_bit
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           
  6823                           ;psect for function _setbit
  6824  0F2D                     _setbit:	
  6825                           
  6826                           ;incstack = 0
  6827                           ; Regs used in _setbit: [wreg-fsr0h+status,2+status,0]
  6828                           ;setbit@byte stored from wreg
  6829  0F2D  00F3               	movwf	setbit@byte
  6830                           
  6831                           ;teris_16f886.c: 409: t_byte *temp = (t_byte *)byte;
  6832  0F2E  0873               	movf	setbit@byte,w
  6833  0F2F  00F2               	movwf	??_setbit
  6834  0F30  0872               	movf	??_setbit,w
  6835  0F31  00F4               	movwf	setbit@temp
  6836                           
  6837                           ;teris_16f886.c: 410: switch(at)
  6838  0F32  2F7B               	goto	l2775
  6839  0F33                     l2757:	
  6840                           ;teris_16f886.c: 411: {
  6841                           ;teris_16f886.c: 412: case 0:
  6842                           
  6843                           
  6844                           ;teris_16f886.c: 413: temp->b0 = value;
  6845  0F33  0874               	movf	setbit@temp,w
  6846  0F34  0084               	movwf	4
  6847  0F35  0871               	movf	setbit@value,w
  6848  0F36  3901               	andlw	1
  6849  0F37  1383               	bcf	3,7	;select IRP bank0
  6850  0F38  1000               	bcf	0,0
  6851  0F39  1D03               	skipz
  6852  0F3A  1400               	bsf	0,0
  6853                           
  6854                           ;teris_16f886.c: 414: break;
  6855  0F3B  0008               	return
  6856  0F3C                     l2759:	
  6857                           ;teris_16f886.c: 415: case 1:
  6858                           
  6859                           
  6860                           ;teris_16f886.c: 416: temp->b1 = value;
  6861  0F3C  0874               	movf	setbit@temp,w
  6862  0F3D  0084               	movwf	4
  6863  0F3E  0871               	movf	setbit@value,w
  6864  0F3F  3901               	andlw	1
  6865  0F40  1383               	bcf	3,7	;select IRP bank0
  6866  0F41  1080               	bcf	0,1
  6867  0F42  1D03               	skipz
  6868  0F43  1480               	bsf	0,1
  6869                           
  6870                           ;teris_16f886.c: 417: break;
  6871  0F44  0008               	return
  6872  0F45                     l2761:	
  6873                           ;teris_16f886.c: 418: case 2:
  6874                           
  6875                           
  6876                           ;teris_16f886.c: 419: temp->b2 = value;
  6877  0F45  0874               	movf	setbit@temp,w
  6878  0F46  0084               	movwf	4
  6879  0F47  0871               	movf	setbit@value,w
  6880  0F48  3901               	andlw	1
  6881  0F49  1383               	bcf	3,7	;select IRP bank0
  6882  0F4A  1100               	bcf	0,2
  6883  0F4B  1D03               	skipz
  6884  0F4C  1500               	bsf	0,2
  6885                           
  6886                           ;teris_16f886.c: 420: break;
  6887  0F4D  0008               	return
  6888  0F4E                     l2763:	
  6889                           ;teris_16f886.c: 421: case 3:
  6890                           
  6891                           
  6892                           ;teris_16f886.c: 422: temp->b3 = value;
  6893  0F4E  0874               	movf	setbit@temp,w
  6894  0F4F  0084               	movwf	4
  6895  0F50  0871               	movf	setbit@value,w
  6896  0F51  3901               	andlw	1
  6897  0F52  1383               	bcf	3,7	;select IRP bank0
  6898  0F53  1180               	bcf	0,3
  6899  0F54  1D03               	skipz
  6900  0F55  1580               	bsf	0,3
  6901                           
  6902                           ;teris_16f886.c: 423: break;
  6903  0F56  0008               	return
  6904  0F57                     l2765:	
  6905                           ;teris_16f886.c: 424: case 4:
  6906                           
  6907                           
  6908                           ;teris_16f886.c: 425: temp->b4 = value;
  6909  0F57  0874               	movf	setbit@temp,w
  6910  0F58  0084               	movwf	4
  6911  0F59  0871               	movf	setbit@value,w
  6912  0F5A  3901               	andlw	1
  6913  0F5B  1383               	bcf	3,7	;select IRP bank0
  6914  0F5C  1200               	bcf	0,4
  6915  0F5D  1D03               	skipz
  6916  0F5E  1600               	bsf	0,4
  6917                           
  6918                           ;teris_16f886.c: 426: break;
  6919  0F5F  0008               	return
  6920  0F60                     l2767:	
  6921                           ;teris_16f886.c: 427: case 5:
  6922                           
  6923                           
  6924                           ;teris_16f886.c: 428: temp->b5 = value;
  6925  0F60  0874               	movf	setbit@temp,w
  6926  0F61  0084               	movwf	4
  6927  0F62  0871               	movf	setbit@value,w
  6928  0F63  3901               	andlw	1
  6929  0F64  1383               	bcf	3,7	;select IRP bank0
  6930  0F65  1280               	bcf	0,5
  6931  0F66  1D03               	skipz
  6932  0F67  1680               	bsf	0,5
  6933                           
  6934                           ;teris_16f886.c: 429: break;
  6935  0F68  0008               	return
  6936  0F69                     l2769:	
  6937                           ;teris_16f886.c: 430: case 6:
  6938                           
  6939                           
  6940                           ;teris_16f886.c: 431: temp->b6 = value;
  6941  0F69  0874               	movf	setbit@temp,w
  6942  0F6A  0084               	movwf	4
  6943  0F6B  0871               	movf	setbit@value,w
  6944  0F6C  3901               	andlw	1
  6945  0F6D  1383               	bcf	3,7	;select IRP bank0
  6946  0F6E  1300               	bcf	0,6
  6947  0F6F  1D03               	skipz
  6948  0F70  1700               	bsf	0,6
  6949                           
  6950                           ;teris_16f886.c: 432: break;
  6951  0F71  0008               	return
  6952  0F72                     l2771:	
  6953                           ;teris_16f886.c: 433: case 7:
  6954                           
  6955                           
  6956                           ;teris_16f886.c: 434: temp->b7 = value;
  6957  0F72  0874               	movf	setbit@temp,w
  6958  0F73  0084               	movwf	4
  6959  0F74  0871               	movf	setbit@value,w
  6960  0F75  3901               	andlw	1
  6961  0F76  1383               	bcf	3,7	;select IRP bank0
  6962  0F77  1380               	bcf	0,7
  6963  0F78  1D03               	skipz
  6964  0F79  1780               	bsf	0,7
  6965                           
  6966                           ;teris_16f886.c: 436: }
  6967                           
  6968                           ;teris_16f886.c: 435: break;
  6969  0F7A  0008               	return
  6970  0F7B                     l2775:	
  6971  0F7B  0870               	movf	setbit@at,w
  6972                           
  6973                           ; Switch size 1, requested type "space"
  6974                           ; Number of cases is 8, Range of values is 0 to 7
  6975                           ; switch strategies available:
  6976                           ; Name         Instructions Cycles
  6977                           ; simple_byte           25    13 (average)
  6978                           ; direct_byte           32     8 (fixed)
  6979                           ; jumptable            260     6 (fixed)
  6980                           ;	Chosen strategy is simple_byte
  6981  0F7C  3A00               	xorlw	0	; case 0
  6982  0F7D  1903               	skipnz
  6983  0F7E  2F33               	goto	l2757
  6984  0F7F  3A01               	xorlw	1	; case 1
  6985  0F80  1903               	skipnz
  6986  0F81  2F3C               	goto	l2759
  6987  0F82  3A03               	xorlw	3	; case 2
  6988  0F83  1903               	skipnz
  6989  0F84  2F45               	goto	l2761
  6990  0F85  3A01               	xorlw	1	; case 3
  6991  0F86  1903               	skipnz
  6992  0F87  2F4E               	goto	l2763
  6993  0F88  3A07               	xorlw	7	; case 4
  6994  0F89  1903               	skipnz
  6995  0F8A  2F57               	goto	l2765
  6996  0F8B  3A01               	xorlw	1	; case 5
  6997  0F8C  1903               	skipnz
  6998  0F8D  2F60               	goto	l2767
  6999  0F8E  3A03               	xorlw	3	; case 6
  7000  0F8F  1903               	skipnz
  7001  0F90  2F69               	goto	l2769
  7002  0F91  3A01               	xorlw	1	; case 7
  7003  0F92  1903               	skipnz
  7004  0F93  2F72               	goto	l2771
  7005  0F94  2F95               	goto	l194
  7006  0F95                     l194:	
  7007  0F95  0008               	return
  7008  0F96                     __end_of_setbit:	
  7009                           
  7010                           	psect	text37
  7011  0980                     __ptext37:	
  7012 ;; *************** function _char_info_index_rand *****************
  7013 ;; Defined at:
  7014 ;;		line 1127 in file "teris_16f886.c"
  7015 ;; Parameters:    Size  Location     Type
  7016 ;;		None
  7017 ;; Auto vars:     Size  Location     Type
  7018 ;;		None
  7019 ;; Return value:  Size  Location     Type
  7020 ;;                  1    wreg      unsigned char 
  7021 ;; Registers used:
  7022 ;;		wreg, status,2, status,0, pclath, cstack
  7023 ;; Tracked objects:
  7024 ;;		On entry : 0/0
  7025 ;;		On exit  : 0/0
  7026 ;;		Unchanged: 0/0
  7027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7028 ;;      Params:         0       0       0       0       0
  7029 ;;      Locals:         0       0       0       0       0
  7030 ;;      Temps:          0       0       0       0       0
  7031 ;;      Totals:         0       0       0       0       0
  7032 ;;Total ram usage:        0 bytes
  7033 ;; Hardware stack levels used:    1
  7034 ;; Hardware stack levels required when called:    2
  7035 ;; This function calls:
  7036 ;;		___awmod
  7037 ;;		_rand
  7038 ;; This function is called by:
  7039 ;;		_main
  7040 ;; This function uses a non-reentrant model
  7041 ;;
  7042                           
  7043                           
  7044                           ;psect for function _char_info_index_rand
  7045  0980                     _char_info_index_rand:	
  7046                           
  7047                           ;teris_16f886.c: 1129: return (uint8_t)(rand()%9);
  7048                           
  7049                           ;incstack = 0
  7050                           ; Regs used in _char_info_index_rand: [wreg+status,2+status,0+pclath+cstack]
  7051  0980  3009               	movlw	9
  7052  0981  1283               	bcf	3,5	;RP0=0, select bank0
  7053  0982  1303               	bcf	3,6	;RP1=0, select bank0
  7054  0983  00A7               	movwf	___awmod@divisor
  7055  0984  3000               	movlw	0
  7056  0985  00A8               	movwf	___awmod@divisor+1
  7057  0986  120A  158A  2559  120A  158A  	fcall	_rand
  7058  098B  1283               	bcf	3,5	;RP0=0, select bank0
  7059  098C  1303               	bcf	3,6	;RP1=0, select bank0
  7060  098D  0821               	movf	?_rand+1,w
  7061  098E  00AA               	movwf	___awmod@dividend+1
  7062  098F  0820               	movf	?_rand,w
  7063  0990  00A9               	movwf	___awmod@dividend
  7064  0991  120A  158A  25EC   	fcall	___awmod
  7065  0994  1283               	bcf	3,5	;RP0=0, select bank0
  7066  0995  1303               	bcf	3,6	;RP1=0, select bank0
  7067  0996  0827               	movf	?___awmod,w
  7068  0997  0008               	return
  7069  0998                     __end_of_char_info_index_rand:	
  7070                           
  7071                           	psect	text38
  7072  0D59                     __ptext38:	
  7073 ;; *************** function _rand *****************
  7074 ;; Defined at:
  7075 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\rand.c"
  7076 ;; Parameters:    Size  Location     Type
  7077 ;;		None
  7078 ;; Auto vars:     Size  Location     Type
  7079 ;;		None
  7080 ;; Return value:  Size  Location     Type
  7081 ;;                  2    0[BANK0 ] int 
  7082 ;; Registers used:
  7083 ;;		wreg, status,2, status,0, pclath, cstack
  7084 ;; Tracked objects:
  7085 ;;		On entry : 0/0
  7086 ;;		On exit  : 0/0
  7087 ;;		Unchanged: 0/0
  7088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7089 ;;      Params:         0       2       0       0       0
  7090 ;;      Locals:         0       0       0       0       0
  7091 ;;      Temps:          0       5       0       0       0
  7092 ;;      Totals:         0       7       0       0       0
  7093 ;;Total ram usage:        7 bytes
  7094 ;; Hardware stack levels used:    1
  7095 ;; Hardware stack levels required when called:    1
  7096 ;; This function calls:
  7097 ;;		___lmul
  7098 ;; This function is called by:
  7099 ;;		_char_info_index_rand
  7100 ;; This function uses a non-reentrant model
  7101 ;;
  7102                           
  7103                           
  7104                           ;psect for function _rand
  7105  0D59                     _rand:	
  7106                           
  7107                           ;incstack = 0
  7108                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  7109  0D59  1283               	bcf	3,5	;RP0=0, select bank0
  7110  0D5A  1303               	bcf	3,6	;RP1=0, select bank0
  7111  0D5B  086B               	movf	_randx+3,w
  7112  0D5C  00F3               	movwf	___lmul@multiplier+3
  7113  0D5D  086A               	movf	_randx+2,w
  7114  0D5E  00F2               	movwf	___lmul@multiplier+2
  7115  0D5F  0869               	movf	_randx+1,w
  7116  0D60  00F1               	movwf	___lmul@multiplier+1
  7117  0D61  0868               	movf	_randx,w
  7118  0D62  00F0               	movwf	___lmul@multiplier
  7119  0D63  3041               	movlw	65
  7120  0D64  00F7               	movwf	___lmul@multiplicand+3
  7121  0D65  30C6               	movlw	198
  7122  0D66  00F6               	movwf	___lmul@multiplicand+2
  7123  0D67  304E               	movlw	78
  7124  0D68  00F5               	movwf	___lmul@multiplicand+1
  7125  0D69  306D               	movlw	109
  7126  0D6A  00F4               	movwf	___lmul@multiplicand
  7127  0D6B  120A  158A  244C  120A  158A  	fcall	___lmul
  7128  0D70  0873               	movf	?___lmul+3,w
  7129  0D71  1283               	bcf	3,5	;RP0=0, select bank0
  7130  0D72  1303               	bcf	3,6	;RP1=0, select bank0
  7131  0D73  00EB               	movwf	_randx+3
  7132  0D74  0872               	movf	?___lmul+2,w
  7133  0D75  00EA               	movwf	_randx+2
  7134  0D76  0871               	movf	?___lmul+1,w
  7135  0D77  00E9               	movwf	_randx+1
  7136  0D78  0870               	movf	?___lmul,w
  7137  0D79  00E8               	movwf	_randx
  7138  0D7A  3039               	movlw	57
  7139  0D7B  07E8               	addwf	_randx,f
  7140  0D7C  3030               	movlw	48
  7141  0D7D  1803               	skipnc
  7142  0D7E  3031               	movlw	49
  7143  0D7F  07E9               	addwf	_randx+1,f
  7144  0D80  3000               	movlw	0
  7145  0D81  1803               	skipnc
  7146  0D82  3001               	movlw	1
  7147  0D83  07EA               	addwf	_randx+2,f
  7148  0D84  3000               	movlw	0
  7149  0D85  1803               	skipnc
  7150  0D86  3001               	movlw	1
  7151  0D87  07EB               	addwf	_randx+3,f
  7152  0D88  0868               	movf	_randx,w
  7153  0D89  00A2               	movwf	??_rand
  7154  0D8A  0869               	movf	_randx+1,w
  7155  0D8B  00A3               	movwf	??_rand+1
  7156  0D8C  086A               	movf	_randx+2,w
  7157  0D8D  00A4               	movwf	??_rand+2
  7158  0D8E  086B               	movf	_randx+3,w
  7159  0D8F  00A5               	movwf	??_rand+3
  7160  0D90  3010               	movlw	16
  7161  0D91  00A6               	movwf	??_rand+4
  7162  0D92                     u3125:	
  7163  0D92  0D25               	rlf	??_rand+3,w
  7164  0D93  0CA5               	rrf	??_rand+3,f
  7165  0D94  0CA4               	rrf	??_rand+2,f
  7166  0D95  0CA3               	rrf	??_rand+1,f
  7167  0D96  0CA2               	rrf	??_rand,f
  7168  0D97  0BA6               	decfsz	??_rand+4,f
  7169  0D98  2D92               	goto	u3125
  7170  0D99  30FF               	movlw	255
  7171  0D9A  0522               	andwf	??_rand,w
  7172  0D9B  00A0               	movwf	?_rand
  7173  0D9C  307F               	movlw	127
  7174  0D9D  0523               	andwf	??_rand+1,w
  7175  0D9E  00A1               	movwf	?_rand+1
  7176  0D9F  0008               	return
  7177  0DA0                     __end_of_rand:	
  7178                           
  7179                           	psect	text39
  7180  0C4C                     __ptext39:	
  7181 ;; *************** function ___lmul *****************
  7182 ;; Defined at:
  7183 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  7184 ;; Parameters:    Size  Location     Type
  7185 ;;  multiplier      4    0[COMMON] unsigned long 
  7186 ;;  multiplicand    4    4[COMMON] unsigned long 
  7187 ;; Auto vars:     Size  Location     Type
  7188 ;;  product         4    9[COMMON] unsigned long 
  7189 ;; Return value:  Size  Location     Type
  7190 ;;                  4    0[COMMON] unsigned long 
  7191 ;; Registers used:
  7192 ;;		wreg, status,2, status,0
  7193 ;; Tracked objects:
  7194 ;;		On entry : 0/0
  7195 ;;		On exit  : 0/0
  7196 ;;		Unchanged: 0/0
  7197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7198 ;;      Params:         8       0       0       0       0
  7199 ;;      Locals:         4       0       0       0       0
  7200 ;;      Temps:          1       0       0       0       0
  7201 ;;      Totals:        13       0       0       0       0
  7202 ;;Total ram usage:       13 bytes
  7203 ;; Hardware stack levels used:    1
  7204 ;; This function calls:
  7205 ;;		Nothing
  7206 ;; This function is called by:
  7207 ;;		_rand
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           
  7212                           ;psect for function ___lmul
  7213  0C4C                     ___lmul:	
  7214                           
  7215                           ;incstack = 0
  7216                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7217  0C4C  3000               	movlw	0
  7218  0C4D  00FC               	movwf	___lmul@product+3
  7219  0C4E  3000               	movlw	0
  7220  0C4F  00FB               	movwf	___lmul@product+2
  7221  0C50  3000               	movlw	0
  7222  0C51  00FA               	movwf	___lmul@product+1
  7223  0C52  3000               	movlw	0
  7224  0C53  00F9               	movwf	___lmul@product
  7225  0C54                     l2951:	
  7226  0C54  1C70               	btfss	___lmul@multiplier,0
  7227  0C55  2C6A               	goto	l2955
  7228  0C56  0874               	movf	___lmul@multiplicand,w
  7229  0C57  07F9               	addwf	___lmul@product,f
  7230  0C58  0875               	movf	___lmul@multiplicand+1,w
  7231  0C59  1103               	clrz
  7232  0C5A  1803               	skipnc
  7233  0C5B  3E01               	addlw	1
  7234  0C5C  1D03               	btfss	3,2
  7235  0C5D  07FA               	addwf	___lmul@product+1,f
  7236  0C5E  0876               	movf	___lmul@multiplicand+2,w
  7237  0C5F  1103               	clrz
  7238  0C60  1803               	skipnc
  7239  0C61  3E01               	addlw	1
  7240  0C62  1D03               	btfss	3,2
  7241  0C63  07FB               	addwf	___lmul@product+2,f
  7242  0C64  0877               	movf	___lmul@multiplicand+3,w
  7243  0C65  1103               	clrz
  7244  0C66  1803               	skipnc
  7245  0C67  3E01               	addlw	1
  7246  0C68  1D03               	btfss	3,2
  7247  0C69  07FC               	addwf	___lmul@product+3,f
  7248  0C6A                     l2955:	
  7249  0C6A  3001               	movlw	1
  7250  0C6B  00F8               	movwf	??___lmul
  7251  0C6C                     u2615:	
  7252  0C6C  1003               	clrc
  7253  0C6D  0DF4               	rlf	___lmul@multiplicand,f
  7254  0C6E  0DF5               	rlf	___lmul@multiplicand+1,f
  7255  0C6F  0DF6               	rlf	___lmul@multiplicand+2,f
  7256  0C70  0DF7               	rlf	___lmul@multiplicand+3,f
  7257  0C71  0BF8               	decfsz	??___lmul,f
  7258  0C72  2C6C               	goto	u2615
  7259  0C73  3001               	movlw	1
  7260  0C74                     u2625:	
  7261  0C74  1003               	clrc
  7262  0C75  0CF3               	rrf	___lmul@multiplier+3,f
  7263  0C76  0CF2               	rrf	___lmul@multiplier+2,f
  7264  0C77  0CF1               	rrf	___lmul@multiplier+1,f
  7265  0C78  0CF0               	rrf	___lmul@multiplier,f
  7266  0C79  3EFF               	addlw	-1
  7267  0C7A  1D03               	skipz
  7268  0C7B  2C74               	goto	u2625
  7269  0C7C  0873               	movf	___lmul@multiplier+3,w
  7270  0C7D  0472               	iorwf	___lmul@multiplier+2,w
  7271  0C7E  0471               	iorwf	___lmul@multiplier+1,w
  7272  0C7F  0470               	iorwf	___lmul@multiplier,w
  7273  0C80  1D03               	skipz
  7274  0C81  2C54               	goto	l2951
  7275  0C82  087C               	movf	___lmul@product+3,w
  7276  0C83  00F3               	movwf	?___lmul+3
  7277  0C84  087B               	movf	___lmul@product+2,w
  7278  0C85  00F2               	movwf	?___lmul+2
  7279  0C86  087A               	movf	___lmul@product+1,w
  7280  0C87  00F1               	movwf	?___lmul+1
  7281  0C88  0879               	movf	___lmul@product,w
  7282  0C89  00F0               	movwf	?___lmul
  7283  0C8A  0008               	return
  7284  0C8B                     __end_of___lmul:	
  7285                           
  7286                           	psect	text40
  7287  0DEC                     __ptext40:	
  7288 ;; *************** function ___awmod *****************
  7289 ;; Defined at:
  7290 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  7291 ;; Parameters:    Size  Location     Type
  7292 ;;  divisor         2    7[BANK0 ] int 
  7293 ;;  dividend        2    9[BANK0 ] int 
  7294 ;; Auto vars:     Size  Location     Type
  7295 ;;  sign            1   12[BANK0 ] unsigned char 
  7296 ;;  counter         1   11[BANK0 ] unsigned char 
  7297 ;; Return value:  Size  Location     Type
  7298 ;;                  2    7[BANK0 ] int 
  7299 ;; Registers used:
  7300 ;;		wreg, status,2, status,0
  7301 ;; Tracked objects:
  7302 ;;		On entry : 0/0
  7303 ;;		On exit  : 0/0
  7304 ;;		Unchanged: 0/0
  7305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7306 ;;      Params:         0       4       0       0       0
  7307 ;;      Locals:         0       2       0       0       0
  7308 ;;      Temps:          1       0       0       0       0
  7309 ;;      Totals:         1       6       0       0       0
  7310 ;;Total ram usage:        7 bytes
  7311 ;; Hardware stack levels used:    1
  7312 ;; This function calls:
  7313 ;;		Nothing
  7314 ;; This function is called by:
  7315 ;;		_char_info_index_rand
  7316 ;;		_USARTWriteInt
  7317 ;; This function uses a non-reentrant model
  7318 ;;
  7319                           
  7320                           
  7321                           ;psect for function ___awmod
  7322  0DEC                     ___awmod:	
  7323                           
  7324                           ;incstack = 0
  7325                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7326  0DEC  1283               	bcf	3,5	;RP0=0, select bank0
  7327  0DED  1303               	bcf	3,6	;RP1=0, select bank0
  7328  0DEE  01AC               	clrf	___awmod@sign
  7329  0DEF  1FAA               	btfss	___awmod@dividend+1,7
  7330  0DF0  2DF8               	goto	l3399
  7331  0DF1  09A9               	comf	___awmod@dividend,f
  7332  0DF2  09AA               	comf	___awmod@dividend+1,f
  7333  0DF3  0AA9               	incf	___awmod@dividend,f
  7334  0DF4  1903               	skipnz
  7335  0DF5  0AAA               	incf	___awmod@dividend+1,f
  7336  0DF6  01AC               	clrf	___awmod@sign
  7337  0DF7  0AAC               	incf	___awmod@sign,f
  7338  0DF8                     l3399:	
  7339  0DF8  1FA8               	btfss	___awmod@divisor+1,7
  7340  0DF9  2DFF               	goto	l3403
  7341  0DFA  09A7               	comf	___awmod@divisor,f
  7342  0DFB  09A8               	comf	___awmod@divisor+1,f
  7343  0DFC  0AA7               	incf	___awmod@divisor,f
  7344  0DFD  1903               	skipnz
  7345  0DFE  0AA8               	incf	___awmod@divisor+1,f
  7346  0DFF                     l3403:	
  7347  0DFF  0827               	movf	___awmod@divisor,w
  7348  0E00  0428               	iorwf	___awmod@divisor+1,w
  7349  0E01  1903               	btfsc	3,2
  7350  0E02  2E2C               	goto	l3421
  7351  0E03  01AB               	clrf	___awmod@counter
  7352  0E04  0AAB               	incf	___awmod@counter,f
  7353  0E05                     l3411:	
  7354  0E05  1BA8               	btfsc	___awmod@divisor+1,7
  7355  0E06  2E13               	goto	l3413
  7356  0E07  3001               	movlw	1
  7357  0E08                     u3585:	
  7358  0E08  1003               	clrc
  7359  0E09  0DA7               	rlf	___awmod@divisor,f
  7360  0E0A  0DA8               	rlf	___awmod@divisor+1,f
  7361  0E0B  3EFF               	addlw	-1
  7362  0E0C  1D03               	skipz
  7363  0E0D  2E08               	goto	u3585
  7364  0E0E  3001               	movlw	1
  7365  0E0F  00FD               	movwf	??___awmod
  7366  0E10  087D               	movf	??___awmod,w
  7367  0E11  07AB               	addwf	___awmod@counter,f
  7368  0E12  2E05               	goto	l3411
  7369  0E13                     l3413:	
  7370  0E13  0828               	movf	___awmod@divisor+1,w
  7371  0E14  022A               	subwf	___awmod@dividend+1,w
  7372  0E15  1D03               	skipz
  7373  0E16  2E19               	goto	u3605
  7374  0E17  0827               	movf	___awmod@divisor,w
  7375  0E18  0229               	subwf	___awmod@dividend,w
  7376  0E19                     u3605:	
  7377  0E19  1C03               	skipc
  7378  0E1A  2E21               	goto	l3417
  7379  0E1B  0827               	movf	___awmod@divisor,w
  7380  0E1C  02A9               	subwf	___awmod@dividend,f
  7381  0E1D  0828               	movf	___awmod@divisor+1,w
  7382  0E1E  1C03               	skipc
  7383  0E1F  03AA               	decf	___awmod@dividend+1,f
  7384  0E20  02AA               	subwf	___awmod@dividend+1,f
  7385  0E21                     l3417:	
  7386  0E21  3001               	movlw	1
  7387  0E22                     u3615:	
  7388  0E22  1003               	clrc
  7389  0E23  0CA8               	rrf	___awmod@divisor+1,f
  7390  0E24  0CA7               	rrf	___awmod@divisor,f
  7391  0E25  3EFF               	addlw	-1
  7392  0E26  1D03               	skipz
  7393  0E27  2E22               	goto	u3615
  7394  0E28  3001               	movlw	1
  7395  0E29  02AB               	subwf	___awmod@counter,f
  7396  0E2A  1D03               	btfss	3,2
  7397  0E2B  2E13               	goto	l3413
  7398  0E2C                     l3421:	
  7399  0E2C  082C               	movf	___awmod@sign,w
  7400  0E2D  1903               	btfsc	3,2
  7401  0E2E  2E34               	goto	l3425
  7402  0E2F  09A9               	comf	___awmod@dividend,f
  7403  0E30  09AA               	comf	___awmod@dividend+1,f
  7404  0E31  0AA9               	incf	___awmod@dividend,f
  7405  0E32  1903               	skipnz
  7406  0E33  0AAA               	incf	___awmod@dividend+1,f
  7407  0E34                     l3425:	
  7408  0E34  082A               	movf	___awmod@dividend+1,w
  7409  0E35  00A8               	movwf	?___awmod+1
  7410  0E36  0829               	movf	___awmod@dividend,w
  7411  0E37  00A7               	movwf	?___awmod
  7412  0E38  0008               	return
  7413  0E39                     __end_of___awmod:	
  7414                           
  7415                           	psect	text41
  7416  0D12                     __ptext41:	
  7417 ;; *************** function _USARTInit *****************
  7418 ;; Defined at:
  7419 ;;		line 31 in file "usart_pic16.c"
  7420 ;; Parameters:    Size  Location     Type
  7421 ;;  baud_rate       2    0[COMMON] unsigned int 
  7422 ;; Auto vars:     Size  Location     Type
  7423 ;;		None
  7424 ;; Return value:  Size  Location     Type
  7425 ;;                  1    wreg      void 
  7426 ;; Registers used:
  7427 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7428 ;; Tracked objects:
  7429 ;;		On entry : 0/0
  7430 ;;		On exit  : 0/0
  7431 ;;		Unchanged: 0/0
  7432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7433 ;;      Params:         2       0       0       0       0
  7434 ;;      Locals:         0       0       0       0       0
  7435 ;;      Temps:          1       0       0       0       0
  7436 ;;      Totals:         3       0       0       0       0
  7437 ;;Total ram usage:        3 bytes
  7438 ;; Hardware stack levels used:    1
  7439 ;; This function calls:
  7440 ;;		Nothing
  7441 ;; This function is called by:
  7442 ;;		_main
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           
  7447                           ;psect for function _USARTInit
  7448  0D12                     _USARTInit:	
  7449                           
  7450                           ;usart_pic16.c: 33: UQFront = UQEnd = -1;
  7451                           
  7452                           ;incstack = 0
  7453                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
  7454  0D12  30FF               	movlw	255
  7455  0D13  1283               	bcf	3,5	;RP0=0, select bank0
  7456  0D14  1303               	bcf	3,6	;RP1=0, select bank0
  7457  0D15  00ED               	movwf	_UQEnd	;volatile
  7458  0D16  00F2               	movwf	??_USARTInit
  7459  0D17  0872               	movf	??_USARTInit,w
  7460  0D18  00EE               	movwf	_UQFront	;volatile
  7461                           
  7462                           ;usart_pic16.c: 36: switch (baud_rate) {
  7463  0D19  2D25               	goto	l3441
  7464  0D1A                     l3431:	
  7465                           ;usart_pic16.c: 37: case 9600:
  7466                           
  7467                           
  7468                           ;usart_pic16.c: 38: SPBRG = 129;
  7469  0D1A  3081               	movlw	129
  7470  0D1B  2D21               	goto	L15
  7471  0D1C                     l3433:	
  7472                           ;usart_pic16.c: 40: case 19200:
  7473                           
  7474                           ;usart_pic16.c: 39: break;
  7475                           
  7476                           
  7477                           ;usart_pic16.c: 41: SPBRG = 64;
  7478  0D1C  3040               	movlw	64
  7479  0D1D  2D21               	goto	L15
  7480  0D1E                     l3435:	
  7481                           ;usart_pic16.c: 43: case 28800:
  7482                           
  7483                           ;usart_pic16.c: 42: break;
  7484                           
  7485                           
  7486                           ;usart_pic16.c: 44: SPBRG = 42;
  7487  0D1E  302A               	movlw	42
  7488  0D1F  2D21               	goto	L15
  7489  0D20                     l3437:	
  7490                           ;usart_pic16.c: 46: case 33600:
  7491                           
  7492                           ;usart_pic16.c: 45: break;
  7493                           
  7494                           
  7495                           ;usart_pic16.c: 47: SPBRG = 36;
  7496  0D20  3024               	movlw	36
  7497  0D21                     L15:	
  7498  0D21  1683               	bsf	3,5	;RP0=1, select bank1
  7499  0D22  1303               	bcf	3,6	;RP1=0, select bank1
  7500  0D23  0099               	movwf	25	;volatile
  7501                           
  7502                           ;usart_pic16.c: 49: }
  7503                           
  7504                           ;usart_pic16.c: 48: break;
  7505  0D24  2D47               	goto	l29
  7506  0D25                     l3441:	
  7507                           
  7508                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  7509                           ; Switch size 1, requested type "space"
  7510                           ; Number of cases is 4, Range of values is 37 to 131
  7511                           ; switch strategies available:
  7512                           ; Name         Instructions Cycles
  7513                           ; simple_byte           13     7 (average)
  7514                           ; jumptable            263     9 (fixed)
  7515                           ;	Chosen strategy is simple_byte
  7516  0D25  0871               	movf	USARTInit@baud_rate+1,w
  7517  0D26  3A25               	xorlw	37	; case 37
  7518  0D27  1903               	skipnz
  7519  0D28  2D33               	goto	l5007
  7520  0D29  3A6E               	xorlw	110	; case 75
  7521  0D2A  1903               	skipnz
  7522  0D2B  2D38               	goto	l5009
  7523  0D2C  3A3B               	xorlw	59	; case 112
  7524  0D2D  1903               	skipnz
  7525  0D2E  2D3D               	goto	l5011
  7526  0D2F  3AF3               	xorlw	243	; case 131
  7527  0D30  1903               	skipnz
  7528  0D31  2D42               	goto	l5013
  7529  0D32  2D47               	goto	l29
  7530  0D33                     l5007:	
  7531                           
  7532                           ; Switch size 1, requested type "space"
  7533                           ; Number of cases is 1, Range of values is 128 to 128
  7534                           ; switch strategies available:
  7535                           ; Name         Instructions Cycles
  7536                           ; simple_byte            4     3 (average)
  7537                           ; direct_byte           14    11 (fixed)
  7538                           ; jumptable            263     9 (fixed)
  7539                           ;	Chosen strategy is simple_byte
  7540  0D33  0870               	movf	USARTInit@baud_rate,w
  7541  0D34  3A80               	xorlw	128	; case 128
  7542  0D35  1903               	skipnz
  7543  0D36  2D1A               	goto	l3431
  7544  0D37  2D47               	goto	l29
  7545  0D38                     l5009:	
  7546                           
  7547                           ; Switch size 1, requested type "space"
  7548                           ; Number of cases is 1, Range of values is 0 to 0
  7549                           ; switch strategies available:
  7550                           ; Name         Instructions Cycles
  7551                           ; simple_byte            4     3 (average)
  7552                           ; direct_byte           11     8 (fixed)
  7553                           ; jumptable            260     6 (fixed)
  7554                           ;	Chosen strategy is simple_byte
  7555  0D38  0870               	movf	USARTInit@baud_rate,w
  7556  0D39  3A00               	xorlw	0	; case 0
  7557  0D3A  1903               	skipnz
  7558  0D3B  2D1C               	goto	l3433
  7559  0D3C  2D47               	goto	l29
  7560  0D3D                     l5011:	
  7561                           
  7562                           ; Switch size 1, requested type "space"
  7563                           ; Number of cases is 1, Range of values is 128 to 128
  7564                           ; switch strategies available:
  7565                           ; Name         Instructions Cycles
  7566                           ; simple_byte            4     3 (average)
  7567                           ; direct_byte           14    11 (fixed)
  7568                           ; jumptable            263     9 (fixed)
  7569                           ;	Chosen strategy is simple_byte
  7570  0D3D  0870               	movf	USARTInit@baud_rate,w
  7571  0D3E  3A80               	xorlw	128	; case 128
  7572  0D3F  1903               	skipnz
  7573  0D40  2D1E               	goto	l3435
  7574  0D41  2D47               	goto	l29
  7575  0D42                     l5013:	
  7576                           
  7577                           ; Switch size 1, requested type "space"
  7578                           ; Number of cases is 1, Range of values is 64 to 64
  7579                           ; switch strategies available:
  7580                           ; Name         Instructions Cycles
  7581                           ; simple_byte            4     3 (average)
  7582                           ; direct_byte           14    11 (fixed)
  7583                           ; jumptable            263     9 (fixed)
  7584                           ;	Chosen strategy is simple_byte
  7585  0D42  0870               	movf	USARTInit@baud_rate,w
  7586  0D43  3A40               	xorlw	64	; case 64
  7587  0D44  1903               	skipnz
  7588  0D45  2D20               	goto	l3437
  7589  0D46  2D47               	goto	l29
  7590  0D47                     l29:	
  7591                           
  7592                           ;usart_pic16.c: 52: TXSTAbits.TX9 = 0;
  7593  0D47  1683               	bsf	3,5	;RP0=1, select bank1
  7594  0D48  1303               	bcf	3,6	;RP1=0, select bank1
  7595  0D49  1318               	bcf	24,6	;volatile
  7596                           
  7597                           ;usart_pic16.c: 53: TXSTAbits.TXEN = 1;
  7598  0D4A  1698               	bsf	24,5	;volatile
  7599                           
  7600                           ;usart_pic16.c: 54: TXSTAbits.SYNC = 0;
  7601  0D4B  1218               	bcf	24,4	;volatile
  7602                           
  7603                           ;usart_pic16.c: 55: TXSTAbits.BRGH = 1;
  7604  0D4C  1518               	bsf	24,2	;volatile
  7605                           
  7606                           ;usart_pic16.c: 58: RCSTAbits.SPEN = 1;
  7607  0D4D  1283               	bcf	3,5	;RP0=0, select bank0
  7608  0D4E  1303               	bcf	3,6	;RP1=0, select bank0
  7609  0D4F  1798               	bsf	24,7	;volatile
  7610                           
  7611                           ;usart_pic16.c: 59: RCSTAbits.RX9 = 0;
  7612  0D50  1318               	bcf	24,6	;volatile
  7613                           
  7614                           ;usart_pic16.c: 60: RCSTAbits.CREN = 1;
  7615  0D51  1618               	bsf	24,4	;volatile
  7616                           
  7617                           ;usart_pic16.c: 61: RCSTAbits.ADDEN = 0;
  7618  0D52  1198               	bcf	24,3	;volatile
  7619                           
  7620                           ;usart_pic16.c: 64: RCIE = 1;
  7621  0D53  1683               	bsf	3,5	;RP0=1, select bank1
  7622  0D54  1303               	bcf	3,6	;RP1=0, select bank1
  7623  0D55  168C               	bsf	12,5	;volatile
  7624                           
  7625                           ;usart_pic16.c: 65: PEIE = 1;
  7626  0D56  170B               	bsf	11,6	;volatile
  7627                           
  7628                           ;usart_pic16.c: 67: (GIE = 1);
  7629  0D57  178B               	bsf	11,7	;volatile
  7630  0D58  0008               	return
  7631  0D59                     __end_of_USARTInit:	
  7632                           
  7633                           	psect	text42
  7634  17BB                     __ptext42:	
  7635 ;; *************** function _Clear_Matrix *****************
  7636 ;; Defined at:
  7637 ;;		line 748 in file "teris_16f886.c"
  7638 ;; Parameters:    Size  Location     Type
  7639 ;;		None
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;		None
  7642 ;; Return value:  Size  Location     Type
  7643 ;;                  1    wreg      void 
  7644 ;; Registers used:
  7645 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7646 ;; Tracked objects:
  7647 ;;		On entry : 0/0
  7648 ;;		On exit  : 0/0
  7649 ;;		Unchanged: 0/0
  7650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7651 ;;      Params:         0       0       0       0       0
  7652 ;;      Locals:         0       0       0       0       0
  7653 ;;      Temps:          0       0       0       0       0
  7654 ;;      Totals:         0       0       0       0       0
  7655 ;;Total ram usage:        0 bytes
  7656 ;; Hardware stack levels used:    1
  7657 ;; Hardware stack levels required when called:    6
  7658 ;; This function calls:
  7659 ;;		_memset
  7660 ;;		_printf_Screen
  7661 ;; This function is called by:
  7662 ;;		_main
  7663 ;; This function uses a non-reentrant model
  7664 ;;
  7665                           
  7666                           
  7667                           ;psect for function _Clear_Matrix
  7668  17BB                     _Clear_Matrix:	
  7669                           
  7670                           ;teris_16f886.c: 750: memset(&g_matrix16x8, 0, sizeof(MATRIX16x8));
  7671                           
  7672                           ;incstack = 0
  7673                           ; Regs used in _Clear_Matrix: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7674  17BB  3000               	movlw	0
  7675  17BC  00F0               	movwf	memset@c
  7676  17BD  00F1               	movwf	memset@c+1
  7677  17BE  3010               	movlw	16
  7678  17BF  00F2               	movwf	memset@n
  7679  17C0  3000               	movlw	0
  7680  17C1  00F3               	movwf	memset@n+1
  7681  17C2  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  7682  17C3  120A  158A  21B3  160A  118A  	fcall	_memset
  7683                           
  7684                           ;teris_16f886.c: 751: printf_Screen();
  7685  17C8  160A  118A  2751   	fcall	_printf_Screen
  7686  17CB  0008               	return
  7687  17CC                     __end_of_Clear_Matrix:	
  7688                           
  7689                           	psect	text43
  7690  1751                     __ptext43:	
  7691 ;; *************** function _printf_Screen *****************
  7692 ;; Defined at:
  7693 ;;		line 732 in file "teris_16f886.c"
  7694 ;; Parameters:    Size  Location     Type
  7695 ;;		None
  7696 ;; Auto vars:     Size  Location     Type
  7697 ;;		None
  7698 ;; Return value:  Size  Location     Type
  7699 ;;                  1    wreg      void 
  7700 ;; Registers used:
  7701 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7702 ;; Tracked objects:
  7703 ;;		On entry : 0/0
  7704 ;;		On exit  : 0/0
  7705 ;;		Unchanged: 0/0
  7706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7707 ;;      Params:         0       0       0       0       0
  7708 ;;      Locals:         0       0       0       0       0
  7709 ;;      Temps:          0       0       0       0       0
  7710 ;;      Totals:         0       0       0       0       0
  7711 ;;Total ram usage:        0 bytes
  7712 ;; Hardware stack levels used:    1
  7713 ;; Hardware stack levels required when called:    5
  7714 ;; This function calls:
  7715 ;;		_printf_MATRIX16x8
  7716 ;; This function is called by:
  7717 ;;		_Clear_Matrix
  7718 ;;		_main
  7719 ;; This function uses a non-reentrant model
  7720 ;;
  7721                           
  7722                           
  7723                           ;psect for function _printf_Screen
  7724  1751                     _printf_Screen:	
  7725                           
  7726                           ;teris_16f886.c: 734: printf_MATRIX16x8(&g_matrix16x8);
  7727                           
  7728                           ;incstack = 0
  7729                           ; Regs used in _printf_Screen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7730  1751  30D0               	movlw	(low (_g_matrix16x8| 0))& (0+255)
  7731  1752  160A  118A  27EE   	fcall	_printf_MATRIX16x8
  7732  1755  0008               	return
  7733  1756                     __end_of_printf_Screen:	
  7734                           
  7735                           	psect	text44
  7736  17EE                     __ptext44:	
  7737 ;; *************** function _printf_MATRIX16x8 *****************
  7738 ;; Defined at:
  7739 ;;		line 705 in file "teris_16f886.c"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;  matrix16x8      1    wreg     PTR const struct .
  7742 ;;		 -> g_matrix16x8(16), 
  7743 ;; Auto vars:     Size  Location     Type
  7744 ;;  matrix16x8      1    6[BANK0 ] PTR const struct .
  7745 ;;		 -> g_matrix16x8(16), 
  7746 ;;  matrix7219     16    7[BANK0 ] struct .
  7747 ;; Return value:  Size  Location     Type
  7748 ;;                  1    wreg      void 
  7749 ;; Registers used:
  7750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7751 ;; Tracked objects:
  7752 ;;		On entry : 0/0
  7753 ;;		On exit  : 0/0
  7754 ;;		Unchanged: 0/0
  7755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7756 ;;      Params:         0       0       0       0       0
  7757 ;;      Locals:         0      17       0       0       0
  7758 ;;      Temps:          1       0       0       0       0
  7759 ;;      Totals:         1      17       0       0       0
  7760 ;;Total ram usage:       18 bytes
  7761 ;; Hardware stack levels used:    1
  7762 ;; Hardware stack levels required when called:    4
  7763 ;; This function calls:
  7764 ;;		_MATRIX16x8_to_MATRIX7219
  7765 ;;		_printf_MATRIX7219
  7766 ;; This function is called by:
  7767 ;;		_printf_Screen
  7768 ;; This function uses a non-reentrant model
  7769 ;;
  7770                           
  7771                           
  7772                           ;psect for function _printf_MATRIX16x8
  7773  17EE                     _printf_MATRIX16x8:	
  7774                           
  7775                           ;incstack = 0
  7776                           ; Regs used in _printf_MATRIX16x8: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7777                           ;printf_MATRIX16x8@matrix16x8 stored from wreg
  7778  17EE  1283               	bcf	3,5	;RP0=0, select bank0
  7779  17EF  1303               	bcf	3,6	;RP1=0, select bank0
  7780  17F0  00A6               	movwf	printf_MATRIX16x8@matrix16x8
  7781                           
  7782                           ;teris_16f886.c: 727: MATRIX7219 matrix7219;
  7783                           ;teris_16f886.c: 728: MATRIX16x8_to_MATRIX7219(matrix16x8, &matrix7219);
  7784  17F1  3027               	movlw	(low (printf_MATRIX16x8@matrix7219| 0))& (0+255)
  7785  17F2  00FD               	movwf	??_printf_MATRIX16x8
  7786  17F3  087D               	movf	??_printf_MATRIX16x8,w
  7787  17F4  00FC               	movwf	MATRIX16x8_to_MATRIX7219@matrix7219
  7788  17F5  0826               	movf	printf_MATRIX16x8@matrix16x8,w
  7789  17F6  120A  118A  21D6  160A  118A  	fcall	_MATRIX16x8_to_MATRIX7219
  7790                           
  7791                           ;teris_16f886.c: 729: printf_MATRIX7219(&matrix7219);
  7792  17FB  3027               	movlw	(low (printf_MATRIX16x8@matrix7219| 0))& (0+255)
  7793  17FC  120A  158A  237A   	fcall	_printf_MATRIX7219
  7794  17FF  0008               	return
  7795  1800                     __end_of_printf_MATRIX16x8:	
  7796                           
  7797                           	psect	text45
  7798  0B7A                     __ptext45:	
  7799 ;; *************** function _printf_MATRIX7219 *****************
  7800 ;; Defined at:
  7801 ;;		line 695 in file "teris_16f886.c"
  7802 ;; Parameters:    Size  Location     Type
  7803 ;;  matrix          1    wreg     PTR const struct .
  7804 ;;		 -> printf_MATRIX16x8@matrix7219(16), 
  7805 ;; Auto vars:     Size  Location     Type
  7806 ;;  matrix          1    0[BANK0 ] PTR const struct .
  7807 ;;		 -> printf_MATRIX16x8@matrix7219(16), 
  7808 ;;  col             1    1[BANK0 ] unsigned char 
  7809 ;; Return value:  Size  Location     Type
  7810 ;;                  1    wreg      void 
  7811 ;; Registers used:
  7812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7813 ;; Tracked objects:
  7814 ;;		On entry : 0/0
  7815 ;;		On exit  : 0/0
  7816 ;;		Unchanged: 0/0
  7817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7818 ;;      Params:         0       0       0       0       0
  7819 ;;      Locals:         0       2       0       0       0
  7820 ;;      Temps:          5       0       0       0       0
  7821 ;;      Totals:         5       2       0       0       0
  7822 ;;Total ram usage:        7 bytes
  7823 ;; Hardware stack levels used:    1
  7824 ;; Hardware stack levels required when called:    2
  7825 ;; This function calls:
  7826 ;;		_Write_Word
  7827 ;; This function is called by:
  7828 ;;		_printf_MATRIX16x8
  7829 ;; This function uses a non-reentrant model
  7830 ;;
  7831                           
  7832                           
  7833                           ;psect for function _printf_MATRIX7219
  7834  0B7A                     _printf_MATRIX7219:	
  7835                           
  7836                           ;incstack = 0
  7837                           ; Regs used in _printf_MATRIX7219: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7838                           ;printf_MATRIX7219@matrix stored from wreg
  7839  0B7A  1283               	bcf	3,5	;RP0=0, select bank0
  7840  0B7B  1303               	bcf	3,6	;RP1=0, select bank0
  7841  0B7C  00A0               	movwf	printf_MATRIX7219@matrix
  7842                           
  7843                           ;teris_16f886.c: 697: uint8_t col;
  7844                           ;teris_16f886.c: 699: for (col = 0; col < 8; col++)
  7845  0B7D  01A1               	clrf	printf_MATRIX7219@col
  7846  0B7E                     L16:	
  7847  0B7E  3008               	movlw	8
  7848  0B7F  0221               	subwf	printf_MATRIX7219@col,w
  7849  0B80  1803               	btfsc	3,0
  7850  0B81  0008               	return
  7851                           
  7852                           ;teris_16f886.c: 700: {
  7853                           ;teris_16f886.c: 701: Write_Word(col + 1, matrix->col1[col], col + 1, matrix->col2[col])
      +                          ;
  7854  0B82  0821               	movf	printf_MATRIX7219@col,w
  7855  0B83  0720               	addwf	printf_MATRIX7219@matrix,w
  7856  0B84  00F8               	movwf	??_printf_MATRIX7219
  7857  0B85  0878               	movf	??_printf_MATRIX7219,w
  7858  0B86  0084               	movwf	4
  7859  0B87  1383               	bcf	3,7	;select IRP bank0
  7860  0B88  0800               	movf	0,w
  7861  0B89  00F9               	movwf	??_printf_MATRIX7219+1
  7862  0B8A  0879               	movf	??_printf_MATRIX7219+1,w
  7863  0B8B  00F4               	movwf	Write_Word@myValue1
  7864  0B8C  0821               	movf	printf_MATRIX7219@col,w
  7865  0B8D  3E01               	addlw	1
  7866  0B8E  00FA               	movwf	??_printf_MATRIX7219+2
  7867  0B8F  087A               	movf	??_printf_MATRIX7219+2,w
  7868  0B90  00F5               	movwf	Write_Word@myColumn2
  7869  0B91  0821               	movf	printf_MATRIX7219@col,w
  7870  0B92  3E08               	addlw	8
  7871  0B93  0720               	addwf	printf_MATRIX7219@matrix,w
  7872  0B94  00FB               	movwf	??_printf_MATRIX7219+3
  7873  0B95  087B               	movf	??_printf_MATRIX7219+3,w
  7874  0B96  0084               	movwf	4
  7875  0B97  0800               	movf	0,w
  7876  0B98  00FC               	movwf	??_printf_MATRIX7219+4
  7877  0B99  087C               	movf	??_printf_MATRIX7219+4,w
  7878  0B9A  00F6               	movwf	Write_Word@myValue2
  7879  0B9B  0821               	movf	printf_MATRIX7219@col,w
  7880  0B9C  3E01               	addlw	1
  7881  0B9D  120A  158A  21EC  120A  158A  	fcall	_Write_Word
  7882  0BA2  3001               	movlw	1
  7883  0BA3  00F8               	movwf	??_printf_MATRIX7219
  7884  0BA4  0878               	movf	??_printf_MATRIX7219,w
  7885  0BA5  1283               	bcf	3,5	;RP0=0, select bank0
  7886  0BA6  1303               	bcf	3,6	;RP1=0, select bank0
  7887  0BA7  07A1               	addwf	printf_MATRIX7219@col,f
  7888  0BA8  2B7E               	goto	L16
  7889  0BA9                     __end_of_printf_MATRIX7219:	
  7890                           
  7891                           	psect	text46
  7892  09EC                     __ptext46:	
  7893 ;; *************** function _Write_Word *****************
  7894 ;; Defined at:
  7895 ;;		line 569 in file "teris_16f886.c"
  7896 ;; Parameters:    Size  Location     Type
  7897 ;;  myColumn1       1    wreg     unsigned char 
  7898 ;;  myValue1        1    4[COMMON] unsigned char 
  7899 ;;  myColumn2       1    5[COMMON] unsigned char 
  7900 ;;  myValue2        1    6[COMMON] unsigned char 
  7901 ;; Auto vars:     Size  Location     Type
  7902 ;;  myColumn1       1    7[COMMON] unsigned char 
  7903 ;; Return value:  Size  Location     Type
  7904 ;;                  1    wreg      void 
  7905 ;; Registers used:
  7906 ;;		wreg, status,2, status,0, pclath, cstack
  7907 ;; Tracked objects:
  7908 ;;		On entry : 0/0
  7909 ;;		On exit  : 0/0
  7910 ;;		Unchanged: 0/0
  7911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7912 ;;      Params:         3       0       0       0       0
  7913 ;;      Locals:         1       0       0       0       0
  7914 ;;      Temps:          0       0       0       0       0
  7915 ;;      Totals:         4       0       0       0       0
  7916 ;;Total ram usage:        4 bytes
  7917 ;; Hardware stack levels used:    1
  7918 ;; Hardware stack levels required when called:    1
  7919 ;; This function calls:
  7920 ;;		_SPI1_write
  7921 ;; This function is called by:
  7922 ;;		_max7219_init1
  7923 ;;		_printf_MATRIX7219
  7924 ;; This function uses a non-reentrant model
  7925 ;;
  7926                           
  7927                           
  7928                           ;psect for function _Write_Word
  7929  09EC                     _Write_Word:	
  7930                           
  7931                           ;incstack = 0
  7932                           ; Regs used in _Write_Word: [wreg+status,2+status,0+pclath+cstack]
  7933                           ;Write_Word@myColumn1 stored from wreg
  7934  09EC  00F7               	movwf	Write_Word@myColumn1
  7935                           
  7936                           ;teris_16f886.c: 571: RA2 = 0;
  7937  09ED  1283               	bcf	3,5	;RP0=0, select bank0
  7938  09EE  1303               	bcf	3,6	;RP1=0, select bank0
  7939  09EF  1105               	bcf	5,2	;volatile
  7940                           
  7941                           ;teris_16f886.c: 572: SPI1_write(myColumn1);
  7942  09F0  0877               	movf	Write_Word@myColumn1,w
  7943  09F1  120A  158A  2350  120A  158A  	fcall	_SPI1_write
  7944                           
  7945                           ;teris_16f886.c: 573: SPI1_write(myValue1);
  7946  09F6  0874               	movf	Write_Word@myValue1,w
  7947  09F7  120A  158A  2350  120A  158A  	fcall	_SPI1_write
  7948                           
  7949                           ;teris_16f886.c: 574: SPI1_write(myColumn2);
  7950  09FC  0875               	movf	Write_Word@myColumn2,w
  7951  09FD  120A  158A  2350  120A  158A  	fcall	_SPI1_write
  7952                           
  7953                           ;teris_16f886.c: 575: SPI1_write(myValue2);
  7954  0A02  0876               	movf	Write_Word@myValue2,w
  7955  0A03  120A  158A  2350   	fcall	_SPI1_write
  7956                           
  7957                           ;teris_16f886.c: 576: RA2 = 1;
  7958  0A06  1283               	bcf	3,5	;RP0=0, select bank0
  7959  0A07  1303               	bcf	3,6	;RP1=0, select bank0
  7960  0A08  1505               	bsf	5,2	;volatile
  7961  0A09  0008               	return
  7962  0A0A                     __end_of_Write_Word:	
  7963                           
  7964                           	psect	text47
  7965  0B50                     __ptext47:	
  7966 ;; *************** function _SPI1_write *****************
  7967 ;; Defined at:
  7968 ;;		line 544 in file "teris_16f886.c"
  7969 ;; Parameters:    Size  Location     Type
  7970 ;;  data            1    wreg     unsigned char 
  7971 ;; Auto vars:     Size  Location     Type
  7972 ;;  data            1    1[COMMON] unsigned char 
  7973 ;;  i               1    3[COMMON] unsigned char 
  7974 ;;  mask            1    2[COMMON] unsigned char 
  7975 ;; Return value:  Size  Location     Type
  7976 ;;                  1    wreg      void 
  7977 ;; Registers used:
  7978 ;;		wreg, status,2, status,0
  7979 ;; Tracked objects:
  7980 ;;		On entry : 0/0
  7981 ;;		On exit  : 0/0
  7982 ;;		Unchanged: 0/0
  7983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7984 ;;      Params:         0       0       0       0       0
  7985 ;;      Locals:         3       0       0       0       0
  7986 ;;      Temps:          1       0       0       0       0
  7987 ;;      Totals:         4       0       0       0       0
  7988 ;;Total ram usage:        4 bytes
  7989 ;; Hardware stack levels used:    1
  7990 ;; This function calls:
  7991 ;;		Nothing
  7992 ;; This function is called by:
  7993 ;;		_Write_Word
  7994 ;; This function uses a non-reentrant model
  7995 ;;
  7996                           
  7997                           
  7998                           ;psect for function _SPI1_write
  7999  0B50                     _SPI1_write:	
  8000                           
  8001                           ;incstack = 0
  8002                           ; Regs used in _SPI1_write: [wreg+status,2+status,0]
  8003                           ;SPI1_write@data stored from wreg
  8004  0B50  00F1               	movwf	SPI1_write@data
  8005                           
  8006                           ;teris_16f886.c: 546: uint8_t mask = 0b10000000;
  8007  0B51  3080               	movlw	128
  8008  0B52  00F0               	movwf	??_SPI1_write
  8009  0B53  0870               	movf	??_SPI1_write,w
  8010  0B54  00F2               	movwf	SPI1_write@mask
  8011                           
  8012                           ;teris_16f886.c: 547: for(uint8_t i = 0; i < 8; i++)
  8013  0B55  01F3               	clrf	SPI1_write@i
  8014  0B56                     L17:	
  8015  0B56  3008               	movlw	8
  8016  0B57  0273               	subwf	SPI1_write@i,w
  8017  0B58  1803               	btfsc	3,0
  8018  0B59  0008               	return
  8019                           
  8020                           ;teris_16f886.c: 548: {
  8021                           ;teris_16f886.c: 549: if((data & mask) > 0)
  8022  0B5A  0871               	movf	SPI1_write@data,w
  8023  0B5B  0572               	andwf	SPI1_write@mask,w
  8024  0B5C  1903               	btfsc	3,2
  8025  0B5D  2B62               	goto	l243
  8026                           
  8027                           ;teris_16f886.c: 550: {
  8028                           ;teris_16f886.c: 551: RA3 = 1;
  8029  0B5E  1283               	bcf	3,5	;RP0=0, select bank0
  8030  0B5F  1303               	bcf	3,6	;RP1=0, select bank0
  8031  0B60  1585               	bsf	5,3	;volatile
  8032                           
  8033                           ;teris_16f886.c: 553: }
  8034  0B61  2B65               	goto	l2731
  8035  0B62                     l243:	
  8036                           
  8037                           ;teris_16f886.c: 554: else
  8038                           ;teris_16f886.c: 555: {
  8039                           ;teris_16f886.c: 556: RA3 = 0;
  8040  0B62  1283               	bcf	3,5	;RP0=0, select bank0
  8041  0B63  1303               	bcf	3,6	;RP1=0, select bank0
  8042  0B64  1185               	bcf	5,3	;volatile
  8043  0B65                     l2731:	
  8044                           
  8045                           ;teris_16f886.c: 558: }
  8046                           ;teris_16f886.c: 559: mask >>= 1;
  8047  0B65  1003               	clrc
  8048  0B66  0CF2               	rrf	SPI1_write@mask,f
  8049                           
  8050                           ;teris_16f886.c: 560: RA1 = 1;
  8051  0B67  1485               	bsf	5,1	;volatile
  8052                           
  8053                           ;teris_16f886.c: 561: _delay((unsigned long)((10)*(20000000/4000000.0)));
  8054  0B68  3010               	movlw	16
  8055  0B69  00F0               	movwf	??_SPI1_write
  8056  0B6A                     u6097:	
  8057  0B6A  0BF0               	decfsz	??_SPI1_write,f
  8058  0B6B  2B6A               	goto	u6097
  8059  0B6C  0000               	nop
  8060                           
  8061                           ;teris_16f886.c: 562: RA1 = 0;
  8062  0B6D  1283               	bcf	3,5	;RP0=0, select bank0
  8063  0B6E  1303               	bcf	3,6	;RP1=0, select bank0
  8064  0B6F  1085               	bcf	5,1	;volatile
  8065                           
  8066                           ;teris_16f886.c: 563: _delay((unsigned long)((10)*(20000000/4000000.0)));
  8067  0B70  3010               	movlw	16
  8068  0B71  00F0               	movwf	??_SPI1_write
  8069  0B72                     u6107:	
  8070  0B72  0BF0               	decfsz	??_SPI1_write,f
  8071  0B73  2B72               	goto	u6107
  8072  0B74  0000               	nop
  8073  0B75  3001               	movlw	1
  8074  0B76  00F0               	movwf	??_SPI1_write
  8075  0B77  0870               	movf	??_SPI1_write,w
  8076  0B78  07F3               	addwf	SPI1_write@i,f
  8077  0B79  2B56               	goto	L17
  8078  0B7A                     __end_of_SPI1_write:	
  8079                           
  8080                           	psect	text48
  8081  01D6                     __ptext48:	
  8082 ;; *************** function _MATRIX16x8_to_MATRIX7219 *****************
  8083 ;; Defined at:
  8084 ;;		line 589 in file "teris_16f886.c"
  8085 ;; Parameters:    Size  Location     Type
  8086 ;;  matrix16x8      1    wreg     PTR const struct .
  8087 ;;		 -> g_matrix16x8(16), 
  8088 ;;  matrix7219      1   12[COMMON] PTR struct .
  8089 ;;		 -> printf_MATRIX16x8@matrix7219(16), 
  8090 ;; Auto vars:     Size  Location     Type
  8091 ;;  matrix16x8      1    2[BANK0 ] PTR const struct .
  8092 ;;		 -> g_matrix16x8(16), 
  8093 ;;  col             1    5[BANK0 ] unsigned char 
  8094 ;;  row             1    4[BANK0 ] unsigned char 
  8095 ;;  mask            1    3[BANK0 ] unsigned char 
  8096 ;; Return value:  Size  Location     Type
  8097 ;;                  1    wreg      void 
  8098 ;; Registers used:
  8099 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 0/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8105 ;;      Params:         1       0       0       0       0
  8106 ;;      Locals:         0       4       0       0       0
  8107 ;;      Temps:          0       2       0       0       0
  8108 ;;      Totals:         1       6       0       0       0
  8109 ;;Total ram usage:        7 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; Hardware stack levels required when called:    3
  8112 ;; This function calls:
  8113 ;;		_get_matrix_bit
  8114 ;; This function is called by:
  8115 ;;		_printf_MATRIX16x8
  8116 ;; This function uses a non-reentrant model
  8117 ;;
  8118                           
  8119                           
  8120                           ;psect for function _MATRIX16x8_to_MATRIX7219
  8121  01D6                     _MATRIX16x8_to_MATRIX7219:	
  8122                           
  8123                           ;incstack = 0
  8124                           ; Regs used in _MATRIX16x8_to_MATRIX7219: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+c
      +                          stack]
  8125                           ;MATRIX16x8_to_MATRIX7219@matrix16x8 stored from wreg
  8126  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  8127  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  8128  01D8  00A2               	movwf	MATRIX16x8_to_MATRIX7219@matrix16x8
  8129                           
  8130                           ;teris_16f886.c: 591: uint8_t mask = 0x80;
  8131  01D9  3080               	movlw	128
  8132  01DA  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8133  01DB  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8134  01DC  00A3               	movwf	MATRIX16x8_to_MATRIX7219@mask
  8135                           
  8136                           ;teris_16f886.c: 592: uint8_t row;
  8137                           ;teris_16f886.c: 594: for(uint8_t col = 0; col < 8; col++)
  8138  01DD  01A5               	clrf	MATRIX16x8_to_MATRIX7219@col
  8139  01DE                     L18:	
  8140  01DE  3008               	movlw	8
  8141  01DF  0225               	subwf	MATRIX16x8_to_MATRIX7219@col,w
  8142  01E0  1803               	btfsc	3,0
  8143  01E1  0008               	return
  8144                           
  8145                           ;teris_16f886.c: 595: {
  8146                           ;teris_16f886.c: 596: mask = 0x80;
  8147  01E2  3080               	movlw	128
  8148  01E3  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8149  01E4  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8150  01E5  00A3               	movwf	MATRIX16x8_to_MATRIX7219@mask
  8151                           
  8152                           ;teris_16f886.c: 597: matrix7219->col1[col] = 0;
  8153  01E6  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
  8154  01E7  077C               	addwf	MATRIX16x8_to_MATRIX7219@matrix7219,w
  8155  01E8  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8156  01E9  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8157  01EA  0084               	movwf	4
  8158  01EB  1383               	bcf	3,7	;select IRP bank0
  8159  01EC  0180               	clrf	0
  8160                           
  8161                           ;teris_16f886.c: 598: for(row = 0; row < 8; row++)
  8162  01ED  01A4               	clrf	MATRIX16x8_to_MATRIX7219@row
  8163  01EE  3008               	movlw	8
  8164  01EF  0224               	subwf	MATRIX16x8_to_MATRIX7219@row,w
  8165  01F0  1803               	btfsc	3,0
  8166  01F1  2A1E               	goto	l2805
  8167  01F2                     l2795:	
  8168                           
  8169                           ;teris_16f886.c: 599: {
  8170                           ;teris_16f886.c: 600: if(get_matrix_bit(matrix16x8->row, row, col) == 1)
  8171  01F2  0822               	movf	MATRIX16x8_to_MATRIX7219@matrix16x8,w
  8172  01F3  00F7               	movwf	get_matrix_bit@byte
  8173  01F4  3000               	movlw	0
  8174  01F5  00F8               	movwf	get_matrix_bit@byte+1
  8175  01F6  0824               	movf	MATRIX16x8_to_MATRIX7219@row,w
  8176  01F7  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8177  01F8  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8178  01F9  00F9               	movwf	get_matrix_bit@row
  8179  01FA  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
  8180  01FB  00A1               	movwf	??_MATRIX16x8_to_MATRIX7219+1
  8181  01FC  0821               	movf	??_MATRIX16x8_to_MATRIX7219+1,w
  8182  01FD  00FA               	movwf	get_matrix_bit@col
  8183  01FE  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  8184  0203  3A01               	xorlw	1
  8185  0204  1D03               	skipz
  8186  0205  2A12               	goto	l2799
  8187                           
  8188                           ;teris_16f886.c: 601: {
  8189                           ;teris_16f886.c: 602: matrix7219->col1[col] |= mask;
  8190  0206  1283               	bcf	3,5	;RP0=0, select bank0
  8191  0207  1303               	bcf	3,6	;RP1=0, select bank0
  8192  0208  0823               	movf	MATRIX16x8_to_MATRIX7219@mask,w
  8193  0209  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8194  020A  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
  8195  020B  077C               	addwf	MATRIX16x8_to_MATRIX7219@matrix7219,w
  8196  020C  00A1               	movwf	??_MATRIX16x8_to_MATRIX7219+1
  8197  020D  0821               	movf	??_MATRIX16x8_to_MATRIX7219+1,w
  8198  020E  0084               	movwf	4
  8199  020F  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8200  0210  1383               	bcf	3,7	;select IRP bank0
  8201  0211  0480               	iorwf	0,f
  8202  0212                     l2799:	
  8203                           
  8204                           ;teris_16f886.c: 603: }
  8205                           ;teris_16f886.c: 604: mask >>= 1;
  8206  0212  1003               	clrc
  8207  0213  1283               	bcf	3,5	;RP0=0, select bank0
  8208  0214  1303               	bcf	3,6	;RP1=0, select bank0
  8209  0215  0CA3               	rrf	MATRIX16x8_to_MATRIX7219@mask,f
  8210  0216  3001               	movlw	1
  8211  0217  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8212  0218  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8213  0219  07A4               	addwf	MATRIX16x8_to_MATRIX7219@row,f
  8214  021A  3008               	movlw	8
  8215  021B  0224               	subwf	MATRIX16x8_to_MATRIX7219@row,w
  8216  021C  1C03               	skipc
  8217  021D  29F2               	goto	l2795
  8218  021E                     l2805:	
  8219                           
  8220                           ;teris_16f886.c: 605: }
  8221                           ;teris_16f886.c: 606: mask = 0x80;
  8222  021E  3080               	movlw	128
  8223  021F  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8224  0220  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8225  0221  00A3               	movwf	MATRIX16x8_to_MATRIX7219@mask
  8226                           
  8227                           ;teris_16f886.c: 607: matrix7219->col2[col] = 0;
  8228  0222  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
  8229  0223  3E08               	addlw	8
  8230  0224  077C               	addwf	MATRIX16x8_to_MATRIX7219@matrix7219,w
  8231  0225  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8232  0226  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8233  0227  0084               	movwf	4
  8234  0228  1383               	bcf	3,7	;select IRP bank0
  8235  0229  0180               	clrf	0
  8236                           
  8237                           ;teris_16f886.c: 608: for(row = 8; row < 16; row++)
  8238  022A  3008               	movlw	8
  8239  022B  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8240  022C  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8241  022D  00A4               	movwf	MATRIX16x8_to_MATRIX7219@row
  8242  022E  3010               	movlw	16
  8243  022F  0224               	subwf	MATRIX16x8_to_MATRIX7219@row,w
  8244  0230  1803               	btfsc	3,0
  8245  0231  2A5F               	goto	l2825
  8246  0232                     l2815:	
  8247                           
  8248                           ;teris_16f886.c: 609: {
  8249                           ;teris_16f886.c: 610: if(get_matrix_bit(matrix16x8->row, row, col) == 1)
  8250  0232  0822               	movf	MATRIX16x8_to_MATRIX7219@matrix16x8,w
  8251  0233  00F7               	movwf	get_matrix_bit@byte
  8252  0234  3000               	movlw	0
  8253  0235  00F8               	movwf	get_matrix_bit@byte+1
  8254  0236  0824               	movf	MATRIX16x8_to_MATRIX7219@row,w
  8255  0237  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8256  0238  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8257  0239  00F9               	movwf	get_matrix_bit@row
  8258  023A  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
  8259  023B  00A1               	movwf	??_MATRIX16x8_to_MATRIX7219+1
  8260  023C  0821               	movf	??_MATRIX16x8_to_MATRIX7219+1,w
  8261  023D  00FA               	movwf	get_matrix_bit@col
  8262  023E  160A  118A  278D  120A  118A  	fcall	_get_matrix_bit
  8263  0243  3A01               	xorlw	1
  8264  0244  1D03               	skipz
  8265  0245  2A53               	goto	l2819
  8266                           
  8267                           ;teris_16f886.c: 611: {
  8268                           ;teris_16f886.c: 612: matrix7219->col2[col] |= mask;
  8269  0246  1283               	bcf	3,5	;RP0=0, select bank0
  8270  0247  1303               	bcf	3,6	;RP1=0, select bank0
  8271  0248  0823               	movf	MATRIX16x8_to_MATRIX7219@mask,w
  8272  0249  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8273  024A  0825               	movf	MATRIX16x8_to_MATRIX7219@col,w
  8274  024B  3E08               	addlw	8
  8275  024C  077C               	addwf	MATRIX16x8_to_MATRIX7219@matrix7219,w
  8276  024D  00A1               	movwf	??_MATRIX16x8_to_MATRIX7219+1
  8277  024E  0821               	movf	??_MATRIX16x8_to_MATRIX7219+1,w
  8278  024F  0084               	movwf	4
  8279  0250  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8280  0251  1383               	bcf	3,7	;select IRP bank0
  8281  0252  0480               	iorwf	0,f
  8282  0253                     l2819:	
  8283                           
  8284                           ;teris_16f886.c: 613: }
  8285                           ;teris_16f886.c: 614: mask >>= 1;
  8286  0253  1003               	clrc
  8287  0254  1283               	bcf	3,5	;RP0=0, select bank0
  8288  0255  1303               	bcf	3,6	;RP1=0, select bank0
  8289  0256  0CA3               	rrf	MATRIX16x8_to_MATRIX7219@mask,f
  8290  0257  3001               	movlw	1
  8291  0258  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8292  0259  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8293  025A  07A4               	addwf	MATRIX16x8_to_MATRIX7219@row,f
  8294  025B  3010               	movlw	16
  8295  025C  0224               	subwf	MATRIX16x8_to_MATRIX7219@row,w
  8296  025D  1C03               	skipc
  8297  025E  2A32               	goto	l2815
  8298  025F                     l2825:	
  8299  025F  3001               	movlw	1
  8300  0260  00A0               	movwf	??_MATRIX16x8_to_MATRIX7219
  8301  0261  0820               	movf	??_MATRIX16x8_to_MATRIX7219,w
  8302  0262  07A5               	addwf	MATRIX16x8_to_MATRIX7219@col,f
  8303  0263  29DE               	goto	L18
  8304  0264                     __end_of_MATRIX16x8_to_MATRIX7219:	
  8305                           
  8306                           	psect	text49
  8307  178D                     __ptext49:	
  8308 ;; *************** function _get_matrix_bit *****************
  8309 ;; Defined at:
  8310 ;;		line 473 in file "teris_16f886.c"
  8311 ;; Parameters:    Size  Location     Type
  8312 ;;  byte            2    7[COMMON] PTR const unsigned char 
  8313 ;;		 -> temp_matrix16x8.row(16), NULL(0), temp_matrix16x8(16), g_matrix4x4.row(4), 
  8314 ;;		 -> g_matrix4x4(96), g_matrix16x8(16), 
  8315 ;;  row             1    9[COMMON] unsigned char 
  8316 ;;  col             1   10[COMMON] unsigned char 
  8317 ;; Auto vars:     Size  Location     Type
  8318 ;;		None
  8319 ;; Return value:  Size  Location     Type
  8320 ;;                  1    wreg      unsigned char 
  8321 ;; Registers used:
  8322 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8323 ;; Tracked objects:
  8324 ;;		On entry : 0/0
  8325 ;;		On exit  : 0/0
  8326 ;;		Unchanged: 0/0
  8327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8328 ;;      Params:         4       0       0       0       0
  8329 ;;      Locals:         0       0       0       0       0
  8330 ;;      Temps:          1       0       0       0       0
  8331 ;;      Totals:         5       0       0       0       0
  8332 ;;Total ram usage:        5 bytes
  8333 ;; Hardware stack levels used:    1
  8334 ;; Hardware stack levels required when called:    2
  8335 ;; This function calls:
  8336 ;;		_getbit
  8337 ;; This function is called by:
  8338 ;;		_MATRIX16x8_to_MATRIX7219
  8339 ;;		_printf_debug_MATRIX16x8
  8340 ;;		_hit_land
  8341 ;;		_is_valid
  8342 ;;		_is_left_boundary
  8343 ;;		_is_right_boundary
  8344 ;;		_fall_off
  8345 ;;		_clear
  8346 ;;		_merge
  8347 ;;		_merge1
  8348 ;;		_get_num_of_orphan
  8349 ;;		_get_heavy
  8350 ;;		_get_high_after_merge
  8351 ;;		_get_holes_after_merge
  8352 ;;		_printf_debug_MATRIX4x4
  8353 ;; This function uses a non-reentrant model
  8354 ;;
  8355                           
  8356                           
  8357                           ;psect for function _get_matrix_bit
  8358  178D                     _get_matrix_bit:	
  8359                           
  8360                           ;teris_16f886.c: 479: return getbit(&byte[row], col);
  8361                           
  8362                           ;incstack = 0
  8363                           ; Regs used in _get_matrix_bit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8364  178D  0879               	movf	get_matrix_bit@row,w
  8365  178E  0777               	addwf	get_matrix_bit@byte,w
  8366  178F  00F0               	movwf	getbit@byte
  8367  1790  0878               	movf	get_matrix_bit@byte+1,w
  8368  1791  1803               	skipnc
  8369  1792  3E01               	addlw	1
  8370  1793  00F1               	movwf	getbit@byte+1
  8371  1794  087A               	movf	get_matrix_bit@col,w
  8372  1795  00FB               	movwf	??_get_matrix_bit
  8373  1796  087B               	movf	??_get_matrix_bit,w
  8374  1797  00F2               	movwf	getbit@at
  8375  1798  120A  118A  22F4   	fcall	_getbit
  8376  179B  0008               	return
  8377  179C                     __end_of_get_matrix_bit:	
  8378                           
  8379                           	psect	text50
  8380  02F4                     __ptext50:	
  8381 ;; *************** function _getbit *****************
  8382 ;; Defined at:
  8383 ;;		line 438 in file "teris_16f886.c"
  8384 ;; Parameters:    Size  Location     Type
  8385 ;;  byte            2    0[COMMON] PTR const unsigned char 
  8386 ;;		 -> temp_matrix16x8.row(16), NULL(0), temp_matrix16x8(16), g_matrix4x4.row(4), 
  8387 ;;		 -> g_matrix4x4(96), g_matrix16x8(16), 
  8388 ;;  at              1    2[COMMON] unsigned char 
  8389 ;; Auto vars:     Size  Location     Type
  8390 ;;  temp            2    5[COMMON] PTR struct .
  8391 ;;		 -> temp_matrix16x8.row(16), NULL(0), temp_matrix16x8(16), g_matrix4x4.row(4), 
  8392 ;;		 -> g_matrix4x4(96), g_matrix16x8(16), 
  8393 ;; Return value:  Size  Location     Type
  8394 ;;                  1    wreg      unsigned char 
  8395 ;; Registers used:
  8396 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  8397 ;; Tracked objects:
  8398 ;;		On entry : 0/0
  8399 ;;		On exit  : 0/0
  8400 ;;		Unchanged: 0/0
  8401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8402 ;;      Params:         3       0       0       0       0
  8403 ;;      Locals:         2       0       0       0       0
  8404 ;;      Temps:          2       0       0       0       0
  8405 ;;      Totals:         7       0       0       0       0
  8406 ;;Total ram usage:        7 bytes
  8407 ;; Hardware stack levels used:    2
  8408 ;; This function calls:
  8409 ;;		Nothing
  8410 ;; This function is called by:
  8411 ;;		_get_matrix_bit
  8412 ;; This function uses a non-reentrant model
  8413 ;;
  8414                           
  8415                           
  8416                           ;psect for function _getbit
  8417  02F4                     _getbit:	
  8418                           
  8419                           ;teris_16f886.c: 440: t_byte *temp = (t_byte *)byte;
  8420                           
  8421                           ;incstack = 0
  8422                           ; Regs used in _getbit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  8423  02F4  0870               	movf	getbit@byte,w
  8424  02F5  00F5               	movwf	getbit@temp
  8425  02F6  0871               	movf	getbit@byte+1,w
  8426  02F7  00F6               	movwf	getbit@temp+1
  8427                           
  8428                           ;teris_16f886.c: 441: switch(at)
  8429  02F8  2B6C               	goto	l2717
  8430  02F9                     l2667:	
  8431                           ;teris_16f886.c: 442: {
  8432                           ;teris_16f886.c: 443: case 0:
  8433                           
  8434                           
  8435                           ;teris_16f886.c: 444: return (uint8_t)temp->b0;
  8436  02F9  0876               	movf	getbit@temp+1,w
  8437  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  8438  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  8439  02FC  00FF               	movwf	127
  8440  02FD  0875               	movf	getbit@temp,w
  8441  02FE  0084               	movwf	4
  8442  02FF  120A  158A  2000   	fcall	stringtab
  8443  0302  00F3               	movwf	??_getbit
  8444  0303  0873               	movf	??_getbit,w
  8445  0304  3901               	andlw	1
  8446                           
  8447                           ;teris_16f886.c: 445: break;
  8448  0305  0008               	return
  8449  0306                     l2673:	
  8450                           ;teris_16f886.c: 446: case 1:
  8451                           
  8452                           
  8453                           ;teris_16f886.c: 447: return (uint8_t)temp->b1;
  8454  0306  0876               	movf	getbit@temp+1,w
  8455  0307  1283               	bcf	3,5	;RP0=0, select bank0
  8456  0308  1303               	bcf	3,6	;RP1=0, select bank0
  8457  0309  00FF               	movwf	127
  8458  030A  0875               	movf	getbit@temp,w
  8459  030B  0084               	movwf	4
  8460  030C  120A  158A  2000   	fcall	stringtab
  8461  030F  00F3               	movwf	??_getbit
  8462  0310  0C73               	rrf	??_getbit,w
  8463  0311  3901               	andlw	1
  8464                           
  8465                           ;teris_16f886.c: 448: break;
  8466  0312  0008               	return
  8467  0313                     l2679:	
  8468                           ;teris_16f886.c: 449: case 2:
  8469                           
  8470                           
  8471                           ;teris_16f886.c: 450: return (uint8_t)temp->b2;
  8472  0313  0876               	movf	getbit@temp+1,w
  8473  0314  1283               	bcf	3,5	;RP0=0, select bank0
  8474  0315  1303               	bcf	3,6	;RP1=0, select bank0
  8475  0316  00FF               	movwf	127
  8476  0317  0875               	movf	getbit@temp,w
  8477  0318  0084               	movwf	4
  8478  0319  120A  158A  2000   	fcall	stringtab
  8479  031C  00F3               	movwf	??_getbit
  8480  031D  0C73               	rrf	??_getbit,w
  8481  031E  00F4               	movwf	??_getbit+1
  8482  031F  0C74               	rrf	??_getbit+1,w
  8483  0320  3901               	andlw	1
  8484                           
  8485                           ;teris_16f886.c: 451: break;
  8486  0321  0008               	return
  8487  0322                     l2685:	
  8488                           ;teris_16f886.c: 452: case 3:
  8489                           
  8490                           
  8491                           ;teris_16f886.c: 453: return (uint8_t)temp->b3;
  8492  0322  0876               	movf	getbit@temp+1,w
  8493  0323  1283               	bcf	3,5	;RP0=0, select bank0
  8494  0324  1303               	bcf	3,6	;RP1=0, select bank0
  8495  0325  00FF               	movwf	127
  8496  0326  0875               	movf	getbit@temp,w
  8497  0327  0084               	movwf	4
  8498  0328  120A  158A  2000   	fcall	stringtab
  8499  032B  00F3               	movwf	??_getbit
  8500  032C  0C73               	rrf	??_getbit,w
  8501  032D  00F4               	movwf	??_getbit+1
  8502  032E  0CF4               	rrf	??_getbit+1,f
  8503  032F  0C74               	rrf	??_getbit+1,w
  8504  0330  3901               	andlw	1
  8505                           
  8506                           ;teris_16f886.c: 454: break;
  8507  0331  0008               	return
  8508  0332                     l2691:	
  8509                           ;teris_16f886.c: 455: case 4:
  8510                           
  8511                           
  8512                           ;teris_16f886.c: 456: return (uint8_t)temp->b4;
  8513  0332  0876               	movf	getbit@temp+1,w
  8514  0333  1283               	bcf	3,5	;RP0=0, select bank0
  8515  0334  1303               	bcf	3,6	;RP1=0, select bank0
  8516  0335  00FF               	movwf	127
  8517  0336  0875               	movf	getbit@temp,w
  8518  0337  0084               	movwf	4
  8519  0338  120A  158A  2000   	fcall	stringtab
  8520  033B  00F3               	movwf	??_getbit
  8521  033C  0E73               	swapf	??_getbit,w
  8522  033D  3901               	andlw	1
  8523                           
  8524                           ;teris_16f886.c: 457: break;
  8525  033E  0008               	return
  8526  033F                     l2697:	
  8527                           ;teris_16f886.c: 458: case 5:
  8528                           
  8529                           
  8530                           ;teris_16f886.c: 459: return (uint8_t)temp->b5;
  8531  033F  0876               	movf	getbit@temp+1,w
  8532  0340  1283               	bcf	3,5	;RP0=0, select bank0
  8533  0341  1303               	bcf	3,6	;RP1=0, select bank0
  8534  0342  00FF               	movwf	127
  8535  0343  0875               	movf	getbit@temp,w
  8536  0344  0084               	movwf	4
  8537  0345  120A  158A  2000   	fcall	stringtab
  8538  0348  00F3               	movwf	??_getbit
  8539  0349  0E73               	swapf	??_getbit,w
  8540  034A  00F4               	movwf	??_getbit+1
  8541  034B  0C74               	rrf	??_getbit+1,w
  8542  034C  3901               	andlw	1
  8543                           
  8544                           ;teris_16f886.c: 460: break;
  8545  034D  0008               	return
  8546  034E                     l2703:	
  8547                           ;teris_16f886.c: 461: case 6:
  8548                           
  8549                           
  8550                           ;teris_16f886.c: 462: return (uint8_t)temp->b6;
  8551  034E  0876               	movf	getbit@temp+1,w
  8552  034F  1283               	bcf	3,5	;RP0=0, select bank0
  8553  0350  1303               	bcf	3,6	;RP1=0, select bank0
  8554  0351  00FF               	movwf	127
  8555  0352  0875               	movf	getbit@temp,w
  8556  0353  0084               	movwf	4
  8557  0354  120A  158A  2000   	fcall	stringtab
  8558  0357  00F3               	movwf	??_getbit
  8559  0358  0E73               	swapf	??_getbit,w
  8560  0359  00F4               	movwf	??_getbit+1
  8561  035A  0CF4               	rrf	??_getbit+1,f
  8562  035B  0C74               	rrf	??_getbit+1,w
  8563  035C  3901               	andlw	1
  8564                           
  8565                           ;teris_16f886.c: 463: break;
  8566  035D  0008               	return
  8567  035E                     l2709:	
  8568                           ;teris_16f886.c: 464: case 7:
  8569                           
  8570                           
  8571                           ;teris_16f886.c: 465: return (uint8_t)temp->b7;
  8572  035E  0876               	movf	getbit@temp+1,w
  8573  035F  1283               	bcf	3,5	;RP0=0, select bank0
  8574  0360  1303               	bcf	3,6	;RP1=0, select bank0
  8575  0361  00FF               	movwf	127
  8576  0362  0875               	movf	getbit@temp,w
  8577  0363  0084               	movwf	4
  8578  0364  120A  158A  2000   	fcall	stringtab
  8579  0367  00F3               	movwf	??_getbit
  8580  0368  0D73               	rlf	??_getbit,w
  8581  0369  0D73               	rlf	??_getbit,w
  8582  036A  3901               	andlw	1
  8583                           
  8584                           ;teris_16f886.c: 467: }
  8585                           
  8586                           ;teris_16f886.c: 466: break;
  8587  036B  0008               	return
  8588  036C                     l2717:	
  8589  036C  0872               	movf	getbit@at,w
  8590                           
  8591                           ; Switch size 1, requested type "space"
  8592                           ; Number of cases is 8, Range of values is 0 to 7
  8593                           ; switch strategies available:
  8594                           ; Name         Instructions Cycles
  8595                           ; simple_byte           25    13 (average)
  8596                           ; direct_byte           32     8 (fixed)
  8597                           ; jumptable            260     6 (fixed)
  8598                           ;	Chosen strategy is simple_byte
  8599  036D  3A00               	xorlw	0	; case 0
  8600  036E  1903               	skipnz
  8601  036F  2AF9               	goto	l2667
  8602  0370  3A01               	xorlw	1	; case 1
  8603  0371  1903               	skipnz
  8604  0372  2B06               	goto	l2673
  8605  0373  3A03               	xorlw	3	; case 2
  8606  0374  1903               	skipnz
  8607  0375  2B13               	goto	l2679
  8608  0376  3A01               	xorlw	1	; case 3
  8609  0377  1903               	skipnz
  8610  0378  2B22               	goto	l2685
  8611  0379  3A07               	xorlw	7	; case 4
  8612  037A  1903               	skipnz
  8613  037B  2B32               	goto	l2691
  8614  037C  3A01               	xorlw	1	; case 5
  8615  037D  1903               	skipnz
  8616  037E  2B3F               	goto	l2697
  8617  037F  3A03               	xorlw	3	; case 6
  8618  0380  1903               	skipnz
  8619  0381  2B4E               	goto	l2703
  8620  0382  3A01               	xorlw	1	; case 7
  8621  0383  1903               	skipnz
  8622  0384  2B5E               	goto	l2709
  8623  0385  2B86               	goto	l199
  8624  0386                     l199:	
  8625  0386  0008               	return
  8626  0387                     __end_of_getbit:	
  8627                           
  8628                           	psect	text51
  8629  09B3                     __ptext51:	
  8630 ;; *************** function _memset *****************
  8631 ;; Defined at:
  8632 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  8633 ;; Parameters:    Size  Location     Type
  8634 ;;  p1              1    wreg     PTR void 
  8635 ;;		 -> g_matrix16x8(16), 
  8636 ;;  c               2    0[COMMON] int 
  8637 ;;  n               2    2[COMMON] unsigned int 
  8638 ;; Auto vars:     Size  Location     Type
  8639 ;;  p1              1    5[COMMON] PTR void 
  8640 ;;		 -> g_matrix16x8(16), 
  8641 ;;  p               1    6[COMMON] PTR unsigned char 
  8642 ;;		 -> g_matrix16x8(16), 
  8643 ;; Return value:  Size  Location     Type
  8644 ;;                  1    wreg      PTR void 
  8645 ;; Registers used:
  8646 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8647 ;; Tracked objects:
  8648 ;;		On entry : 0/0
  8649 ;;		On exit  : 0/0
  8650 ;;		Unchanged: 0/0
  8651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8652 ;;      Params:         4       0       0       0       0
  8653 ;;      Locals:         2       0       0       0       0
  8654 ;;      Temps:          1       0       0       0       0
  8655 ;;      Totals:         7       0       0       0       0
  8656 ;;Total ram usage:        7 bytes
  8657 ;; Hardware stack levels used:    1
  8658 ;; This function calls:
  8659 ;;		Nothing
  8660 ;; This function is called by:
  8661 ;;		_Clear_Matrix
  8662 ;; This function uses a non-reentrant model
  8663 ;;
  8664                           
  8665                           
  8666                           ;psect for function _memset
  8667  09B3                     _memset:	
  8668                           
  8669                           ;incstack = 0
  8670                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  8671                           ;memset@p1 stored from wreg
  8672  09B3  00F5               	movwf	memset@p1
  8673  09B4  0875               	movf	memset@p1,w
  8674  09B5  00F4               	movwf	??_memset
  8675  09B6  0874               	movf	??_memset,w
  8676  09B7  00F6               	movwf	memset@p
  8677  09B8                     l2975:	
  8678  09B8  3001               	movlw	1
  8679  09B9  02F2               	subwf	memset@n,f
  8680  09BA  3000               	movlw	0
  8681  09BB  1C03               	skipc
  8682  09BC  03F3               	decf	memset@n+1,f
  8683  09BD  02F3               	subwf	memset@n+1,f
  8684  09BE  0A72               	incf	memset@n,w
  8685  09BF  1903               	btfsc	3,2
  8686  09C0  0A73               	incf	memset@n+1,w
  8687  09C1  1903               	btfsc	3,2
  8688  09C2  0008               	return
  8689  09C3  0870               	movf	memset@c,w
  8690  09C4  00F4               	movwf	??_memset
  8691  09C5  0876               	movf	memset@p,w
  8692  09C6  0084               	movwf	4
  8693  09C7  0874               	movf	??_memset,w
  8694  09C8  1383               	bcf	3,7	;select IRP bank0
  8695  09C9  0080               	movwf	0
  8696  09CA  3001               	movlw	1
  8697  09CB  00F4               	movwf	??_memset
  8698  09CC  0874               	movf	??_memset,w
  8699  09CD  07F6               	addwf	memset@p,f
  8700  09CE  29B8               	goto	l2975
  8701  09CF                     __end_of_memset:	
  8702                           ;	Return value of _memset is never used
  8703                           
  8704  007E                     btemp	set	126	;btemp
  8705  007E                     wtemp	set	126
  8706  007E                     wtemp0	set	126
  8707  0080                     wtemp1	set	128
  8708  0082                     wtemp2	set	130
  8709  0084                     wtemp3	set	132
  8710  0086                     wtemp4	set	134
  8711  0088                     wtemp5	set	136
  8712  007F                     wtemp6	set	127
  8713  007E                     ttemp	set	126
  8714  007E                     ttemp0	set	126
  8715  0081                     ttemp1	set	129
  8716  0084                     ttemp2	set	132
  8717  0087                     ttemp3	set	135
  8718  007F                     ttemp4	set	127
  8719  007E                     ltemp	set	126
  8720  007E                     ltemp0	set	126
  8721  0082                     ltemp1	set	130
  8722  0086                     ltemp2	set	134
  8723  0080                     ltemp3	set	128


Data Sizes:
    Strings     216
    Constant    144
    Data        21
    BSS         127
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     57      79
    BANK1            80      0      64
    BANK3            96      0      64
    BANK2            96      0       0

Pointer List with Targets:

    is_right_boundary@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    is_left_boundary@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    memset@p1	PTR void  size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    memset@p	PTR unsigned char  size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    memcpy@d1	PTR void  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    memcpy@s1	PTR const void  size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    g_cur_matrix4x4	PTR struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    temp_cur_matrix4x4	PTR struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    get_holes_after_merge@matrix	PTR struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    get_high_after_merge@matrix	PTR struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    get_high@matrix	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    right_most@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    right_most@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    left_most@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    left_most@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    get_heavy@matrix	PTR const struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    get_num_of_orphan@matrix	PTR const struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    merge1@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    sp__memcpy	PTR void  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    merge1@matrix16x8_in	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    merge1@matrix16x8_out	PTR struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    merge@matrix16x8	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    merge@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    clear@matrix16x8	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    clear@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    fall_off@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    fall_off@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    is_right_boundary@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    is_left_boundary@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    is_valid@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    is_valid@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    hit_land@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    hit_land@matrix4x4	PTR const struct . size(2) Largest target is 96
		 -> NULL(NULL[0]), g_matrix4x4(CODE[96]), 

    is_row_empty@matrix	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    get_num_removed_rows@matrix	PTR struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), 

    delete_matrix@matrix	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    delete_row@matrix	PTR struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    is_row_full@matrix	PTR const struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), g_matrix16x8(BANK1[16]), 

    sp__memset	PTR void  size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    printf_MATRIX16x8@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    printf_MATRIX7219@matrix	PTR const struct . size(1) Largest target is 16
		 -> printf_MATRIX16x8@matrix7219(BANK0[16]), 

    printf_debug_MATRIX16x8@matrix	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    printf_debug_MATRIX16x8@lable	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_31(CODE[12]), ROM(CODE[8192]), 

    MATRIX16x8_to_MATRIX7219@matrix16x8	PTR const struct . size(1) Largest target is 16
		 -> g_matrix16x8(BANK1[16]), 

    MATRIX16x8_to_MATRIX7219@matrix7219	PTR struct . size(1) Largest target is 16
		 -> printf_MATRIX16x8@matrix7219(BANK0[16]), 

    sp__get_MATRIX4x4	PTR struct . size(2) Largest target is 96
		 -> g_matrix4x4(CODE[96]), 

    get_matrix_bit@byte	PTR const unsigned char  size(2) Largest target is 96
		 -> temp_matrix16x8.row(BANK1[16]), NULL(NULL[0]), temp_matrix16x8(BANK1[16]), g_matrix4x4.row(CODE[4]), 
		 -> g_matrix4x4(CODE[96]), g_matrix16x8(BANK1[16]), 

    set_matrix_bit@byte	PTR unsigned char  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), g_matrix16x8(BANK1[16]), 

    getbit@byte	PTR const unsigned char  size(2) Largest target is 96
		 -> temp_matrix16x8.row(BANK1[16]), NULL(NULL[0]), temp_matrix16x8(BANK1[16]), g_matrix4x4.row(CODE[4]), 
		 -> g_matrix4x4(CODE[96]), g_matrix16x8(BANK1[16]), 

    getbit@temp	PTR struct . size(2) Largest target is 96
		 -> temp_matrix16x8.row(BANK1[16]), NULL(NULL[0]), temp_matrix16x8(BANK1[16]), g_matrix4x4.row(CODE[4]), 
		 -> g_matrix4x4(CODE[96]), g_matrix16x8(BANK1[16]), 

    setbit@byte	PTR unsigned char  size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), g_matrix16x8(BANK1[16]), 

    setbit@temp	PTR struct . size(1) Largest target is 16
		 -> temp_matrix16x8(BANK1[16]), g_matrix16x8(BANK1[16]), 

    debug_line@str	PTR const unsigned char  size(2) Largest target is 31
		 -> STR_30(CODE[2]), STR_29(CODE[21]), STR_28(CODE[1]), STR_25(CODE[1]), 
		 -> STR_22(CODE[21]), STR_21(CODE[2]), STR_20(CODE[21]), STR_19(CODE[1]), 
		 -> STR_16(CODE[31]), STR_15(CODE[2]), STR_12(CODE[21]), STR_11(CODE[2]), 
		 -> STR_10(CODE[21]), STR_9(CODE[1]), STR_6(CODE[30]), STR_5(CODE[2]), 

    debug_str@str	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_31(CODE[12]), STR_27(CODE[2]), STR_26(CODE[2]), STR_24(CODE[2]), 
		 -> STR_23(CODE[2]), STR_18(CODE[2]), STR_17(CODE[2]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), ROM(CODE[8192]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_31(CODE[12]), STR_30(CODE[2]), STR_29(CODE[21]), STR_28(CODE[1]), 
		 -> STR_27(CODE[2]), STR_26(CODE[2]), STR_25(CODE[1]), STR_24(CODE[2]), 
		 -> STR_23(CODE[2]), STR_22(CODE[21]), STR_21(CODE[2]), STR_20(CODE[21]), 
		 -> STR_19(CODE[1]), STR_18(CODE[2]), STR_17(CODE[2]), STR_16(CODE[31]), 
		 -> STR_15(CODE[2]), STR_12(CODE[21]), STR_11(CODE[2]), STR_10(CODE[21]), 
		 -> STR_9(CODE[1]), STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[30]), 
		 -> STR_5(CODE[2]), ROM(CODE[8192]), STR_4(CODE[3]), STR_3(CODE[3]), 
		 -> STR_2(CODE[3]), g_debug(BANK3[64]), STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    _main->_clear
    _main->_hit_land
    _main->_merge
    _main->_printf_debug_MATRIX16x8
    _printf_debug_MATRIX16x8->_get_matrix_bit
    _debug_str->_USARTWriteString
    _debug_line->_USARTWriteString
    _USARTWriteString->_USARTWriteChar
    _merge->_get_matrix_bit
    _max7219_init1->_Write_Word
    _hit_land->_get_matrix_bit
    _find_best_solution->___wmul
    _find_best_solution->_fall_off
    _find_best_solution->_get_heavy
    _find_best_solution->_get_high_after_merge
    _find_best_solution->_get_num_of_orphan
    _find_best_solution->_is_valid
    _find_best_solution->_left_most
    _find_best_solution->_merge1
    _right_most->_is_right_boundary
    _is_right_boundary->_get_matrix_bit
    _merge1->_get_matrix_bit
    _is_left_boundary->_get_matrix_bit
    _is_valid->_get_matrix_bit
    _get_num_removed_rows->_is_row_full
    _get_num_of_orphan->_get_matrix_bit
    _get_holes_after_merge->_get_matrix_bit
    _get_high_after_merge->_get_matrix_bit
    _get_high->_is_row_empty
    _get_heavy->_get_matrix_bit
    _fall_off->_get_matrix_bit
    _eeprom_write_int->_eeprom_write
    _eeprom_read_int->_eeprom_read
    _delete_matrix->_delete_row
    _clear->_get_matrix_bit
    _set_matrix_bit->_setbit
    _char_info_index_rand->___awmod
    _rand->___lmul
    _printf_Screen->_printf_MATRIX16x8
    _printf_MATRIX16x8->_MATRIX16x8_to_MATRIX7219
    _printf_MATRIX16x8->_printf_MATRIX7219
    _printf_MATRIX7219->_Write_Word
    _Write_Word->_SPI1_write
    _MATRIX16x8_to_MATRIX7219->_get_matrix_bit
    _get_matrix_bit->_getbit

Critical Paths under _main in BANK0

    _main->_find_best_solution
    _find_best_solution->___wmul
    _right_most->_is_right_boundary
    _left_most->_is_left_boundary
    ___wmul->_get_holes_after_merge
    _char_info_index_rand->___awmod
    ___awmod->_rand
    _printf_Screen->_printf_MATRIX16x8
    _printf_MATRIX16x8->_MATRIX16x8_to_MATRIX7219

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     5      4   99609
                                             48 BANK0      9     5      4
                       _Clear_Matrix
                          _USARTInit
               _char_info_index_rand
                              _clear
                      _delete_matrix
                    _eeprom_read_int
                   _eeprom_write_int
                 _find_best_solution
                           _hit_land
                      _max7219_init1
                              _merge
                      _printf_Screen
            _printf_debug_MATRIX16x8
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2      75
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _printf_debug_MATRIX16x8                              7     4      3    8352
                                             12 COMMON     2     2      0
                                              0 BANK0      5     2      3
                         _debug_line
                          _debug_str
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _debug_str                                            2     0      2    1308
                                              3 COMMON     2     0      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (2) _debug_line                                           2     0      2    1467
                                              3 COMMON     2     0      2
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (3) _USARTWriteString                                     2     0      2     597
                                              1 COMMON     2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _USARTWriteChar                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _merge                                                9     5      4    6766
                                             12 COMMON     2     2      0
                                              0 BANK0      7     3      4
                     _get_matrix_bit
                     _set_matrix_bit
 ---------------------------------------------------------------------------------
 (1) _max7219_init1                                        3     3      0    1134
                                              8 COMMON     3     3      0
                         _Write_Word
 ---------------------------------------------------------------------------------
 (1) _hit_land                                             9     5      4    5634
                                             12 COMMON     2     2      0
                                              0 BANK0      7     3      4
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (1) _find_best_solution                                  32    32      0   54368
                                             16 BANK0     32    32      0
                             ___wmul
                           _fall_off
                          _get_heavy
                           _get_high
               _get_high_after_merge
              _get_holes_after_merge
                  _get_num_of_orphan
               _get_num_removed_rows
                           _is_valid
                          _left_most
                             _merge1
                         _right_most
 ---------------------------------------------------------------------------------
 (2) _right_most                                           5     2      3    5666
                                              6 BANK0      5     2      3
                  _is_right_boundary
 ---------------------------------------------------------------------------------
 (3) _is_right_boundary                                    8     5      3    5471
                                             12 COMMON     2     2      0
                                              0 BANK0      6     3      3
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _merge1                                              12     7      5    7139
                                             12 COMMON     2     2      0
                                              0 BANK0     10     5      5
                     _get_matrix_bit
                             _memcpy
                     _set_matrix_bit
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               7     4      3     253
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (2) _left_most                                            5     2      3    5666
                                             12 COMMON     2     2      0
                                             11 BANK0      3     0      3
                   _is_left_boundary
 ---------------------------------------------------------------------------------
 (3) _is_left_boundary                                    11     8      3    5471
                                              0 BANK0     11     8      3
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _is_valid                                             9     5      4    5722
                                             12 COMMON     2     2      0
                                              0 BANK0      7     3      4
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _get_num_removed_rows                                 4     4      0     372
                                              3 COMMON     4     4      0
                        _is_row_full
 ---------------------------------------------------------------------------------
 (2) _get_num_of_orphan                                   11     9      2    5579
                                             12 COMMON     2     0      2
                                              0 BANK0      9     9      0
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _get_holes_after_merge                               12    12      0    6244
                                              0 BANK0     12    12      0
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _get_high_after_merge                                 7     5      2    5418
                                             12 COMMON     2     0      2
                                              0 BANK0      5     5      0
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _get_high                                             3     3      0     241
                                              2 COMMON     3     3      0
                       _is_row_empty
 ---------------------------------------------------------------------------------
 (3) _is_row_empty                                         2     1      1     102
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (2) _get_heavy                                           12    10      2    5626
                                             12 COMMON     2     0      2
                                              0 BANK0     10    10      0
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _fall_off                                             9     5      4    5679
                                             12 COMMON     2     2      0
                                              0 BANK0      7     3      4
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     492
                                             12 COMMON     2     2      0
                                             12 BANK0      4     0      4
              _get_holes_after_merge (ARG)
 ---------------------------------------------------------------------------------
 (1) _eeprom_write_int                                     5     3      2     337
                                              3 COMMON     5     3      2
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (2) _eeprom_write                                         3     2      1     150
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _eeprom_read_int                                      7     5      2      91
                                              2 COMMON     7     5      2
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _delete_matrix                                        4     4      0     675
                                              6 COMMON     4     4      0
                         _delete_row
                        _is_row_full
 ---------------------------------------------------------------------------------
 (3) _is_row_full                                          3     2      1     204
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _delete_row                                           6     5      1     324
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (1) _clear                                                9     5      4    6766
                                             12 COMMON     2     2      0
                                              0 BANK0      7     3      4
                     _get_matrix_bit
                     _set_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _set_matrix_bit                                       6     3      3    1176
                                              5 COMMON     6     3      3
                             _setbit
 ---------------------------------------------------------------------------------
 (3) _setbit                                               5     3      2     530
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _char_info_index_rand                                 0     0      0     706
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     198
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     198
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     508
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      75
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Clear_Matrix                                         0     0      0    7407
                             _memset
                      _printf_Screen
 ---------------------------------------------------------------------------------
 (1) _printf_Screen                                        0     0      0    7178
                  _printf_MATRIX16x8
 ---------------------------------------------------------------------------------
 (2) _printf_MATRIX16x8                                   18    18      0    7178
                                             13 COMMON     1     1      0
                                              6 BANK0     17    17      0
           _MATRIX16x8_to_MATRIX7219
                  _printf_MATRIX7219
 ---------------------------------------------------------------------------------
 (3) _printf_MATRIX7219                                    7     7      0    1339
                                              8 COMMON     5     5      0
                                              0 BANK0      2     2      0
                         _Write_Word
 ---------------------------------------------------------------------------------
 (4) _Write_Word                                           4     1      3    1134
                                              4 COMMON     4     1      3
                         _SPI1_write
 ---------------------------------------------------------------------------------
 (5) _SPI1_write                                           4     4      0      92
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MATRIX16x8_to_MATRIX7219                             7     6      1    5738
                                             12 COMMON     1     0      1
                                              0 BANK0      6     6      0
                     _get_matrix_bit
 ---------------------------------------------------------------------------------
 (2) _get_matrix_bit                                       5     1      4    5163
                                              7 COMMON     5     1      4
                             _getbit
 ---------------------------------------------------------------------------------
 (4) _getbit                                               7     4      3     327
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     229
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Clear_Matrix
     _memset
     _printf_Screen
       _printf_MATRIX16x8
         _MATRIX16x8_to_MATRIX7219
           _get_matrix_bit
             _getbit
         _printf_MATRIX7219
           _Write_Word
             _SPI1_write
   _USARTInit
   _char_info_index_rand
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _clear
     _get_matrix_bit
       _getbit
     _set_matrix_bit
       _setbit
   _delete_matrix
     _delete_row
     _is_row_full
   _eeprom_read_int
     _eeprom_read
   _eeprom_write_int
     _eeprom_write
   _find_best_solution
     ___wmul
       _get_holes_after_merge (ARG)
         _get_matrix_bit
           _getbit
     _fall_off
       _get_matrix_bit
         _getbit
     _get_heavy
       _get_matrix_bit
         _getbit
     _get_high
       _is_row_empty
     _get_high_after_merge
       _get_matrix_bit
         _getbit
     _get_holes_after_merge
       _get_matrix_bit
         _getbit
     _get_num_of_orphan
       _get_matrix_bit
         _getbit
     _get_num_removed_rows
       _is_row_full
     _is_valid
       _get_matrix_bit
         _getbit
     _left_most
       _is_left_boundary
         _get_matrix_bit
           _getbit
     _merge1
       _get_matrix_bit
         _getbit
       _memcpy
       _set_matrix_bit
         _setbit
     _right_most
       _is_right_boundary
         _get_matrix_bit
           _getbit
   _hit_land
     _get_matrix_bit
       _getbit
   _max7219_init1
     _Write_Word
       _SPI1_write
   _merge
     _get_matrix_bit
       _getbit
     _set_matrix_bit
       _setbit
   _printf_Screen
     _printf_MATRIX16x8
       _MATRIX16x8_to_MATRIX7219
         _get_matrix_bit
           _getbit
       _printf_MATRIX7219
         _Write_Word
           _SPI1_write
   _printf_debug_MATRIX16x8
     _debug_line
       _USARTWriteString
         _USARTWriteChar
     _debug_str
       _USARTWriteString
         _USARTWriteChar
     _get_matrix_bit
       _getbit
   _srand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      40       9       66.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      40       7       80.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     39      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      DD      12        0.0%
ABS                  0      0      DD       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Aug 30 22:39:40 2016

                         __CFG_CP$ON 0000                                    pc 0002  
           ?_printf_debug_MATRIX16x8 0020        get_holes_after_merge@num_hole 0026  
                                 l36 175F                                   l29 0D47  
                                 _RD 0C60                          __CFG_CPD$ON 0000  
                                 _WR 0C61                                   fsr 0004  
                ___wmul@multiplicand 002E                   USARTInit@baud_rate 0070  
              ?_char_info_index_rand 0070                          get_high@row 0074  
                        __CFG_LVP$ON 0000                                  l243 0B62  
                                l331 0AAE                                  l265 0082  
                                l194 0F95                                  l435 01B8  
                                l451 0B2D                                  l380 00E0  
                                l444 0A2D                                  l199 0386  
                                l714 0ADF                                  l475 045D  
                                l804 0A5A                                  l492 0488  
                                l486 0452                                  l692 0999  
                                _GIE 005F                                  _RA1 0029  
                                _RA2 002A                                  _RA3 002B  
                                fsr0 0004                eeprom_write_int@value 0073  
                                indf 0000                         ___awmod@sign 002C  
                right_most@matrix4x4 0026                         __CFG_IESO$ON 0000  
                       get_heavy@col 0028                         get_heavy@pre 0027  
                       get_heavy@row 0029                __end_of_max7219_init1 0DEC  
                merge1@matrix16x8_in 0023                       is_row_full@row 0070  
                               l3001 0A9D                                 l3007 0AB7  
                               l3031 02A1                                 l3023 0273  
                               l3201 01D1                                 l3017 026D  
                               l3113 0F1E                                 l3035 02C6  
                               l3045 02E1                                 l3053 02F2  
                               l3221 0A49                                 l3117 0F28  
                               l3109 0EF6                                 l3063 00EC  
                               l3151 005D                                 l3135 001D  
                               l3039 02C8                                 l3231 0B49  
                               l3305 03B6                                 l3145 003F  
                               l3129 0013                                 l3049 02EC  
                               l5011 0D3D                                 l3411 0E05  
                               l3403 0DFF                                 l3083 013E  
                               l3091 014F                                 l3315 03DB  
                               l3155 0065                                 l5013 0D42  
                               l3413 0E13                                 l3421 0E2C  
                               l3077 0123                                 l3069 00F2  
                               l3181 0187                                 l3245 0A24  
                               l3333 0433                                 l3325 0426  
                               l2703 034E                                 l5007 0D33  
                               l3431 0D1A                                 l3087 0149  
                               l3167 0162                                 l3239 0A11  
                               l3271 0C3C                                 l5009 0D38  
                               l3433 0D1C                                 l3441 0D25  
                               l3425 0E34                                 l3417 0E21  
                               l3193 01C3                                 l3177 016D  
                               l3249 0A2A                                 l3265 0C20  
                               l4321 04C6                                 l2731 0B65  
                               l3435 0D1E                                 l3275 0C47  
                               l4323 04CB                                 l2709 035E  
                               l2717 036C                                 l2805 021E  
                               l3437 0D20                                 l3189 01BA  
                               l3197 01C9                                 l3349 0493  
                               l3701 0D0D                                 l4341 051C  
                               l2815 0232                                 l3615 0BD5  
                               l3295 03A0                                 l3287 0395  
                               l2903 0E84                                 l3631 0FA5  
                               l2673 0306                                 l2825 025F  
                               l2761 0F45                                 l3617 0BAF  
                               l2913 0E8F                                 l3625 0F9F  
                               l2691 0332                                 l2667 02F9  
                               l2819 0253                                 l2771 0F72  
                               l2763 0F4E                                 l3379 0A50  
                               l2931 0ECD                                 l4355 056A  
                               l2685 0322                                 l2765 0F57  
                               l2757 0F33                                 l2861 178B  
                               l3645 0FED                                 l3653 0FFE  
                               l3581 0097                                 l2679 0313  
                               l3399 0DF8                                 l2951 0C54  
                               l2767 0F60                                 l2759 0F3C  
                               l2775 0F7B                                 l2871 175C  
                               l2927 0EC2                                 l2919 0E95  
                               l2935 0ED3                                 l3751 05BB  
                               l3639 0FD2                                 l2847 0AB9  
                               l3591 00C2                                 l3575 0092  
                               l2697 033F                                 l2769 0F69  
                               l3673 0CBF                                 l2881 0E42  
                               l3753 07BC                                 l3745 07B0  
                               l3649 0FF8                                 l3585 00AF  
                               l2795 01F2                                 l2955 0C6A  
                               l2947 0B0D                                 l3739 070C  
                               l3747 0617                                 l3677 0CC9  
                               l3669 0C98                                 l3757 07C7  
                               l3749 07B7                                 l3693 0CDB  
                               l3597 00D5                                 l2975 09B8  
                               l2799 0212                                 l2991 0C0C  
                               l2895 0E73                                 l2887 0E48  
                               l3697 0D03                                 l2899 0E7E  
                               l2989 0C05                                 STR_1 0971  
                       __CFG_WDTE$ON 0000                                 STR_5 0976  
                               STR_6 08C1                                 STR_7 0974  
                               STR_8 0978                          main@hit_res 0058  
                               u3125 0D92                                 u4115 06E7  
                               u4125 0771                                 u2615 0C6C  
                               u4135 07A0                                 u2625 0C74  
                               u2555 0EBE                                 u4075 05DC  
                               u3605 0E19                                 u3525 0A5B  
                               u3615 0E22                                 u3535 0A62  
                               u3455 0480                                 u2815 02DD  
                               u5135 050B                                 u2665 0BED  
                               u6107 0B72                                 _PEIE 005E  
                               u3585 0E08                                 u2795 02C4  
                               _RCIE 0465                                 u6077 055D  
                               u2895 0138                                 u3935 0FCE  
                               u6087 059D                                 u6097 0B6A  
                               _WREN 0C62                       ??_eeprom_write 0071  
          __size_of_eeprom_write_int 001D                                 _Seed 005E  
                       __CFG_WRT$OFF 0000               __end_of_USARTWriteChar 1766  
                      __CFG_FCMEN$ON 0000                    eeprom_read_int@at 0078  
                               _main 0495                                 _rand 0D59  
               right_most@matrix16x8 0028                                 btemp 007E  
                      __CFG_BOREN$ON 0000                                 ltemp 007E  
                               start 0000                                 ttemp 007E  
                               wtemp 007E                        __CFG_MCLRE$ON 0000  
    find_best_solution@tem_sub_index 004E         __end_of_get_num_removed_rows 0AB9  
                      get_heavy@risk 0023                      is_row_empty@row 0070  
               merge1@matrix16x8_out 0024           get_high_after_merge@matrix 007C  
                              ?_main 0050                                ?_rand 0020  
                              _EEADR 010D                                STR_10 0924  
                              STR_20 0924                                STR_12 08FA  
                              STR_13 0967                                STR_22 090F  
                              STR_14 08DF                                STR_15 0976  
                              STR_31 095B                                STR_32 0939  
                              STR_16 08A2                                STR_17 0974  
                              STR_33 094A                                STR_18 0978  
                              STR_19 0973                      __end_of___awmod 0E39  
                              _CARRY 0018                     USARTWriteChar@ch 0070  
         is_left_boundary@matrix16x8 0022                                _RCREG 001A  
 MATRIX16x8_to_MATRIX7219@matrix7219 007C                                _SPBRG 0099  
                   _is_left_boundary 0E39   MATRIX16x8_to_MATRIX7219@matrix16x8 0022  
                              _TXREG 0019                                _UQEnd 006D  
                ___lmul@multiplicand 0074                          ?_SPI1_write 0070  
                              _clear 0C8B                      __end_of_dpowers 083A  
                              _cur_x 006C                                _cur_y 0064  
                              _merge 0CCE                                _randx 0068  
                              _srand 1776                         ?_is_row_full 0070  
                    ??_printf_Screen 007E                                pclath 000A  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                    merge@matrix16x8 0023                   __size_of_USARTInit 0047  
                    ?_USARTWriteChar 0070                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003                          hit_land@col 0025  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                          hit_land@row 0026  
                     get_high@matrix 0073                      __initialization 07C9  
    find_best_solution@temp_pre_risk 0042                         __end_of_main 05AB  
                    _temp_matrix16x8 00C0                         __end_of_rand 0DA0  
                     get_heavy@start 0025               ??_char_info_index_rand 007E  
                             ??_main 0054                    get_matrix_bit@col 007A  
                             ??_rand 0022                    set_matrix_bit@col 0076  
        is_right_boundary@matrix16x8 0022                    get_matrix_bit@row 0079  
                  set_matrix_bit@row 0075             find_best_solution@temp_x 004F  
           find_best_solution@temp_y 004D                               ?_clear 0020  
                             ?_merge 0020                               _EEDATA 010C  
                             _EECON1 018C                               _EECON2 018D  
  __size_of_MATRIX16x8_to_MATRIX7219 008E                               ?_srand 0070  
          ?_MATRIX16x8_to_MATRIX7219 007C                __size_of_Clear_Matrix 0011  
            get_num_of_orphan@matrix 0026                __end_of_delete_matrix 0BDA  
                             _URBuff 00A0                     __end_of_fall_off 0154  
                     __CFG_PWRTE$OFF 0000             __size_of_eeprom_read_int 0024  
              get_high_after_merge@y 0022            get_num_removed_rows@count 0074  
               __size_of_eeprom_read 001B                     __end_of_get_high 0A2C  
                __size_of_SPI1_write 002A                               ___lmul 0C4C  
                             ___wmul 0A4E                            ??___awmod 007D  
                   __end_of_hit_land 1000                               _getbit 02F4  
                             _merge1 0ED5             __end_of_USARTWriteString 0ADE  
                             _memcpy 0B04                               _memset 09B3  
                   __end_of_is_valid 02F4                               clear@x 0024  
                             clear@y 0020                      ___awmod@divisor 0027  
                             _setbit 0F2D                 __end_of_eeprom_write 0B04  
                    ___awmod@counter 002B                    __end_of_USARTInit 0D59  
                      ?_is_row_empty 0070          __size_of_find_best_solution 021E  
                             merge@x 0024                               merge@y 0020  
                        is_valid@col 0026                          is_valid@row 0025  
                       _Clear_Matrix 17BB                               srand@x 0070  
                  _is_right_boundary 0E86           printf_debug_MATRIX16x8@col 0024  
         printf_debug_MATRIX16x8@row 0023                 _get_num_removed_rows 0A95  
                   ??_get_matrix_bit 007B              ??_get_holes_after_merge 0020  
                 ?_is_right_boundary 0020                     _eeprom_write_int 09CF  
            __end_of__initialization 07FC            is_left_boundary@matrix4x4 0020  
                    eeprom_read@addr 0071                  ??_is_right_boundary 007C  
                     __pcstackCOMMON 0070                         __pidataBANK0 097B  
                       __pidataBANK1 17AB                        __end_of_clear 0CCE  
                         _Write_Word 09EC                        __end_of_merge 0D12  
                    get_heavy@matrix 0026                        __end_of_srand 177F  
                 __size_of_debug_str 0008                       ??_is_row_empty 0071  
            __size_of_set_matrix_bit 000F                get_num_of_orphan@full 0025  
          __end_of_is_right_boundary 0ED5                get_num_of_orphan@risk 0023  
      __size_of_get_high_after_merge 003B                   __size_of_get_heavy 0082  
                  eeprom_write@value 0070     __size_of_printf_debug_MATRIX16x8 0073  
         get_holes_after_merge@start 0028                   is_valid@matrix16x8 0023  
              ?_get_num_removed_rows 0070                              ??_clear 007C  
                            ??_merge 007C                   get_matrix_bit@byte 0077  
                            ??_srand 0072                   set_matrix_bit@byte 007A  
                         __pbssBANK0 0059                           __pbssBANK1 00A0  
                         __pbssBANK3 0190                   __size_of_left_most 0022  
                  is_row_full@matrix 0072                 __size_of_is_row_full 000E  
                         _debug_line 17CC                  delete_matrix@matrix 0078  
           __end_of_is_left_boundary 0E86                         _g_matrix16x8 00D0  
                         _delete_row 0BDA                           __pmaintext 0495  
                            ?___lmul 0070                              ?___wmul 002C  
                            ?_getbit 0070                              ?_merge1 0020  
                            ?_memcpy 0070                              ?_memset 0070  
                  ??_eeprom_read_int 0074                       ___lmul@product 0079  
                            ?_setbit 0070            get_holes_after_merge@stop 0027  
                       ??_SPI1_write 0070                            ?_fall_off 0020  
                   ??_USARTWriteChar 0070                 is_right_boundary@col 0025  
               is_right_boundary@row 0024                            ?_get_high 0070  
                 USARTWriteInt@F1617 0059                           __stringtab 0800  
                  _get_num_of_orphan 0005                            ?_hit_land 0020  
                  __end_of_debug_str 176E                              _UQFront 006E  
                          ?_is_valid 0020                   ?_get_num_of_orphan 007C  
       MATRIX16x8_to_MATRIX7219@mask 0023          MATRIX16x8_to_MATRIX7219@col 0025  
        MATRIX16x8_to_MATRIX7219@row 0024                        debug_line@str 0073  
                  __end_of_get_heavy 01D6              get_num_removed_rows@row 0076  
              __size_of_eeprom_write 0026                  ??_get_num_of_orphan 0020  
                    __size_of___lmul 003F                              ___awmod 0DEC  
                 __end_of_SPI1_write 0B7A                 eeprom_read_int@value 0076  
                    __size_of___wmul 0023               __size_of_max7219_init1 004C  
                        ?_Write_Word 0074                          right_most@x 002A  
                    __size_of_getbit 0093                              _g_debug 0190  
                    __size_of_merge1 0058                      __size_of_memcpy 0026  
                          _ANSELbits 0188                      __size_of_memset 001C  
   __end_of_MATRIX16x8_to_MATRIX7219 0264                    __end_of_left_most 0A4E  
                            __ptext1 1776                              __ptext2 006A  
                            __ptext3 1766                              __ptext4 17CC  
                            __ptext5 0AB9                              __ptext6 175E  
                            __ptext7 0CCE                              __ptext8 0DA0  
                            __ptext9 0F96                      __size_of_setbit 0069  
find_best_solution@tem_pre_sub_index 0047                   hit_land@matrix16x8 0023  
                  __end_of_hexpowers 0842                              _dpowers 0830  
                   ___awmod@dividend 0029           __size_of_is_right_boundary 004F  
             ??_get_num_removed_rows 0073                          SPI1_write@i 0073  
                         ??_fall_off 007C                          setbit@value 0071  
          __end_of_get_num_of_orphan 006A                           ??_get_high 0072  
                            clrloop0 176F                 end_of_initialization 07FC  
                  __end_of_octpowers 0830                    _printf_MATRIX7219 0B7A  
                         ??_hit_land 007C                              merge1@x 0027  
                            merge1@y 0020                    _printf_MATRIX16x8 17EE  
                            memcpy@d 0075                              memcpy@n 0071  
                            memcpy@s 0076                __end_of_printf_Screen 1756  
                            memset@c 0070                 __end_of_is_row_empty 175E  
                            memset@n 0072                              memset@p 0076  
                       _eeprom_write 0ADE                           ??_is_valid 007C  
                        ?_debug_line 0073                   ?_printf_MATRIX7219 0070  
                     SPI1_write@data 0071                   ?_printf_MATRIX16x8 0070  
                     SPI1_write@mask 0072                           _right_most 0B2A  
                        ?_delete_row 0070                            _RCSTAbits 0018  
                ??_printf_MATRIX7219 0078                  ??_printf_MATRIX16x8 007D  
                       __pstringtext 0800             __end_of_eeprom_write_int 09EC  
                  ?_USARTWriteString 0071        __size_of_char_info_index_rand 0018  
                     _set_matrix_bit 179C                   ??_USARTWriteString 0073  
                          _USARTInit 0D12              _printf_debug_MATRIX16x8 006A  
                          _TRISAbits 0085                   left_most@matrix4x4 002B  
                __end_of_g_char_info 0824                      merge1@matrix4x4 0021  
          __end_of_printf_MATRIX7219 0BA9            __end_of_printf_MATRIX16x8 1800  
                      _max7219_init1 0DA0                 eeprom_write_int@temp 0077  
                __size_of_Write_Word 001E                           getbit@byte 0070  
                         getbit@temp 0075       __size_of_get_holes_after_merge 010E  
      __end_of_get_holes_after_merge 0495                find_best_solution@res 004A  
                      ??_eeprom_read 0070                            _TXSTAbits 0098  
                    _g_cur_matrix4x4 0060         printf_debug_MATRIX16x8@lable 0020  
         __end_of_find_best_solution 07C9                       __end_of___lmul 0C8B  
                     __end_of___wmul 0A71               __end_of_set_matrix_bit 17AB  
                __end_of_g_matrix4x4 08A2                       __end_of_getbit 0387  
                     __end_of_merge1 0F2D                       __end_of_memcpy 0B2A  
                     __end_of_memset 09CF                       __end_of_setbit 0F96  
             __size_of_delete_matrix 0031                  __size_of_debug_line 0011  
                     merge@matrix4x4 0021                  start_initialization 07C9  
                         ?_USARTInit 0070             _MATRIX16x8_to_MATRIX7219 01D6  
                __size_of_delete_row 0037                       ?_max7219_init1 0070  
         __size_of_get_num_of_orphan 0065                           left_most@x 007D  
         is_right_boundary@matrix4x4 0020                        delete_row@row 0070  
                    _eeprom_read_int 0A71             __CFG_FOSC$INTRC_NOCLKOUT 0000  
                 is_right_boundary@x 0023         __end_of_get_high_after_merge 0C4C  
                        ?_right_most 0026                    ?_is_left_boundary 0020  
        get_holes_after_merge@matrix 0029                             ??___lmul 0078  
                 ??_is_left_boundary 0023                             ??___wmul 007C  
                __end_of_eeprom_read 09B3                           init_fetch0 17DD  
                 is_row_empty@matrix 0071                             ??_getbit 0073  
                        __pdataBANK0 0068                          __pdataBANK1 00D0  
                  _g_char_info_index 0065                             ??_merge1 007C  
                           ??_memcpy 0073                             ??_memset 0074  
                    ?_set_matrix_bit 0075                             ??_setbit 0072  
                        _g_char_info 0812                  set_matrix_bit@value 0077  
          ??_printf_debug_MATRIX16x8 007C         find_best_solution@temp_pre_x 0046  
  find_best_solution@left_most_index 0044                   eeprom_write_int@at 0076  
                          ___latbits 0002                        __pcstackBANK0 0020  
         __size_of_printf_MATRIX7219 002F                __size_of_is_row_empty 0008  
         __size_of_printf_MATRIX16x8 0012                        ??_is_row_full 0071  
                  __size_of_fall_off 0077                     eeprom_write@addr 0072  
               get_num_of_orphan@col 0027                 get_num_of_orphan@row 0028  
                  __size_of_get_high 0022                    is_valid@matrix4x4 0021  
                  __size_of_hit_land 006A                        _delete_matrix 0BA9  
                          __pnvBANK0 006D                            _debug_str 1766  
                 delete_matrix@count 0077                    __size_of_is_valid 0090  
            printf_MATRIX7219@matrix 0020                     delete_matrix@row 0079  
                        _g_matrix4x4 0842              __size_of_get_matrix_bit 000F  
                           ?___awmod 0027                         ??_Write_Word 0077  
      printf_debug_MATRIX16x8@matrix 0022                            _get_heavy 0154  
                       _is_row_empty 1756                    is_left_boundary@x 0028  
                    ??_max7219_init1 0078                          ??_USARTInit 0072  
                          _left_most 0A2C                   fall_off@matrix16x8 0023  
                __size_of_right_most 0026                            _hexpowers 083A  
                     __size_of_clear 0043                 printf_MATRIX7219@col 0021  
                     __size_of_merge 0044              __end_of_eeprom_read_int 0A95  
                     __size_of_srand 0009                         debug_str@str 0073  
                  hit_land@matrix4x4 0021                           setbit@byte 0073  
                 __end_of_Write_Word 0A0A                           setbit@temp 0074  
    __end_of_printf_debug_MATRIX16x8 00DD                         ??_debug_line 0075  
                     ?_delete_matrix 0070                       ___wmul@product 007C  
                          fall_off@x 0024                            fall_off@y 0020  
                   delete_row@matrix 0074                            clear_ram0 176E  
                          _octpowers 0824                          _eeprom_read 0998  
                __end_of_is_row_full 178D                           ?_debug_str 0073  
                       ??_delete_row 0071                             _PIR1bits 000C  
                         ?_get_heavy 007C                    ?_eeprom_write_int 0073  
                        __stringbase 0812                    ___wmul@multiplier 002C  
                 ??_eeprom_write_int 0075                   __end_of_debug_line 17DD  
                      ?_Clear_Matrix 0070                 _get_high_after_merge 0C11  
                         ?_left_most 002B        __size_of_get_num_removed_rows 0024  
                 __end_of_delete_row 0C11                    ___lmul@multiplier 0070  
                is_left_boundary@col 002A                  is_left_boundary@row 0029  
          __size_of_USARTWriteString 0025                            hit_land@x 0024  
                          hit_land@y 0020         __end_of_char_info_index_rand 0998  
            get_high_after_merge@col 0023                            merge1@col 0029  
                          merge1@len 0025              get_high_after_merge@row 0024  
                          merge1@row 0028              __size_of_USARTWriteChar 0008  
                          is_valid@x 0024                            is_valid@y 0020  
        find_best_solution@temp_high 004B           ??_MATRIX16x8_to_MATRIX7219 0020  
                   __size_of___awmod 004D          find_best_solution@temp_risk 0048  
                 __end_of__stringtab 0812               __size_of_printf_Screen 0005  
                     ??_Clear_Matrix 007E                ?_get_high_after_merge 007C  
                           _fall_off 00DD                   _find_best_solution 05AB  
                           __ptext10 05AB                             __ptext11 0B2A  
                           __ptext20 0387                             __ptext12 0E86  
                           __ptext21 0C11                             __ptext13 0ED5  
                           __ptext30 0998                             __ptext22 0A0A  
                           __ptext14 0B04                             __ptext31 0BA9  
                           __ptext23 1756                             __ptext15 0A2C  
                           __ptext40 0DEC                             __ptext32 177F  
                           __ptext24 0154                             __ptext16 0E39  
                           __ptext41 0D12                             __ptext33 0BDA  
                           __ptext25 00DD                             __ptext17 0264  
                           __ptext50 02F4                             __ptext42 17BB  
                           __ptext34 0C8B                             __ptext26 0A4E  
                           __ptext18 0A95                             __ptext51 09B3  
                           __ptext43 1751                             __ptext35 179C  
                           __ptext27 09CF                             __ptext19 0005  
                           __ptext44 17EE                             __ptext36 0F2D  
                           __ptext28 0ADE                             __ptext45 0B7A  
                           __ptext37 0980                             __ptext29 0A71  
                           __ptext46 09EC                             __ptext38 0D59  
                           __ptext47 0B50                             __ptext39 0C4C  
                           __ptext48 01D6                             __ptext49 178D  
                  __CFG_BOR4V$BOR21V 0000                             _get_high 0A0A  
              _g_char_info_sub_index 0066                     ?_eeprom_read_int 0072  
                        _is_row_full 177F                      ??_delete_matrix 0076  
                           _hit_land 0F96                    fall_off@matrix4x4 0021  
                ?_find_best_solution 0070                        __size_of_main 0116  
                           _is_valid 0264                        __size_of_rand 0047  
                           clear@col 0026          printf_MATRIX16x8@matrix7219 0027  
                           clear@row 0025                         ??_right_most 0029  
        printf_MATRIX16x8@matrix16x8 0026                _get_holes_after_merge 0387  
                        ??_debug_str 0075                       _get_matrix_bit 178D  
                   ??_set_matrix_bit 0078                      clear@matrix16x8 0023  
                           getbit@at 0072                             main@argc 0050  
                           main@argv 0052                          ??_get_heavy 0020  
           get_holes_after_merge@col 002A             get_holes_after_merge@row 002B  
               ??_find_best_solution 0030                         _timer1_count 0067  
                        fall_off@col 0025                          fall_off@row 0026  
          __size_of_is_left_boundary 004D                          delete_row@i 0075  
                        ??_left_most 007C                             memcpy@d1 0074  
                           memcpy@s1 0070                             merge@col 0026  
                           merge@row 0025                   __end_of_right_most 0B50  
                           init_ram0 17E1                             memset@p1 0075  
                      _printf_Screen 1751               __end_of_get_matrix_bit 179C  
                          stringcode 080A                             setbit@at 0070  
                     clear@matrix4x4 0021                  USARTWriteString@str 0071  
                Write_Word@myColumn1 0077                  Write_Word@myColumn2 0075  
               _char_info_index_rand 0980               ??_get_high_after_merge 0020  
 find_best_solution@right_most_index 0045                             stringtab 0800  
                         _SPI1_write 0B50                     _USARTWriteString 0AB9  
                 Write_Word@myValue1 0074                   Write_Word@myValue2 0076  
                 _temp_cur_matrix4x4 0062                        ?_eeprom_write 0070  
                     ?_printf_Screen 0070           get_num_removed_rows@matrix 0075  
             ?_get_holes_after_merge 0070                         ?_eeprom_read 0070  
                    ?_get_matrix_bit 0077                       _USARTWriteChar 175E  
               __end_of_Clear_Matrix 17CC                  left_most@matrix16x8 002D  
